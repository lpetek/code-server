{"version":3,"sources":["out-vscode/vs/workbench/contrib/notebook/common/services/fake","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/arrays.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/numbers.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/codicons.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/stream.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/buffer.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/extpath.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/objects.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/map.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/network.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/resources.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/async.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/glob.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/base/common/mime.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/controller/wordCharacterClassifier.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/core/stringBuilder.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/model.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/model/textChange.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/model/textModelSearch.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/modes/languageSelector.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/modes/tokenizationRegistry.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/platform/instantiation/common/instantiation.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/services/modelService.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/modes/languageFeatureRegistry.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/modes.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/core/lineTokens.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/model/tokensStore.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/platform/contextkey/common/contextkey.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/workbench/contrib/notebook/common/notebookCommon.ts","out-vscode/vs/workbench/contrib/notebook/common/services/file:/home/node/app/vendor/modules/code-oss-dev/src/vs/workbench/contrib/notebook/common/services/notebookSimpleWorker.ts"],"sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { ISplice } from 'vs/base/common/sequence';\n\n/**\n * Returns the last element of an array.\n * @param array The array.\n * @param n Which element from the end (default is zero).\n */\nexport function tail<T>(array: ArrayLike<T>, n: number = 0): T {\n\treturn array[array.length - (1 + n)];\n}\n\nexport function tail2<T>(arr: T[]): [T[], T] {\n\tif (arr.length === 0) {\n\t\tthrow new Error('Invalid tail call');\n\t}\n\n\treturn [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\n\nexport function equals<T>(one: ReadonlyArray<T> | undefined, other: ReadonlyArray<T> | undefined, itemEquals: (a: T, b: T) => boolean = (a, b) => a === b): boolean {\n\tif (one === other) {\n\t\treturn true;\n\t}\n\n\tif (!one || !other) {\n\t\treturn false;\n\t}\n\n\tif (one.length !== other.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0, len = one.length; i < len; i++) {\n\t\tif (!itemEquals(one[i], other[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function binarySearch<T>(array: ReadonlyArray<T>, key: T, comparator: (op1: T, op2: T) => number): number {\n\tlet low = 0,\n\t\thigh = array.length - 1;\n\n\twhile (low <= high) {\n\t\tconst mid = ((low + high) / 2) | 0;\n\t\tconst comp = comparator(array[mid], key);\n\t\tif (comp < 0) {\n\t\t\tlow = mid + 1;\n\t\t} else if (comp > 0) {\n\t\t\thigh = mid - 1;\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\t}\n\treturn -(low + 1);\n}\n\n/**\n * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false\n * are located before all elements where p(x) is true.\n * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.\n */\nexport function findFirstInSorted<T>(array: ReadonlyArray<T>, p: (x: T) => boolean): number {\n\tlet low = 0, high = array.length;\n\tif (high === 0) {\n\t\treturn 0; // no children\n\t}\n\twhile (low < high) {\n\t\tconst mid = Math.floor((low + high) / 2);\n\t\tif (p(array[mid])) {\n\t\t\thigh = mid;\n\t\t} else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\n\ntype Compare<T> = (a: T, b: T) => number;\n\n\nexport function quickSelect<T>(nth: number, data: T[], compare: Compare<T>): T {\n\n\tnth = nth | 0;\n\n\tif (nth >= data.length) {\n\t\tthrow new TypeError('invalid index');\n\t}\n\n\tlet pivotValue = data[Math.floor(data.length * Math.random())];\n\tlet lower: T[] = [];\n\tlet higher: T[] = [];\n\tlet pivots: T[] = [];\n\n\tfor (let value of data) {\n\t\tconst val = compare(value, pivotValue);\n\t\tif (val < 0) {\n\t\t\tlower.push(value);\n\t\t} else if (val > 0) {\n\t\t\thigher.push(value);\n\t\t} else {\n\t\t\tpivots.push(value);\n\t\t}\n\t}\n\n\tif (nth < lower.length) {\n\t\treturn quickSelect(nth, lower, compare);\n\t} else if (nth < lower.length + pivots.length) {\n\t\treturn pivots[0];\n\t} else {\n\t\treturn quickSelect(nth - (lower.length + pivots.length), higher, compare);\n\t}\n}\n\nexport function groupBy<T>(data: ReadonlyArray<T>, compare: (a: T, b: T) => number): T[][] {\n\tconst result: T[][] = [];\n\tlet currentGroup: T[] | undefined = undefined;\n\tfor (const element of data.slice(0).sort(compare)) {\n\t\tif (!currentGroup || compare(currentGroup[0], element) !== 0) {\n\t\t\tcurrentGroup = [element];\n\t\t\tresult.push(currentGroup);\n\t\t} else {\n\t\t\tcurrentGroup.push(element);\n\t\t}\n\t}\n\treturn result;\n}\n\ninterface IMutableSplice<T> extends ISplice<T> {\n\tdeleteCount: number;\n}\n\n/**\n * Diffs two *sorted* arrays and computes the splices which apply the diff.\n */\nexport function sortedDiff<T>(before: ReadonlyArray<T>, after: ReadonlyArray<T>, compare: (a: T, b: T) => number): ISplice<T>[] {\n\tconst result: IMutableSplice<T>[] = [];\n\n\tfunction pushSplice(start: number, deleteCount: number, toInsert: T[]): void {\n\t\tif (deleteCount === 0 && toInsert.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst latest = result[result.length - 1];\n\n\t\tif (latest && latest.start + latest.deleteCount === start) {\n\t\t\tlatest.deleteCount += deleteCount;\n\t\t\tlatest.toInsert.push(...toInsert);\n\t\t} else {\n\t\t\tresult.push({ start, deleteCount, toInsert });\n\t\t}\n\t}\n\n\tlet beforeIdx = 0;\n\tlet afterIdx = 0;\n\n\twhile (true) {\n\t\tif (beforeIdx === before.length) {\n\t\t\tpushSplice(beforeIdx, 0, after.slice(afterIdx));\n\t\t\tbreak;\n\t\t}\n\t\tif (afterIdx === after.length) {\n\t\t\tpushSplice(beforeIdx, before.length - beforeIdx, []);\n\t\t\tbreak;\n\t\t}\n\n\t\tconst beforeElement = before[beforeIdx];\n\t\tconst afterElement = after[afterIdx];\n\t\tconst n = compare(beforeElement, afterElement);\n\t\tif (n === 0) {\n\t\t\t// equal\n\t\t\tbeforeIdx += 1;\n\t\t\tafterIdx += 1;\n\t\t} else if (n < 0) {\n\t\t\t// beforeElement is smaller -> before element removed\n\t\t\tpushSplice(beforeIdx, 1, []);\n\t\t\tbeforeIdx += 1;\n\t\t} else if (n > 0) {\n\t\t\t// beforeElement is greater -> after element added\n\t\t\tpushSplice(beforeIdx, 0, [afterElement]);\n\t\t\tafterIdx += 1;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Takes two *sorted* arrays and computes their delta (removed, added elements).\n * Finishes in `Math.min(before.length, after.length)` steps.\n */\nexport function delta<T>(before: ReadonlyArray<T>, after: ReadonlyArray<T>, compare: (a: T, b: T) => number): { removed: T[], added: T[] } {\n\tconst splices = sortedDiff(before, after, compare);\n\tconst removed: T[] = [];\n\tconst added: T[] = [];\n\n\tfor (const splice of splices) {\n\t\tremoved.push(...before.slice(splice.start, splice.start + splice.deleteCount));\n\t\tadded.push(...splice.toInsert);\n\t}\n\n\treturn { removed, added };\n}\n\n/**\n * Returns the top N elements from the array.\n *\n * Faster than sorting the entire array when the array is a lot larger than N.\n *\n * @param array The unsorted array.\n * @param compare A sort function for the elements.\n * @param n The number of elements to return.\n * @return The first n elements from array when sorted with compare.\n */\nexport function top<T>(array: ReadonlyArray<T>, compare: (a: T, b: T) => number, n: number): T[] {\n\tif (n === 0) {\n\t\treturn [];\n\t}\n\tconst result = array.slice(0, n).sort(compare);\n\ttopStep(array, compare, result, n, array.length);\n\treturn result;\n}\n\n/**\n * Asynchronous variant of `top()` allowing for splitting up work in batches between which the event loop can run.\n *\n * Returns the top N elements from the array.\n *\n * Faster than sorting the entire array when the array is a lot larger than N.\n *\n * @param array The unsorted array.\n * @param compare A sort function for the elements.\n * @param n The number of elements to return.\n * @param batch The number of elements to examine before yielding to the event loop.\n * @return The first n elements from array when sorted with compare.\n */\nexport function topAsync<T>(array: T[], compare: (a: T, b: T) => number, n: number, batch: number, token?: CancellationToken): Promise<T[]> {\n\tif (n === 0) {\n\t\treturn Promise.resolve([]);\n\t}\n\n\treturn new Promise((resolve, reject) => {\n\t\t(async () => {\n\t\t\tconst o = array.length;\n\t\t\tconst result = array.slice(0, n).sort(compare);\n\t\t\tfor (let i = n, m = Math.min(n + batch, o); i < o; i = m, m = Math.min(m + batch, o)) {\n\t\t\t\tif (i > n) {\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve)); // nextTick() would starve I/O.\n\t\t\t\t}\n\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\tthrow canceled();\n\t\t\t\t}\n\t\t\t\ttopStep(array, compare, result, i, m);\n\t\t\t}\n\t\t\treturn result;\n\t\t})()\n\t\t\t.then(resolve, reject);\n\t});\n}\n\nfunction topStep<T>(array: ReadonlyArray<T>, compare: (a: T, b: T) => number, result: T[], i: number, m: number): void {\n\tfor (const n = result.length; i < m; i++) {\n\t\tconst element = array[i];\n\t\tif (compare(element, result[n - 1]) < 0) {\n\t\t\tresult.pop();\n\t\t\tconst j = findFirstInSorted(result, e => compare(element, e) < 0);\n\t\t\tresult.splice(j, 0, element);\n\t\t}\n\t}\n}\n\n/**\n * @returns New array with all falsy values removed. The original array IS NOT modified.\n */\nexport function coalesce<T>(array: ReadonlyArray<T | undefined | null>): T[] {\n\treturn <T[]>array.filter(e => !!e);\n}\n\n/**\n * Remove all falsy values from `array`. The original array IS modified.\n */\nexport function coalesceInPlace<T>(array: Array<T | undefined | null>): void {\n\tlet to = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tif (!!array[i]) {\n\t\t\tarray[to] = array[i];\n\t\t\tto += 1;\n\t\t}\n\t}\n\tarray.length = to;\n}\n\n/**\n * Moves the element in the array for the provided positions.\n */\nexport function move(array: any[], from: number, to: number): void {\n\tarray.splice(to, 0, array.splice(from, 1)[0]);\n}\n\n/**\n * @returns false if the provided object is an array and not empty.\n */\nexport function isFalsyOrEmpty(obj: any): boolean {\n\treturn !Array.isArray(obj) || obj.length === 0;\n}\n\n/**\n * @returns True if the provided object is an array and has at least one element.\n */\nexport function isNonEmptyArray<T>(obj: T[] | undefined | null): obj is T[];\nexport function isNonEmptyArray<T>(obj: readonly T[] | undefined | null): obj is readonly T[];\nexport function isNonEmptyArray<T>(obj: T[] | readonly T[] | undefined | null): obj is T[] | readonly T[] {\n\treturn Array.isArray(obj) && obj.length > 0;\n}\n\n/**\n * Removes duplicates from the given array. The optional keyFn allows to specify\n * how elements are checked for equality by returning a unique string for each.\n */\nexport function distinct<T>(array: ReadonlyArray<T>, keyFn?: (t: T) => string): T[] {\n\tif (!keyFn) {\n\t\treturn array.filter((element, position) => {\n\t\t\treturn array.indexOf(element) === position;\n\t\t});\n\t}\n\n\tconst seen: { [key: string]: boolean; } = Object.create(null);\n\treturn array.filter((elem) => {\n\t\tconst key = keyFn(elem);\n\t\tif (seen[key]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tseen[key] = true;\n\n\t\treturn true;\n\t});\n}\n\nexport function distinctES6<T>(array: ReadonlyArray<T>): T[] {\n\tconst seen = new Set<T>();\n\treturn array.filter(element => {\n\t\tif (seen.has(element)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tseen.add(element);\n\t\treturn true;\n\t});\n}\n\nexport function uniqueFilter<T>(keyFn: (t: T) => string): (t: T) => boolean {\n\tconst seen: { [key: string]: boolean; } = Object.create(null);\n\n\treturn element => {\n\t\tconst key = keyFn(element);\n\n\t\tif (seen[key]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tseen[key] = true;\n\t\treturn true;\n\t};\n}\n\nexport function lastIndex<T>(array: ReadonlyArray<T>, fn: (item: T) => boolean): number {\n\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\tconst element = array[i];\n\n\t\tif (fn(element)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\nexport function firstOrDefault<T, NotFound = T>(array: ReadonlyArray<T>, notFoundValue: NotFound): T | NotFound;\nexport function firstOrDefault<T>(array: ReadonlyArray<T>): T | undefined;\nexport function firstOrDefault<T, NotFound = T>(array: ReadonlyArray<T>, notFoundValue?: NotFound): T | NotFound | undefined {\n\treturn array.length > 0 ? array[0] : notFoundValue;\n}\n\nexport function commonPrefixLength<T>(one: ReadonlyArray<T>, other: ReadonlyArray<T>, equals: (a: T, b: T) => boolean = (a, b) => a === b): number {\n\tlet result = 0;\n\n\tfor (let i = 0, len = Math.min(one.length, other.length); i < len && equals(one[i], other[i]); i++) {\n\t\tresult++;\n\t}\n\n\treturn result;\n}\n\nexport function flatten<T>(arr: T[][]): T[] {\n\treturn (<T[]>[]).concat(...arr);\n}\n\nexport function range(to: number): number[];\nexport function range(from: number, to: number): number[];\nexport function range(arg: number, to?: number): number[] {\n\tlet from = typeof to === 'number' ? arg : 0;\n\n\tif (typeof to === 'number') {\n\t\tfrom = arg;\n\t} else {\n\t\tfrom = 0;\n\t\tto = arg;\n\t}\n\n\tconst result: number[] = [];\n\n\tif (from <= to) {\n\t\tfor (let i = from; i < to; i++) {\n\t\t\tresult.push(i);\n\t\t}\n\t} else {\n\t\tfor (let i = from; i > to; i--) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function index<T>(array: ReadonlyArray<T>, indexer: (t: T) => string): { [key: string]: T; };\nexport function index<T, R>(array: ReadonlyArray<T>, indexer: (t: T) => string, mapper: (t: T) => R): { [key: string]: R; };\nexport function index<T, R>(array: ReadonlyArray<T>, indexer: (t: T) => string, mapper?: (t: T) => R): { [key: string]: R; } {\n\treturn array.reduce((r, t) => {\n\t\tr[indexer(t)] = mapper ? mapper(t) : t;\n\t\treturn r;\n\t}, Object.create(null));\n}\n\n/**\n * Inserts an element into an array. Returns a function which, when\n * called, will remove that element from the array.\n */\nexport function insert<T>(array: T[], element: T): () => void {\n\tarray.push(element);\n\n\treturn () => remove(array, element);\n}\n\n/**\n * Removes an element from an array if it can be found.\n */\nexport function remove<T>(array: T[], element: T): T | undefined {\n\tconst index = array.indexOf(element);\n\tif (index > -1) {\n\t\tarray.splice(index, 1);\n\n\t\treturn element;\n\t}\n\n\treturn undefined;\n}\n\n/**\n * Insert `insertArr` inside `target` at `insertIndex`.\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\n */\nexport function arrayInsert<T>(target: T[], insertIndex: number, insertArr: T[]): T[] {\n\tconst before = target.slice(0, insertIndex);\n\tconst after = target.slice(insertIndex);\n\treturn before.concat(insertArr, after);\n}\n\n/**\n * Uses Fisher-Yates shuffle to shuffle the given array\n */\nexport function shuffle<T>(array: T[], _seed?: number): void {\n\tlet rand: () => number;\n\n\tif (typeof _seed === 'number') {\n\t\tlet seed = _seed;\n\t\t// Seeded random number generator in JS. Modified from:\n\t\t// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\n\t\trand = () => {\n\t\t\tconst x = Math.sin(seed++) * 179426549; // throw away most significant digits and reduce any potential bias\n\t\t\treturn x - Math.floor(x);\n\t\t};\n\t} else {\n\t\trand = Math.random;\n\t}\n\n\tfor (let i = array.length - 1; i > 0; i -= 1) {\n\t\tconst j = Math.floor(rand() * (i + 1));\n\t\tconst temp = array[i];\n\t\tarray[i] = array[j];\n\t\tarray[j] = temp;\n\t}\n}\n\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart<T>(arr: T[], value: T): void {\n\tconst index = arr.indexOf(value);\n\n\tif (index > -1) {\n\t\tarr.splice(index, 1);\n\t\tarr.unshift(value);\n\t}\n}\n\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd<T>(arr: T[], value: T): void {\n\tconst index = arr.indexOf(value);\n\n\tif (index > -1) {\n\t\tarr.splice(index, 1);\n\t\tarr.push(value);\n\t}\n}\n\nexport function mapArrayOrNot<T, U>(items: T | T[], fn: (_: T) => U): U | U[] {\n\treturn Array.isArray(items) ?\n\t\titems.map(fn) :\n\t\tfn(items);\n}\n\nexport function asArray<T>(x: T | T[]): T[];\nexport function asArray<T>(x: T | readonly T[]): readonly T[];\nexport function asArray<T>(x: T | T[]): T[] {\n\treturn Array.isArray(x) ? x : [x];\n}\n\nexport function getRandomElement<T>(arr: T[]): T | undefined {\n\treturn arr[Math.floor(Math.random() * arr.length)];\n}\n\n/**\n * Returns the first mapped value of the array which is not undefined.\n */\nexport function mapFind<T, R>(array: Iterable<T>, mapFn: (value: T) => R | undefined): R | undefined {\n\tfor (const value of array) {\n\t\tconst mapped = mapFn(value);\n\t\tif (mapped !== undefined) {\n\t\t\treturn mapped;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n/**\n * Insert the new items in the array.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start inserting elements.\n * @param newItems The items to be inserted\n */\nexport function insertInto<T>(array: T[], start: number, newItems: T[]): void {\n\tconst startIdx = getActualStartIndex(array, start);\n\tconst originalLength = array.length;\n\tconst newItemsLength = newItems.length;\n\tarray.length = originalLength + newItemsLength;\n\t// Move the items after the start index, start from the end so that we don't overwrite any value.\n\tfor (let i = originalLength - 1; i >= startIdx; i--) {\n\t\tarray[i + newItemsLength] = array[i];\n\t}\n\n\tfor (let i = 0; i < newItemsLength; i++) {\n\t\tarray[i + startIdx] = newItems[i];\n\t}\n}\n\n/**\n * Removes elements from an array and inserts new elements in their place, returning the deleted elements. Alternative to the native Array.splice method, it\n * can only support limited number of items due to the maximum call stack size limit.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start removing elements.\n * @param deleteCount The number of elements to remove.\n * @returns An array containing the elements that were deleted.\n */\nexport function splice<T>(array: T[], start: number, deleteCount: number, newItems: T[]): T[] {\n\tconst index = getActualStartIndex(array, start);\n\tconst result = array.splice(index, deleteCount);\n\tinsertInto(array, index, newItems);\n\treturn result;\n}\n\n/**\n * Determine the actual start index (same logic as the native splice() or slice())\n * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.\n * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.\n * @param array The target array.\n * @param start The operation index.\n */\nfunction getActualStartIndex<T>(array: T[], start: number): number {\n\treturn start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);\n}\n\n/**\n * Like Math.min with a delegate, and returns the winning index\n */\nexport function minIndex<T>(array: readonly T[], fn: (value: T) => number): number {\n\tlet minValue = Number.MAX_SAFE_INTEGER;\n\tlet minIdx = 0;\n\tarray.forEach((value, i) => {\n\t\tconst thisValue = fn(value);\n\t\tif (thisValue < minValue) {\n\t\t\tminValue = thisValue;\n\t\t\tminIdx = i;\n\t\t}\n\t});\n\n\treturn minIdx;\n}\n\n/**\n * Like Math.max with a delegate, and returns the winning index\n */\nexport function maxIndex<T>(array: readonly T[], fn: (value: T) => number): number {\n\tlet minValue = Number.MIN_SAFE_INTEGER;\n\tlet maxIdx = 0;\n\tarray.forEach((value, i) => {\n\t\tconst thisValue = fn(value);\n\t\tif (thisValue > minValue) {\n\t\t\tminValue = thisValue;\n\t\t\tmaxIdx = i;\n\t\t}\n\t});\n\n\treturn maxIdx;\n}\n\nexport class ArrayQueue<T> {\n\tprivate firstIdx = 0;\n\tprivate lastIdx = this.items.length - 1;\n\n\t/**\n\t * Constructs a queue that is backed by the given array. Runtime is O(1).\n\t*/\n\tconstructor(private readonly items: T[]) { }\n\n\tget length(): number {\n\t\treturn this.lastIdx - this.firstIdx + 1;\n\t}\n\n\t/**\n\t * Consumes elements from the beginning of the queue as long as the predicate returns true.\n\t * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).\n\t*/\n\ttakeWhile(predicate: (value: T) => boolean): T[] | null {\n\t\t// P(k) := k <= this.lastIdx && predicate(this.items[k])\n\t\t// Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)\n\n\t\tlet startIdx = this.firstIdx;\n\t\twhile (startIdx < this.items.length && predicate(this.items[startIdx])) {\n\t\t\tstartIdx++;\n\t\t}\n\t\tconst result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);\n\t\tthis.firstIdx = startIdx;\n\t\treturn result;\n\t}\n\n\t/**\n\t * Consumes elements from the end of the queue as long as the predicate returns true.\n\t * If no elements were consumed, `null` is returned.\n\t * The result has the same order as the underlying array!\n\t*/\n\ttakeFromEndWhile(predicate: (value: T) => boolean): T[] | null {\n\t\t// P(k) := this.firstIdx >= k && predicate(this.items[k])\n\t\t// Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]\n\n\t\tlet endIdx = this.lastIdx;\n\t\twhile (endIdx >= 0 && predicate(this.items[endIdx])) {\n\t\t\tendIdx--;\n\t\t}\n\t\tconst result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);\n\t\tthis.lastIdx = endIdx;\n\t\treturn result;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport function clamp(value: number, min: number, max: number): number {\n\treturn Math.min(Math.max(value, min), max);\n}\n\nexport function rot(index: number, modulo: number): number {\n\treturn (modulo + (index % modulo)) % modulo;\n}\n\nexport class Counter {\n\tprivate _next = 0;\n\n\tgetNext(): number {\n\t\treturn this._next++;\n\t}\n}\n\nexport class MovingAverage {\n\n\tprivate _n = 1;\n\tprivate _val = 0;\n\n\tupdate(value: number): this {\n\t\tthis._val = this._val + (value - this._val) / this._n;\n\t\tthis._n += 1;\n\t\treturn this;\n\t}\n\n\tget value(): number {\n\t\treturn this._val;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\n\nexport interface IIconRegistry {\n\treadonly all: IterableIterator<Codicon>;\n\treadonly onDidRegister: Event<Codicon>;\n\tget(id: string): Codicon | undefined;\n}\n\nclass Registry implements IIconRegistry {\n\n\tprivate readonly _icons = new Map<string, Codicon>();\n\tprivate readonly _onDidRegister = new Emitter<Codicon>();\n\n\tpublic add(icon: Codicon) {\n\t\tconst existing = this._icons.get(icon.id);\n\t\tif (!existing) {\n\t\t\tthis._icons.set(icon.id, icon);\n\t\t\tthis._onDidRegister.fire(icon);\n\t\t} else if (icon.description) {\n\t\t\texisting.description = icon.description;\n\t\t} else {\n\t\t\tconsole.error(`Duplicate registration of codicon ${icon.id}`);\n\t\t}\n\t}\n\n\tpublic get(id: string): Codicon | undefined {\n\t\treturn this._icons.get(id);\n\t}\n\n\tpublic get all(): IterableIterator<Codicon> {\n\t\treturn this._icons.values();\n\t}\n\n\tpublic get onDidRegister(): Event<Codicon> {\n\t\treturn this._onDidRegister.event;\n\t}\n}\n\nconst _registry = new Registry();\n\nexport const iconRegistry: IIconRegistry = _registry;\n\nexport function registerCodicon(id: string, def: Codicon): Codicon {\n\treturn new Codicon(id, def);\n}\n\n// Selects all codicon names encapsulated in the `$()` syntax and wraps the\n// results with spaces so that screen readers can read the text better.\nexport function getCodiconAriaLabel(text: string | undefined) {\n\tif (!text) {\n\t\treturn '';\n\t}\n\n\treturn text.replace(/\\$\\((.*?)\\)/g, (_match, codiconName) => ` ${codiconName} `).trim();\n}\n\nexport class Codicon implements CSSIcon {\n\tconstructor(public readonly id: string, public readonly definition: Codicon | IconDefinition, public description?: string) {\n\t\t_registry.add(this);\n\t}\n\tpublic get classNames() { return 'codicon codicon-' + this.id; }\n\t// classNamesArray is useful for migrating to ES6 classlist\n\tpublic get classNamesArray() { return ['codicon', 'codicon-' + this.id]; }\n\tpublic get cssSelector() { return '.codicon.codicon-' + this.id; }\n}\n\nexport function getClassNamesArray(id: string, modifier?: string) {\n\tconst classNames = ['codicon', 'codicon-' + id];\n\tif (modifier) {\n\t\tclassNames.push('codicon-modifier-' + modifier);\n\t}\n\treturn classNames;\n}\n\nexport interface CSSIcon {\n\treadonly id: string;\n}\n\n\nexport namespace CSSIcon {\n\texport const iconNameSegment = '[A-Za-z0-9]+';\n\texport const iconNameExpression = '[A-Za-z0-9\\\\-]+';\n\texport const iconModifierExpression = '~[A-Za-z]+';\n\n\tconst cssIconIdRegex = new RegExp(`^(${iconNameExpression})(${iconModifierExpression})?$`);\n\n\texport function asClassNameArray(icon: CSSIcon): string[] {\n\t\tif (icon instanceof Codicon) {\n\t\t\treturn ['codicon', 'codicon-' + icon.id];\n\t\t}\n\t\tconst match = cssIconIdRegex.exec(icon.id);\n\t\tif (!match) {\n\t\t\treturn asClassNameArray(Codicon.error);\n\t\t}\n\t\tlet [, id, modifier] = match;\n\t\tconst classNames = ['codicon', 'codicon-' + id];\n\t\tif (modifier) {\n\t\t\tclassNames.push('codicon-modifier-' + modifier.substr(1));\n\t\t}\n\t\treturn classNames;\n\t}\n\n\texport function asClassName(icon: CSSIcon): string {\n\t\treturn asClassNameArray(icon).join(' ');\n\t}\n\n\texport function asCSSSelector(icon: CSSIcon): string {\n\t\treturn '.' + asClassNameArray(icon).join('.');\n\t}\n}\n\n\n\ninterface IconDefinition {\n\tfontCharacter: string;\n}\n\nexport namespace Codicon {\n\n\t// built-in icons, with image name\n\texport const add = new Codicon('add', { fontCharacter: '\\\\ea60' });\n\texport const plus = new Codicon('plus', { fontCharacter: '\\\\ea60' });\n\texport const gistNew = new Codicon('gist-new', { fontCharacter: '\\\\ea60' });\n\texport const repoCreate = new Codicon('repo-create', { fontCharacter: '\\\\ea60' });\n\texport const lightbulb = new Codicon('lightbulb', { fontCharacter: '\\\\ea61' });\n\texport const lightBulb = new Codicon('light-bulb', { fontCharacter: '\\\\ea61' });\n\texport const repo = new Codicon('repo', { fontCharacter: '\\\\ea62' });\n\texport const repoDelete = new Codicon('repo-delete', { fontCharacter: '\\\\ea62' });\n\texport const gistFork = new Codicon('gist-fork', { fontCharacter: '\\\\ea63' });\n\texport const repoForked = new Codicon('repo-forked', { fontCharacter: '\\\\ea63' });\n\texport const gitPullRequest = new Codicon('git-pull-request', { fontCharacter: '\\\\ea64' });\n\texport const gitPullRequestAbandoned = new Codicon('git-pull-request-abandoned', { fontCharacter: '\\\\ea64' });\n\texport const recordKeys = new Codicon('record-keys', { fontCharacter: '\\\\ea65' });\n\texport const keyboard = new Codicon('keyboard', { fontCharacter: '\\\\ea65' });\n\texport const tag = new Codicon('tag', { fontCharacter: '\\\\ea66' });\n\texport const tagAdd = new Codicon('tag-add', { fontCharacter: '\\\\ea66' });\n\texport const tagRemove = new Codicon('tag-remove', { fontCharacter: '\\\\ea66' });\n\texport const person = new Codicon('person', { fontCharacter: '\\\\ea67' });\n\texport const personFollow = new Codicon('person-follow', { fontCharacter: '\\\\ea67' });\n\texport const personOutline = new Codicon('person-outline', { fontCharacter: '\\\\ea67' });\n\texport const personFilled = new Codicon('person-filled', { fontCharacter: '\\\\ea67' });\n\texport const gitBranch = new Codicon('git-branch', { fontCharacter: '\\\\ea68' });\n\texport const gitBranchCreate = new Codicon('git-branch-create', { fontCharacter: '\\\\ea68' });\n\texport const gitBranchDelete = new Codicon('git-branch-delete', { fontCharacter: '\\\\ea68' });\n\texport const sourceControl = new Codicon('source-control', { fontCharacter: '\\\\ea68' });\n\texport const mirror = new Codicon('mirror', { fontCharacter: '\\\\ea69' });\n\texport const mirrorPublic = new Codicon('mirror-public', { fontCharacter: '\\\\ea69' });\n\texport const star = new Codicon('star', { fontCharacter: '\\\\ea6a' });\n\texport const starAdd = new Codicon('star-add', { fontCharacter: '\\\\ea6a' });\n\texport const starDelete = new Codicon('star-delete', { fontCharacter: '\\\\ea6a' });\n\texport const starEmpty = new Codicon('star-empty', { fontCharacter: '\\\\ea6a' });\n\texport const comment = new Codicon('comment', { fontCharacter: '\\\\ea6b' });\n\texport const commentAdd = new Codicon('comment-add', { fontCharacter: '\\\\ea6b' });\n\texport const alert = new Codicon('alert', { fontCharacter: '\\\\ea6c' });\n\texport const warning = new Codicon('warning', { fontCharacter: '\\\\ea6c' });\n\texport const search = new Codicon('search', { fontCharacter: '\\\\ea6d' });\n\texport const searchSave = new Codicon('search-save', { fontCharacter: '\\\\ea6d' });\n\texport const logOut = new Codicon('log-out', { fontCharacter: '\\\\ea6e' });\n\texport const signOut = new Codicon('sign-out', { fontCharacter: '\\\\ea6e' });\n\texport const logIn = new Codicon('log-in', { fontCharacter: '\\\\ea6f' });\n\texport const signIn = new Codicon('sign-in', { fontCharacter: '\\\\ea6f' });\n\texport const eye = new Codicon('eye', { fontCharacter: '\\\\ea70' });\n\texport const eyeUnwatch = new Codicon('eye-unwatch', { fontCharacter: '\\\\ea70' });\n\texport const eyeWatch = new Codicon('eye-watch', { fontCharacter: '\\\\ea70' });\n\texport const circleFilled = new Codicon('circle-filled', { fontCharacter: '\\\\ea71' });\n\texport const primitiveDot = new Codicon('primitive-dot', { fontCharacter: '\\\\ea71' });\n\texport const closeDirty = new Codicon('close-dirty', { fontCharacter: '\\\\ea71' });\n\texport const debugBreakpoint = new Codicon('debug-breakpoint', { fontCharacter: '\\\\ea71' });\n\texport const debugBreakpointDisabled = new Codicon('debug-breakpoint-disabled', { fontCharacter: '\\\\ea71' });\n\texport const debugHint = new Codicon('debug-hint', { fontCharacter: '\\\\ea71' });\n\texport const primitiveSquare = new Codicon('primitive-square', { fontCharacter: '\\\\ea72' });\n\texport const edit = new Codicon('edit', { fontCharacter: '\\\\ea73' });\n\texport const pencil = new Codicon('pencil', { fontCharacter: '\\\\ea73' });\n\texport const info = new Codicon('info', { fontCharacter: '\\\\ea74' });\n\texport const issueOpened = new Codicon('issue-opened', { fontCharacter: '\\\\ea74' });\n\texport const gistPrivate = new Codicon('gist-private', { fontCharacter: '\\\\ea75' });\n\texport const gitForkPrivate = new Codicon('git-fork-private', { fontCharacter: '\\\\ea75' });\n\texport const lock = new Codicon('lock', { fontCharacter: '\\\\ea75' });\n\texport const mirrorPrivate = new Codicon('mirror-private', { fontCharacter: '\\\\ea75' });\n\texport const close = new Codicon('close', { fontCharacter: '\\\\ea76' });\n\texport const removeClose = new Codicon('remove-close', { fontCharacter: '\\\\ea76' });\n\texport const x = new Codicon('x', { fontCharacter: '\\\\ea76' });\n\texport const repoSync = new Codicon('repo-sync', { fontCharacter: '\\\\ea77' });\n\texport const sync = new Codicon('sync', { fontCharacter: '\\\\ea77' });\n\texport const clone = new Codicon('clone', { fontCharacter: '\\\\ea78' });\n\texport const desktopDownload = new Codicon('desktop-download', { fontCharacter: '\\\\ea78' });\n\texport const beaker = new Codicon('beaker', { fontCharacter: '\\\\ea79' });\n\texport const microscope = new Codicon('microscope', { fontCharacter: '\\\\ea79' });\n\texport const vm = new Codicon('vm', { fontCharacter: '\\\\ea7a' });\n\texport const deviceDesktop = new Codicon('device-desktop', { fontCharacter: '\\\\ea7a' });\n\texport const file = new Codicon('file', { fontCharacter: '\\\\ea7b' });\n\texport const fileText = new Codicon('file-text', { fontCharacter: '\\\\ea7b' });\n\texport const more = new Codicon('more', { fontCharacter: '\\\\ea7c' });\n\texport const ellipsis = new Codicon('ellipsis', { fontCharacter: '\\\\ea7c' });\n\texport const kebabHorizontal = new Codicon('kebab-horizontal', { fontCharacter: '\\\\ea7c' });\n\texport const mailReply = new Codicon('mail-reply', { fontCharacter: '\\\\ea7d' });\n\texport const reply = new Codicon('reply', { fontCharacter: '\\\\ea7d' });\n\texport const organization = new Codicon('organization', { fontCharacter: '\\\\ea7e' });\n\texport const organizationFilled = new Codicon('organization-filled', { fontCharacter: '\\\\ea7e' });\n\texport const organizationOutline = new Codicon('organization-outline', { fontCharacter: '\\\\ea7e' });\n\texport const newFile = new Codicon('new-file', { fontCharacter: '\\\\ea7f' });\n\texport const fileAdd = new Codicon('file-add', { fontCharacter: '\\\\ea7f' });\n\texport const newFolder = new Codicon('new-folder', { fontCharacter: '\\\\ea80' });\n\texport const fileDirectoryCreate = new Codicon('file-directory-create', { fontCharacter: '\\\\ea80' });\n\texport const trash = new Codicon('trash', { fontCharacter: '\\\\ea81' });\n\texport const trashcan = new Codicon('trashcan', { fontCharacter: '\\\\ea81' });\n\texport const history = new Codicon('history', { fontCharacter: '\\\\ea82' });\n\texport const clock = new Codicon('clock', { fontCharacter: '\\\\ea82' });\n\texport const folder = new Codicon('folder', { fontCharacter: '\\\\ea83' });\n\texport const fileDirectory = new Codicon('file-directory', { fontCharacter: '\\\\ea83' });\n\texport const symbolFolder = new Codicon('symbol-folder', { fontCharacter: '\\\\ea83' });\n\texport const logoGithub = new Codicon('logo-github', { fontCharacter: '\\\\ea84' });\n\texport const markGithub = new Codicon('mark-github', { fontCharacter: '\\\\ea84' });\n\texport const github = new Codicon('github', { fontCharacter: '\\\\ea84' });\n\texport const terminal = new Codicon('terminal', { fontCharacter: '\\\\ea85' });\n\texport const console = new Codicon('console', { fontCharacter: '\\\\ea85' });\n\texport const repl = new Codicon('repl', { fontCharacter: '\\\\ea85' });\n\texport const zap = new Codicon('zap', { fontCharacter: '\\\\ea86' });\n\texport const symbolEvent = new Codicon('symbol-event', { fontCharacter: '\\\\ea86' });\n\texport const error = new Codicon('error', { fontCharacter: '\\\\ea87' });\n\texport const stop = new Codicon('stop', { fontCharacter: '\\\\ea87' });\n\texport const variable = new Codicon('variable', { fontCharacter: '\\\\ea88' });\n\texport const symbolVariable = new Codicon('symbol-variable', { fontCharacter: '\\\\ea88' });\n\texport const array = new Codicon('array', { fontCharacter: '\\\\ea8a' });\n\texport const symbolArray = new Codicon('symbol-array', { fontCharacter: '\\\\ea8a' });\n\texport const symbolModule = new Codicon('symbol-module', { fontCharacter: '\\\\ea8b' });\n\texport const symbolPackage = new Codicon('symbol-package', { fontCharacter: '\\\\ea8b' });\n\texport const symbolNamespace = new Codicon('symbol-namespace', { fontCharacter: '\\\\ea8b' });\n\texport const symbolObject = new Codicon('symbol-object', { fontCharacter: '\\\\ea8b' });\n\texport const symbolMethod = new Codicon('symbol-method', { fontCharacter: '\\\\ea8c' });\n\texport const symbolFunction = new Codicon('symbol-function', { fontCharacter: '\\\\ea8c' });\n\texport const symbolConstructor = new Codicon('symbol-constructor', { fontCharacter: '\\\\ea8c' });\n\texport const symbolBoolean = new Codicon('symbol-boolean', { fontCharacter: '\\\\ea8f' });\n\texport const symbolNull = new Codicon('symbol-null', { fontCharacter: '\\\\ea8f' });\n\texport const symbolNumeric = new Codicon('symbol-numeric', { fontCharacter: '\\\\ea90' });\n\texport const symbolNumber = new Codicon('symbol-number', { fontCharacter: '\\\\ea90' });\n\texport const symbolStructure = new Codicon('symbol-structure', { fontCharacter: '\\\\ea91' });\n\texport const symbolStruct = new Codicon('symbol-struct', { fontCharacter: '\\\\ea91' });\n\texport const symbolParameter = new Codicon('symbol-parameter', { fontCharacter: '\\\\ea92' });\n\texport const symbolTypeParameter = new Codicon('symbol-type-parameter', { fontCharacter: '\\\\ea92' });\n\texport const symbolKey = new Codicon('symbol-key', { fontCharacter: '\\\\ea93' });\n\texport const symbolText = new Codicon('symbol-text', { fontCharacter: '\\\\ea93' });\n\texport const symbolReference = new Codicon('symbol-reference', { fontCharacter: '\\\\ea94' });\n\texport const goToFile = new Codicon('go-to-file', { fontCharacter: '\\\\ea94' });\n\texport const symbolEnum = new Codicon('symbol-enum', { fontCharacter: '\\\\ea95' });\n\texport const symbolValue = new Codicon('symbol-value', { fontCharacter: '\\\\ea95' });\n\texport const symbolRuler = new Codicon('symbol-ruler', { fontCharacter: '\\\\ea96' });\n\texport const symbolUnit = new Codicon('symbol-unit', { fontCharacter: '\\\\ea96' });\n\texport const activateBreakpoints = new Codicon('activate-breakpoints', { fontCharacter: '\\\\ea97' });\n\texport const archive = new Codicon('archive', { fontCharacter: '\\\\ea98' });\n\texport const arrowBoth = new Codicon('arrow-both', { fontCharacter: '\\\\ea99' });\n\texport const arrowDown = new Codicon('arrow-down', { fontCharacter: '\\\\ea9a' });\n\texport const arrowLeft = new Codicon('arrow-left', { fontCharacter: '\\\\ea9b' });\n\texport const arrowRight = new Codicon('arrow-right', { fontCharacter: '\\\\ea9c' });\n\texport const arrowSmallDown = new Codicon('arrow-small-down', { fontCharacter: '\\\\ea9d' });\n\texport const arrowSmallLeft = new Codicon('arrow-small-left', { fontCharacter: '\\\\ea9e' });\n\texport const arrowSmallRight = new Codicon('arrow-small-right', { fontCharacter: '\\\\ea9f' });\n\texport const arrowSmallUp = new Codicon('arrow-small-up', { fontCharacter: '\\\\eaa0' });\n\texport const arrowUp = new Codicon('arrow-up', { fontCharacter: '\\\\eaa1' });\n\texport const bell = new Codicon('bell', { fontCharacter: '\\\\eaa2' });\n\texport const bold = new Codicon('bold', { fontCharacter: '\\\\eaa3' });\n\texport const book = new Codicon('book', { fontCharacter: '\\\\eaa4' });\n\texport const bookmark = new Codicon('bookmark', { fontCharacter: '\\\\eaa5' });\n\texport const debugBreakpointConditionalUnverified = new Codicon('debug-breakpoint-conditional-unverified', { fontCharacter: '\\\\eaa6' });\n\texport const debugBreakpointConditional = new Codicon('debug-breakpoint-conditional', { fontCharacter: '\\\\eaa7' });\n\texport const debugBreakpointConditionalDisabled = new Codicon('debug-breakpoint-conditional-disabled', { fontCharacter: '\\\\eaa7' });\n\texport const debugBreakpointDataUnverified = new Codicon('debug-breakpoint-data-unverified', { fontCharacter: '\\\\eaa8' });\n\texport const debugBreakpointData = new Codicon('debug-breakpoint-data', { fontCharacter: '\\\\eaa9' });\n\texport const debugBreakpointDataDisabled = new Codicon('debug-breakpoint-data-disabled', { fontCharacter: '\\\\eaa9' });\n\texport const debugBreakpointLogUnverified = new Codicon('debug-breakpoint-log-unverified', { fontCharacter: '\\\\eaaa' });\n\texport const debugBreakpointLog = new Codicon('debug-breakpoint-log', { fontCharacter: '\\\\eaab' });\n\texport const debugBreakpointLogDisabled = new Codicon('debug-breakpoint-log-disabled', { fontCharacter: '\\\\eaab' });\n\texport const briefcase = new Codicon('briefcase', { fontCharacter: '\\\\eaac' });\n\texport const broadcast = new Codicon('broadcast', { fontCharacter: '\\\\eaad' });\n\texport const browser = new Codicon('browser', { fontCharacter: '\\\\eaae' });\n\texport const bug = new Codicon('bug', { fontCharacter: '\\\\eaaf' });\n\texport const calendar = new Codicon('calendar', { fontCharacter: '\\\\eab0' });\n\texport const caseSensitive = new Codicon('case-sensitive', { fontCharacter: '\\\\eab1' });\n\texport const check = new Codicon('check', { fontCharacter: '\\\\eab2' });\n\texport const checklist = new Codicon('checklist', { fontCharacter: '\\\\eab3' });\n\texport const chevronDown = new Codicon('chevron-down', { fontCharacter: '\\\\eab4' });\n\texport const chevronLeft = new Codicon('chevron-left', { fontCharacter: '\\\\eab5' });\n\texport const chevronRight = new Codicon('chevron-right', { fontCharacter: '\\\\eab6' });\n\texport const chevronUp = new Codicon('chevron-up', { fontCharacter: '\\\\eab7' });\n\texport const chromeClose = new Codicon('chrome-close', { fontCharacter: '\\\\eab8' });\n\texport const chromeMaximize = new Codicon('chrome-maximize', { fontCharacter: '\\\\eab9' });\n\texport const chromeMinimize = new Codicon('chrome-minimize', { fontCharacter: '\\\\eaba' });\n\texport const chromeRestore = new Codicon('chrome-restore', { fontCharacter: '\\\\eabb' });\n\texport const circleOutline = new Codicon('circle-outline', { fontCharacter: '\\\\eabc' });\n\texport const debugBreakpointUnverified = new Codicon('debug-breakpoint-unverified', { fontCharacter: '\\\\eabc' });\n\texport const circleSlash = new Codicon('circle-slash', { fontCharacter: '\\\\eabd' });\n\texport const circuitBoard = new Codicon('circuit-board', { fontCharacter: '\\\\eabe' });\n\texport const clearAll = new Codicon('clear-all', { fontCharacter: '\\\\eabf' });\n\texport const clippy = new Codicon('clippy', { fontCharacter: '\\\\eac0' });\n\texport const closeAll = new Codicon('close-all', { fontCharacter: '\\\\eac1' });\n\texport const cloudDownload = new Codicon('cloud-download', { fontCharacter: '\\\\eac2' });\n\texport const cloudUpload = new Codicon('cloud-upload', { fontCharacter: '\\\\eac3' });\n\texport const code = new Codicon('code', { fontCharacter: '\\\\eac4' });\n\texport const collapseAll = new Codicon('collapse-all', { fontCharacter: '\\\\eac5' });\n\texport const colorMode = new Codicon('color-mode', { fontCharacter: '\\\\eac6' });\n\texport const commentDiscussion = new Codicon('comment-discussion', { fontCharacter: '\\\\eac7' });\n\texport const compareChanges = new Codicon('compare-changes', { fontCharacter: '\\\\eafd' });\n\texport const creditCard = new Codicon('credit-card', { fontCharacter: '\\\\eac9' });\n\texport const dash = new Codicon('dash', { fontCharacter: '\\\\eacc' });\n\texport const dashboard = new Codicon('dashboard', { fontCharacter: '\\\\eacd' });\n\texport const database = new Codicon('database', { fontCharacter: '\\\\eace' });\n\texport const debugContinue = new Codicon('debug-continue', { fontCharacter: '\\\\eacf' });\n\texport const debugDisconnect = new Codicon('debug-disconnect', { fontCharacter: '\\\\ead0' });\n\texport const debugPause = new Codicon('debug-pause', { fontCharacter: '\\\\ead1' });\n\texport const debugRestart = new Codicon('debug-restart', { fontCharacter: '\\\\ead2' });\n\texport const debugStart = new Codicon('debug-start', { fontCharacter: '\\\\ead3' });\n\texport const debugStepInto = new Codicon('debug-step-into', { fontCharacter: '\\\\ead4' });\n\texport const debugStepOut = new Codicon('debug-step-out', { fontCharacter: '\\\\ead5' });\n\texport const debugStepOver = new Codicon('debug-step-over', { fontCharacter: '\\\\ead6' });\n\texport const debugStop = new Codicon('debug-stop', { fontCharacter: '\\\\ead7' });\n\texport const debug = new Codicon('debug', { fontCharacter: '\\\\ead8' });\n\texport const deviceCameraVideo = new Codicon('device-camera-video', { fontCharacter: '\\\\ead9' });\n\texport const deviceCamera = new Codicon('device-camera', { fontCharacter: '\\\\eada' });\n\texport const deviceMobile = new Codicon('device-mobile', { fontCharacter: '\\\\eadb' });\n\texport const diffAdded = new Codicon('diff-added', { fontCharacter: '\\\\eadc' });\n\texport const diffIgnored = new Codicon('diff-ignored', { fontCharacter: '\\\\eadd' });\n\texport const diffModified = new Codicon('diff-modified', { fontCharacter: '\\\\eade' });\n\texport const diffRemoved = new Codicon('diff-removed', { fontCharacter: '\\\\eadf' });\n\texport const diffRenamed = new Codicon('diff-renamed', { fontCharacter: '\\\\eae0' });\n\texport const diff = new Codicon('diff', { fontCharacter: '\\\\eae1' });\n\texport const discard = new Codicon('discard', { fontCharacter: '\\\\eae2' });\n\texport const editorLayout = new Codicon('editor-layout', { fontCharacter: '\\\\eae3' });\n\texport const emptyWindow = new Codicon('empty-window', { fontCharacter: '\\\\eae4' });\n\texport const exclude = new Codicon('exclude', { fontCharacter: '\\\\eae5' });\n\texport const extensions = new Codicon('extensions', { fontCharacter: '\\\\eae6' });\n\texport const eyeClosed = new Codicon('eye-closed', { fontCharacter: '\\\\eae7' });\n\texport const fileBinary = new Codicon('file-binary', { fontCharacter: '\\\\eae8' });\n\texport const fileCode = new Codicon('file-code', { fontCharacter: '\\\\eae9' });\n\texport const fileMedia = new Codicon('file-media', { fontCharacter: '\\\\eaea' });\n\texport const filePdf = new Codicon('file-pdf', { fontCharacter: '\\\\eaeb' });\n\texport const fileSubmodule = new Codicon('file-submodule', { fontCharacter: '\\\\eaec' });\n\texport const fileSymlinkDirectory = new Codicon('file-symlink-directory', { fontCharacter: '\\\\eaed' });\n\texport const fileSymlinkFile = new Codicon('file-symlink-file', { fontCharacter: '\\\\eaee' });\n\texport const fileZip = new Codicon('file-zip', { fontCharacter: '\\\\eaef' });\n\texport const files = new Codicon('files', { fontCharacter: '\\\\eaf0' });\n\texport const filter = new Codicon('filter', { fontCharacter: '\\\\eaf1' });\n\texport const flame = new Codicon('flame', { fontCharacter: '\\\\eaf2' });\n\texport const foldDown = new Codicon('fold-down', { fontCharacter: '\\\\eaf3' });\n\texport const foldUp = new Codicon('fold-up', { fontCharacter: '\\\\eaf4' });\n\texport const fold = new Codicon('fold', { fontCharacter: '\\\\eaf5' });\n\texport const folderActive = new Codicon('folder-active', { fontCharacter: '\\\\eaf6' });\n\texport const folderOpened = new Codicon('folder-opened', { fontCharacter: '\\\\eaf7' });\n\texport const gear = new Codicon('gear', { fontCharacter: '\\\\eaf8' });\n\texport const gift = new Codicon('gift', { fontCharacter: '\\\\eaf9' });\n\texport const gistSecret = new Codicon('gist-secret', { fontCharacter: '\\\\eafa' });\n\texport const gist = new Codicon('gist', { fontCharacter: '\\\\eafb' });\n\texport const gitCommit = new Codicon('git-commit', { fontCharacter: '\\\\eafc' });\n\texport const gitCompare = new Codicon('git-compare', { fontCharacter: '\\\\eafd' });\n\texport const gitMerge = new Codicon('git-merge', { fontCharacter: '\\\\eafe' });\n\texport const githubAction = new Codicon('github-action', { fontCharacter: '\\\\eaff' });\n\texport const githubAlt = new Codicon('github-alt', { fontCharacter: '\\\\eb00' });\n\texport const globe = new Codicon('globe', { fontCharacter: '\\\\eb01' });\n\texport const grabber = new Codicon('grabber', { fontCharacter: '\\\\eb02' });\n\texport const graph = new Codicon('graph', { fontCharacter: '\\\\eb03' });\n\texport const gripper = new Codicon('gripper', { fontCharacter: '\\\\eb04' });\n\texport const heart = new Codicon('heart', { fontCharacter: '\\\\eb05' });\n\texport const home = new Codicon('home', { fontCharacter: '\\\\eb06' });\n\texport const horizontalRule = new Codicon('horizontal-rule', { fontCharacter: '\\\\eb07' });\n\texport const hubot = new Codicon('hubot', { fontCharacter: '\\\\eb08' });\n\texport const inbox = new Codicon('inbox', { fontCharacter: '\\\\eb09' });\n\texport const issueClosed = new Codicon('issue-closed', { fontCharacter: '\\\\eba4' });\n\texport const issueReopened = new Codicon('issue-reopened', { fontCharacter: '\\\\eb0b' });\n\texport const issues = new Codicon('issues', { fontCharacter: '\\\\eb0c' });\n\texport const italic = new Codicon('italic', { fontCharacter: '\\\\eb0d' });\n\texport const jersey = new Codicon('jersey', { fontCharacter: '\\\\eb0e' });\n\texport const json = new Codicon('json', { fontCharacter: '\\\\eb0f' });\n\texport const kebabVertical = new Codicon('kebab-vertical', { fontCharacter: '\\\\eb10' });\n\texport const key = new Codicon('key', { fontCharacter: '\\\\eb11' });\n\texport const law = new Codicon('law', { fontCharacter: '\\\\eb12' });\n\texport const lightbulbAutofix = new Codicon('lightbulb-autofix', { fontCharacter: '\\\\eb13' });\n\texport const linkExternal = new Codicon('link-external', { fontCharacter: '\\\\eb14' });\n\texport const link = new Codicon('link', { fontCharacter: '\\\\eb15' });\n\texport const listOrdered = new Codicon('list-ordered', { fontCharacter: '\\\\eb16' });\n\texport const listUnordered = new Codicon('list-unordered', { fontCharacter: '\\\\eb17' });\n\texport const liveShare = new Codicon('live-share', { fontCharacter: '\\\\eb18' });\n\texport const loading = new Codicon('loading', { fontCharacter: '\\\\eb19' });\n\texport const location = new Codicon('location', { fontCharacter: '\\\\eb1a' });\n\texport const mailRead = new Codicon('mail-read', { fontCharacter: '\\\\eb1b' });\n\texport const mail = new Codicon('mail', { fontCharacter: '\\\\eb1c' });\n\texport const markdown = new Codicon('markdown', { fontCharacter: '\\\\eb1d' });\n\texport const megaphone = new Codicon('megaphone', { fontCharacter: '\\\\eb1e' });\n\texport const mention = new Codicon('mention', { fontCharacter: '\\\\eb1f' });\n\texport const milestone = new Codicon('milestone', { fontCharacter: '\\\\eb20' });\n\texport const mortarBoard = new Codicon('mortar-board', { fontCharacter: '\\\\eb21' });\n\texport const move = new Codicon('move', { fontCharacter: '\\\\eb22' });\n\texport const multipleWindows = new Codicon('multiple-windows', { fontCharacter: '\\\\eb23' });\n\texport const mute = new Codicon('mute', { fontCharacter: '\\\\eb24' });\n\texport const noNewline = new Codicon('no-newline', { fontCharacter: '\\\\eb25' });\n\texport const note = new Codicon('note', { fontCharacter: '\\\\eb26' });\n\texport const octoface = new Codicon('octoface', { fontCharacter: '\\\\eb27' });\n\texport const openPreview = new Codicon('open-preview', { fontCharacter: '\\\\eb28' });\n\texport const package_ = new Codicon('package', { fontCharacter: '\\\\eb29' });\n\texport const paintcan = new Codicon('paintcan', { fontCharacter: '\\\\eb2a' });\n\texport const pin = new Codicon('pin', { fontCharacter: '\\\\eb2b' });\n\texport const play = new Codicon('play', { fontCharacter: '\\\\eb2c' });\n\texport const run = new Codicon('run', { fontCharacter: '\\\\eb2c' });\n\texport const plug = new Codicon('plug', { fontCharacter: '\\\\eb2d' });\n\texport const preserveCase = new Codicon('preserve-case', { fontCharacter: '\\\\eb2e' });\n\texport const preview = new Codicon('preview', { fontCharacter: '\\\\eb2f' });\n\texport const project = new Codicon('project', { fontCharacter: '\\\\eb30' });\n\texport const pulse = new Codicon('pulse', { fontCharacter: '\\\\eb31' });\n\texport const question = new Codicon('question', { fontCharacter: '\\\\eb32' });\n\texport const quote = new Codicon('quote', { fontCharacter: '\\\\eb33' });\n\texport const radioTower = new Codicon('radio-tower', { fontCharacter: '\\\\eb34' });\n\texport const reactions = new Codicon('reactions', { fontCharacter: '\\\\eb35' });\n\texport const references = new Codicon('references', { fontCharacter: '\\\\eb36' });\n\texport const refresh = new Codicon('refresh', { fontCharacter: '\\\\eb37' });\n\texport const regex = new Codicon('regex', { fontCharacter: '\\\\eb38' });\n\texport const remoteExplorer = new Codicon('remote-explorer', { fontCharacter: '\\\\eb39' });\n\texport const remote = new Codicon('remote', { fontCharacter: '\\\\eb3a' });\n\texport const remove = new Codicon('remove', { fontCharacter: '\\\\eb3b' });\n\texport const replaceAll = new Codicon('replace-all', { fontCharacter: '\\\\eb3c' });\n\texport const replace = new Codicon('replace', { fontCharacter: '\\\\eb3d' });\n\texport const repoClone = new Codicon('repo-clone', { fontCharacter: '\\\\eb3e' });\n\texport const repoForcePush = new Codicon('repo-force-push', { fontCharacter: '\\\\eb3f' });\n\texport const repoPull = new Codicon('repo-pull', { fontCharacter: '\\\\eb40' });\n\texport const repoPush = new Codicon('repo-push', { fontCharacter: '\\\\eb41' });\n\texport const report = new Codicon('report', { fontCharacter: '\\\\eb42' });\n\texport const requestChanges = new Codicon('request-changes', { fontCharacter: '\\\\eb43' });\n\texport const rocket = new Codicon('rocket', { fontCharacter: '\\\\eb44' });\n\texport const rootFolderOpened = new Codicon('root-folder-opened', { fontCharacter: '\\\\eb45' });\n\texport const rootFolder = new Codicon('root-folder', { fontCharacter: '\\\\eb46' });\n\texport const rss = new Codicon('rss', { fontCharacter: '\\\\eb47' });\n\texport const ruby = new Codicon('ruby', { fontCharacter: '\\\\eb48' });\n\texport const saveAll = new Codicon('save-all', { fontCharacter: '\\\\eb49' });\n\texport const saveAs = new Codicon('save-as', { fontCharacter: '\\\\eb4a' });\n\texport const save = new Codicon('save', { fontCharacter: '\\\\eb4b' });\n\texport const screenFull = new Codicon('screen-full', { fontCharacter: '\\\\eb4c' });\n\texport const screenNormal = new Codicon('screen-normal', { fontCharacter: '\\\\eb4d' });\n\texport const searchStop = new Codicon('search-stop', { fontCharacter: '\\\\eb4e' });\n\texport const server = new Codicon('server', { fontCharacter: '\\\\eb50' });\n\texport const settingsGear = new Codicon('settings-gear', { fontCharacter: '\\\\eb51' });\n\texport const settings = new Codicon('settings', { fontCharacter: '\\\\eb52' });\n\texport const shield = new Codicon('shield', { fontCharacter: '\\\\eb53' });\n\texport const smiley = new Codicon('smiley', { fontCharacter: '\\\\eb54' });\n\texport const sortPrecedence = new Codicon('sort-precedence', { fontCharacter: '\\\\eb55' });\n\texport const splitHorizontal = new Codicon('split-horizontal', { fontCharacter: '\\\\eb56' });\n\texport const splitVertical = new Codicon('split-vertical', { fontCharacter: '\\\\eb57' });\n\texport const squirrel = new Codicon('squirrel', { fontCharacter: '\\\\eb58' });\n\texport const starFull = new Codicon('star-full', { fontCharacter: '\\\\eb59' });\n\texport const starHalf = new Codicon('star-half', { fontCharacter: '\\\\eb5a' });\n\texport const symbolClass = new Codicon('symbol-class', { fontCharacter: '\\\\eb5b' });\n\texport const symbolColor = new Codicon('symbol-color', { fontCharacter: '\\\\eb5c' });\n\texport const symbolConstant = new Codicon('symbol-constant', { fontCharacter: '\\\\eb5d' });\n\texport const symbolEnumMember = new Codicon('symbol-enum-member', { fontCharacter: '\\\\eb5e' });\n\texport const symbolField = new Codicon('symbol-field', { fontCharacter: '\\\\eb5f' });\n\texport const symbolFile = new Codicon('symbol-file', { fontCharacter: '\\\\eb60' });\n\texport const symbolInterface = new Codicon('symbol-interface', { fontCharacter: '\\\\eb61' });\n\texport const symbolKeyword = new Codicon('symbol-keyword', { fontCharacter: '\\\\eb62' });\n\texport const symbolMisc = new Codicon('symbol-misc', { fontCharacter: '\\\\eb63' });\n\texport const symbolOperator = new Codicon('symbol-operator', { fontCharacter: '\\\\eb64' });\n\texport const symbolProperty = new Codicon('symbol-property', { fontCharacter: '\\\\eb65' });\n\texport const wrench = new Codicon('wrench', { fontCharacter: '\\\\eb65' });\n\texport const wrenchSubaction = new Codicon('wrench-subaction', { fontCharacter: '\\\\eb65' });\n\texport const symbolSnippet = new Codicon('symbol-snippet', { fontCharacter: '\\\\eb66' });\n\texport const tasklist = new Codicon('tasklist', { fontCharacter: '\\\\eb67' });\n\texport const telescope = new Codicon('telescope', { fontCharacter: '\\\\eb68' });\n\texport const textSize = new Codicon('text-size', { fontCharacter: '\\\\eb69' });\n\texport const threeBars = new Codicon('three-bars', { fontCharacter: '\\\\eb6a' });\n\texport const thumbsdown = new Codicon('thumbsdown', { fontCharacter: '\\\\eb6b' });\n\texport const thumbsup = new Codicon('thumbsup', { fontCharacter: '\\\\eb6c' });\n\texport const tools = new Codicon('tools', { fontCharacter: '\\\\eb6d' });\n\texport const triangleDown = new Codicon('triangle-down', { fontCharacter: '\\\\eb6e' });\n\texport const triangleLeft = new Codicon('triangle-left', { fontCharacter: '\\\\eb6f' });\n\texport const triangleRight = new Codicon('triangle-right', { fontCharacter: '\\\\eb70' });\n\texport const triangleUp = new Codicon('triangle-up', { fontCharacter: '\\\\eb71' });\n\texport const twitter = new Codicon('twitter', { fontCharacter: '\\\\eb72' });\n\texport const unfold = new Codicon('unfold', { fontCharacter: '\\\\eb73' });\n\texport const unlock = new Codicon('unlock', { fontCharacter: '\\\\eb74' });\n\texport const unmute = new Codicon('unmute', { fontCharacter: '\\\\eb75' });\n\texport const unverified = new Codicon('unverified', { fontCharacter: '\\\\eb76' });\n\texport const verified = new Codicon('verified', { fontCharacter: '\\\\eb77' });\n\texport const versions = new Codicon('versions', { fontCharacter: '\\\\eb78' });\n\texport const vmActive = new Codicon('vm-active', { fontCharacter: '\\\\eb79' });\n\texport const vmOutline = new Codicon('vm-outline', { fontCharacter: '\\\\eb7a' });\n\texport const vmRunning = new Codicon('vm-running', { fontCharacter: '\\\\eb7b' });\n\texport const watch = new Codicon('watch', { fontCharacter: '\\\\eb7c' });\n\texport const whitespace = new Codicon('whitespace', { fontCharacter: '\\\\eb7d' });\n\texport const wholeWord = new Codicon('whole-word', { fontCharacter: '\\\\eb7e' });\n\texport const window = new Codicon('window', { fontCharacter: '\\\\eb7f' });\n\texport const wordWrap = new Codicon('word-wrap', { fontCharacter: '\\\\eb80' });\n\texport const zoomIn = new Codicon('zoom-in', { fontCharacter: '\\\\eb81' });\n\texport const zoomOut = new Codicon('zoom-out', { fontCharacter: '\\\\eb82' });\n\texport const listFilter = new Codicon('list-filter', { fontCharacter: '\\\\eb83' });\n\texport const listFlat = new Codicon('list-flat', { fontCharacter: '\\\\eb84' });\n\texport const listSelection = new Codicon('list-selection', { fontCharacter: '\\\\eb85' });\n\texport const selection = new Codicon('selection', { fontCharacter: '\\\\eb85' });\n\texport const listTree = new Codicon('list-tree', { fontCharacter: '\\\\eb86' });\n\texport const debugBreakpointFunctionUnverified = new Codicon('debug-breakpoint-function-unverified', { fontCharacter: '\\\\eb87' });\n\texport const debugBreakpointFunction = new Codicon('debug-breakpoint-function', { fontCharacter: '\\\\eb88' });\n\texport const debugBreakpointFunctionDisabled = new Codicon('debug-breakpoint-function-disabled', { fontCharacter: '\\\\eb88' });\n\texport const debugStackframeActive = new Codicon('debug-stackframe-active', { fontCharacter: '\\\\eb89' });\n\texport const debugStackframeDot = new Codicon('debug-stackframe-dot', { fontCharacter: '\\\\eb8a' });\n\texport const debugStackframe = new Codicon('debug-stackframe', { fontCharacter: '\\\\eb8b' });\n\texport const debugStackframeFocused = new Codicon('debug-stackframe-focused', { fontCharacter: '\\\\eb8b' });\n\texport const debugBreakpointUnsupported = new Codicon('debug-breakpoint-unsupported', { fontCharacter: '\\\\eb8c' });\n\texport const symbolString = new Codicon('symbol-string', { fontCharacter: '\\\\eb8d' });\n\texport const debugReverseContinue = new Codicon('debug-reverse-continue', { fontCharacter: '\\\\eb8e' });\n\texport const debugStepBack = new Codicon('debug-step-back', { fontCharacter: '\\\\eb8f' });\n\texport const debugRestartFrame = new Codicon('debug-restart-frame', { fontCharacter: '\\\\eb90' });\n\texport const callIncoming = new Codicon('call-incoming', { fontCharacter: '\\\\eb92' });\n\texport const callOutgoing = new Codicon('call-outgoing', { fontCharacter: '\\\\eb93' });\n\texport const menu = new Codicon('menu', { fontCharacter: '\\\\eb94' });\n\texport const expandAll = new Codicon('expand-all', { fontCharacter: '\\\\eb95' });\n\texport const feedback = new Codicon('feedback', { fontCharacter: '\\\\eb96' });\n\texport const groupByRefType = new Codicon('group-by-ref-type', { fontCharacter: '\\\\eb97' });\n\texport const ungroupByRefType = new Codicon('ungroup-by-ref-type', { fontCharacter: '\\\\eb98' });\n\texport const account = new Codicon('account', { fontCharacter: '\\\\eb99' });\n\texport const bellDot = new Codicon('bell-dot', { fontCharacter: '\\\\eb9a' });\n\texport const debugConsole = new Codicon('debug-console', { fontCharacter: '\\\\eb9b' });\n\texport const library = new Codicon('library', { fontCharacter: '\\\\eb9c' });\n\texport const output = new Codicon('output', { fontCharacter: '\\\\eb9d' });\n\texport const runAll = new Codicon('run-all', { fontCharacter: '\\\\eb9e' });\n\texport const syncIgnored = new Codicon('sync-ignored', { fontCharacter: '\\\\eb9f' });\n\texport const pinned = new Codicon('pinned', { fontCharacter: '\\\\eba0' });\n\texport const githubInverted = new Codicon('github-inverted', { fontCharacter: '\\\\eba1' });\n\texport const debugAlt = new Codicon('debug-alt', { fontCharacter: '\\\\eb91' });\n\texport const serverProcess = new Codicon('server-process', { fontCharacter: '\\\\eba2' });\n\texport const serverEnvironment = new Codicon('server-environment', { fontCharacter: '\\\\eba3' });\n\texport const pass = new Codicon('pass', { fontCharacter: '\\\\eba4' });\n\texport const stopCircle = new Codicon('stop-circle', { fontCharacter: '\\\\eba5' });\n\texport const playCircle = new Codicon('play-circle', { fontCharacter: '\\\\eba6' });\n\texport const record = new Codicon('record', { fontCharacter: '\\\\eba7' });\n\texport const debugAltSmall = new Codicon('debug-alt-small', { fontCharacter: '\\\\eba8' });\n\texport const vmConnect = new Codicon('vm-connect', { fontCharacter: '\\\\eba9' });\n\texport const cloud = new Codicon('cloud', { fontCharacter: '\\\\ebaa' });\n\texport const merge = new Codicon('merge', { fontCharacter: '\\\\ebab' });\n\texport const exportIcon = new Codicon('export', { fontCharacter: '\\\\ebac' });\n\texport const graphLeft = new Codicon('graph-left', { fontCharacter: '\\\\ebad' });\n\texport const magnet = new Codicon('magnet', { fontCharacter: '\\\\ebae' });\n\texport const notebook = new Codicon('notebook', { fontCharacter: '\\\\ebaf' });\n\texport const redo = new Codicon('redo', { fontCharacter: '\\\\ebb0' });\n\texport const checkAll = new Codicon('check-all', { fontCharacter: '\\\\ebb1' });\n\texport const pinnedDirty = new Codicon('pinned-dirty', { fontCharacter: '\\\\ebb2' });\n\texport const passFilled = new Codicon('pass-filled', { fontCharacter: '\\\\ebb3' });\n\texport const circleLargeFilled = new Codicon('circle-large-filled', { fontCharacter: '\\\\ebb4' });\n\texport const circleLargeOutline = new Codicon('circle-large-outline', { fontCharacter: '\\\\ebb5' });\n\texport const combine = new Codicon('combine', { fontCharacter: '\\\\ebb6' });\n\texport const gather = new Codicon('gather', { fontCharacter: '\\\\ebb6' });\n\texport const table = new Codicon('table', { fontCharacter: '\\\\ebb7' });\n\texport const variableGroup = new Codicon('variable-group', { fontCharacter: '\\\\ebb8' });\n\texport const typeHierarchy = new Codicon('type-hierarchy', { fontCharacter: '\\\\ebb9' });\n\texport const typeHierarchySub = new Codicon('type-hierarchy-sub', { fontCharacter: '\\\\ebba' });\n\texport const typeHierarchySuper = new Codicon('type-hierarchy-super', { fontCharacter: '\\\\ebbb' });\n\texport const gitPullRequestCreate = new Codicon('git-pull-request-create', { fontCharacter: '\\\\ebbc' });\n\texport const runAbove = new Codicon('run-above', { fontCharacter: '\\\\ebbd' });\n\texport const runBelow = new Codicon('run-below', { fontCharacter: '\\\\ebbe' });\n\texport const notebookTemplate = new Codicon('notebook-template', { fontCharacter: '\\\\ebbf' });\n\texport const debugRerun = new Codicon('debug-rerun', { fontCharacter: '\\\\ebc0' });\n\texport const workspaceTrusted = new Codicon('workspace-trusted', { fontCharacter: '\\\\ebc1' });\n\texport const workspaceUntrusted = new Codicon('workspace-untrusted', { fontCharacter: '\\\\ebc2' });\n\texport const workspaceUnspecified = new Codicon('workspace-unspecified', { fontCharacter: '\\\\ebc3' });\n\texport const terminalCmd = new Codicon('terminal-cmd', { fontCharacter: '\\\\ebc4' });\n\texport const terminalDebian = new Codicon('terminal-debian', { fontCharacter: '\\\\ebc5' });\n\texport const terminalLinux = new Codicon('terminal-linux', { fontCharacter: '\\\\ebc6' });\n\texport const terminalPowershell = new Codicon('terminal-powershell', { fontCharacter: '\\\\ebc7' });\n\texport const terminalTmux = new Codicon('terminal-tmux', { fontCharacter: '\\\\ebc8' });\n\texport const terminalUbuntu = new Codicon('terminal-ubuntu', { fontCharacter: '\\\\ebc9' });\n\texport const terminalBash = new Codicon('terminal-bash', { fontCharacter: '\\\\ebca' });\n\texport const arrowSwap = new Codicon('arrow-swap', { fontCharacter: '\\\\ebcb' });\n\texport const copy = new Codicon('copy', { fontCharacter: '\\\\ebcc' });\n\texport const personAdd = new Codicon('person-add', { fontCharacter: '\\\\ebcd' });\n\texport const filterFilled = new Codicon('filter-filled', { fontCharacter: '\\\\ebce' });\n\texport const wand = new Codicon('wand', { fontCharacter: '\\\\ebcf' });\n\texport const debugLineByLine = new Codicon('debug-line-by-line', { fontCharacter: '\\\\ebd0' });\n\texport const inspect = new Codicon('inspect', { fontCharacter: '\\\\ebd1' });\n\texport const layers = new Codicon('layers', { fontCharacter: '\\\\ebd2' });\n\texport const layersDot = new Codicon('layers-dot', { fontCharacter: '\\\\ebd3' });\n\texport const layersActive = new Codicon('layers-active', { fontCharacter: '\\\\ebd4' });\n\texport const compass = new Codicon('compass', { fontCharacter: '\\\\ebd5' });\n\texport const compassDot = new Codicon('compass-dot', { fontCharacter: '\\\\ebd6' });\n\texport const compassActive = new Codicon('compass-active', { fontCharacter: '\\\\ebd7' });\n\texport const azure = new Codicon('azure', { fontCharacter: '\\\\ebd8' });\n\texport const issueDraft = new Codicon('issue-draft', { fontCharacter: '\\\\ebd9' });\n\texport const gitPullRequestClosed = new Codicon('git-pull-request-closed', { fontCharacter: '\\\\ebda' });\n\texport const gitPullRequestDraft = new Codicon('git-pull-request-draft', { fontCharacter: '\\\\ebdb' });\n\texport const debugAll = new Codicon('debug-all', { fontCharacter: '\\\\ebdc' });\n\texport const debugCoverage = new Codicon('debug-coverage', { fontCharacter: '\\\\ebdd' });\n\texport const runErrors = new Codicon('run-errors', { fontCharacter: '\\\\ebde' });\n\texport const folderLibrary = new Codicon('folder-library', { fontCharacter: '\\\\ebdf' });\n\n\texport const dropDownButton = new Codicon('drop-down-button', Codicon.chevronDown.definition);\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\n\n/**\n * The payload that flows in readable stream events.\n */\nexport type ReadableStreamEventPayload<T> = T | Error | 'end';\n\nexport interface ReadableStreamEvents<T> {\n\n\t/**\n\t * The 'data' event is emitted whenever the stream is\n\t * relinquishing ownership of a chunk of data to a consumer.\n\t *\n\t * NOTE: PLEASE UNDERSTAND THAT ADDING A DATA LISTENER CAN\n\t * TURN THE STREAM INTO FLOWING MODE. IT IS THEREFOR THE\n\t * LAST LISTENER THAT SHOULD BE ADDED AND NOT THE FIRST\n\t *\n\t * Use `listenStream` as a helper method to listen to\n\t * stream events in the right order.\n\t */\n\ton(event: 'data', callback: (data: T) => void): void;\n\n\t/**\n\t * Emitted when any error occurs.\n\t */\n\ton(event: 'error', callback: (err: Error) => void): void;\n\n\t/**\n\t * The 'end' event is emitted when there is no more data\n\t * to be consumed from the stream. The 'end' event will\n\t * not be emitted unless the data is completely consumed.\n\t */\n\ton(event: 'end', callback: () => void): void;\n}\n\n/**\n * A interface that emulates the API shape of a node.js readable\n * stream for use in native and web environments.\n */\nexport interface ReadableStream<T> extends ReadableStreamEvents<T> {\n\n\t/**\n\t * Stops emitting any events until resume() is called.\n\t */\n\tpause(): void;\n\n\t/**\n\t * Starts emitting events again after pause() was called.\n\t */\n\tresume(): void;\n\n\t/**\n\t * Destroys the stream and stops emitting any event.\n\t */\n\tdestroy(): void;\n\n\t/**\n\t * Allows to remove a listener that was previously added.\n\t */\n\tremoveListener(event: string, callback: Function): void;\n}\n\n/**\n * A interface that emulates the API shape of a node.js readable\n * for use in native and web environments.\n */\nexport interface Readable<T> {\n\n\t/**\n\t * Read data from the underlying source. Will return\n\t * null to indicate that no more data can be read.\n\t */\n\tread(): T | null;\n}\n\n/**\n * A interface that emulates the API shape of a node.js writeable\n * stream for use in native and web environments.\n */\nexport interface WriteableStream<T> extends ReadableStream<T> {\n\n\t/**\n\t * Writing data to the stream will trigger the on('data')\n\t * event listener if the stream is flowing and buffer the\n\t * data otherwise until the stream is flowing.\n\t *\n\t * If a `highWaterMark` is configured and writing to the\n\t * stream reaches this mark, a promise will be returned\n\t * that should be awaited on before writing more data.\n\t * Otherwise there is a risk of buffering a large number\n\t * of data chunks without consumer.\n\t */\n\twrite(data: T): void | Promise<void>;\n\n\t/**\n\t * Signals an error to the consumer of the stream via the\n\t * on('error') handler if the stream is flowing.\n\t *\n\t * NOTE: call `end` to signal that the stream has ended,\n\t * this DOES NOT happen automatically from `error`.\n\t */\n\terror(error: Error): void;\n\n\t/**\n\t * Signals the end of the stream to the consumer. If the\n\t * result is provided, will trigger the on('data') event\n\t * listener if the stream is flowing and buffer the data\n\t * otherwise until the stream is flowing.\n\t */\n\tend(result?: T): void;\n}\n\n/**\n * A stream that has a buffer already read. Returns the original stream\n * that was read as well as the chunks that got read.\n *\n * The `ended` flag indicates if the stream has been fully consumed.\n */\nexport interface ReadableBufferedStream<T> {\n\n\t/**\n\t * The original stream that is being read.\n\t */\n\tstream: ReadableStream<T>;\n\n\t/**\n\t * An array of chunks already read from this stream.\n\t */\n\tbuffer: T[];\n\n\t/**\n\t * Signals if the stream has ended or not. If not, consumers\n\t * should continue to read from the stream until consumed.\n\t */\n\tended: boolean;\n}\n\nexport function isReadableStream<T>(obj: unknown): obj is ReadableStream<T> {\n\tconst candidate = obj as ReadableStream<T> | undefined;\n\tif (!candidate) {\n\t\treturn false;\n\t}\n\n\treturn [candidate.on, candidate.pause, candidate.resume, candidate.destroy].every(fn => typeof fn === 'function');\n}\n\nexport function isReadableBufferedStream<T>(obj: unknown): obj is ReadableBufferedStream<T> {\n\tconst candidate = obj as ReadableBufferedStream<T> | undefined;\n\tif (!candidate) {\n\t\treturn false;\n\t}\n\n\treturn isReadableStream(candidate.stream) && Array.isArray(candidate.buffer) && typeof candidate.ended === 'boolean';\n}\n\nexport interface IReducer<T> {\n\t(data: T[]): T;\n}\n\nexport interface IDataTransformer<Original, Transformed> {\n\t(data: Original): Transformed;\n}\n\nexport interface IErrorTransformer {\n\t(error: Error): Error;\n}\n\nexport interface ITransformer<Original, Transformed> {\n\tdata: IDataTransformer<Original, Transformed>;\n\terror?: IErrorTransformer;\n}\n\nexport function newWriteableStream<T>(reducer: IReducer<T>, options?: WriteableStreamOptions): WriteableStream<T> {\n\treturn new WriteableStreamImpl<T>(reducer, options);\n}\n\nexport interface WriteableStreamOptions {\n\n\t/**\n\t * The number of objects to buffer before WriteableStream#write()\n\t * signals back that the buffer is full. Can be used to reduce\n\t * the memory pressure when the stream is not flowing.\n\t */\n\thighWaterMark?: number;\n}\n\nclass WriteableStreamImpl<T> implements WriteableStream<T> {\n\n\tprivate readonly state = {\n\t\tflowing: false,\n\t\tended: false,\n\t\tdestroyed: false\n\t};\n\n\tprivate readonly buffer = {\n\t\tdata: [] as T[],\n\t\terror: [] as Error[]\n\t};\n\n\tprivate readonly listeners = {\n\t\tdata: [] as { (data: T): void }[],\n\t\terror: [] as { (error: Error): void }[],\n\t\tend: [] as { (): void }[]\n\t};\n\n\tprivate readonly pendingWritePromises: Function[] = [];\n\n\tconstructor(private reducer: IReducer<T>, private options?: WriteableStreamOptions) { }\n\n\tpause(): void {\n\t\tif (this.state.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state.flowing = false;\n\t}\n\n\tresume(): void {\n\t\tif (this.state.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.state.flowing) {\n\t\t\tthis.state.flowing = true;\n\n\t\t\t// emit buffered events\n\t\t\tthis.flowData();\n\t\t\tthis.flowErrors();\n\t\t\tthis.flowEnd();\n\t\t}\n\t}\n\n\twrite(data: T): void | Promise<void> {\n\t\tif (this.state.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\t// flowing: directly send the data to listeners\n\t\tif (this.state.flowing) {\n\t\t\tthis.emitData(data);\n\t\t}\n\n\t\t// not yet flowing: buffer data until flowing\n\t\telse {\n\t\t\tthis.buffer.data.push(data);\n\n\t\t\t// highWaterMark: if configured, signal back when buffer reached limits\n\t\t\tif (typeof this.options?.highWaterMark === 'number' && this.buffer.data.length > this.options.highWaterMark) {\n\t\t\t\treturn new Promise(resolve => this.pendingWritePromises.push(resolve));\n\t\t\t}\n\t\t}\n\t}\n\n\terror(error: Error): void {\n\t\tif (this.state.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\t// flowing: directly send the error to listeners\n\t\tif (this.state.flowing) {\n\t\t\tthis.emitError(error);\n\t\t}\n\n\t\t// not yet flowing: buffer errors until flowing\n\t\telse {\n\t\t\tthis.buffer.error.push(error);\n\t\t}\n\t}\n\n\tend(result?: T): void {\n\t\tif (this.state.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\t// end with data if provided\n\t\tif (typeof result !== 'undefined') {\n\t\t\tthis.write(result);\n\t\t}\n\n\t\t// flowing: send end event to listeners\n\t\tif (this.state.flowing) {\n\t\t\tthis.emitEnd();\n\n\t\t\tthis.destroy();\n\t\t}\n\n\t\t// not yet flowing: remember state\n\t\telse {\n\t\t\tthis.state.ended = true;\n\t\t}\n\t}\n\n\tprivate emitData(data: T): void {\n\t\tthis.listeners.data.slice(0).forEach(listener => listener(data)); // slice to avoid listener mutation from delivering event\n\t}\n\n\tprivate emitError(error: Error): void {\n\t\tif (this.listeners.error.length === 0) {\n\t\t\tonUnexpectedError(error); // nobody listened to this error so we log it as unexpected\n\t\t} else {\n\t\t\tthis.listeners.error.slice(0).forEach(listener => listener(error)); // slice to avoid listener mutation from delivering event\n\t\t}\n\t}\n\n\tprivate emitEnd(): void {\n\t\tthis.listeners.end.slice(0).forEach(listener => listener()); // slice to avoid listener mutation from delivering event\n\t}\n\n\ton(event: 'data', callback: (data: T) => void): void;\n\ton(event: 'error', callback: (err: Error) => void): void;\n\ton(event: 'end', callback: () => void): void;\n\ton(event: 'data' | 'error' | 'end', callback: (arg0?: any) => void): void {\n\t\tif (this.state.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (event) {\n\t\t\tcase 'data':\n\t\t\t\tthis.listeners.data.push(callback);\n\n\t\t\t\t// switch into flowing mode as soon as the first 'data'\n\t\t\t\t// listener is added and we are not yet in flowing mode\n\t\t\t\tthis.resume();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'end':\n\t\t\t\tthis.listeners.end.push(callback);\n\n\t\t\t\t// emit 'end' event directly if we are flowing\n\t\t\t\t// and the end has already been reached\n\t\t\t\t//\n\t\t\t\t// finish() when it went through\n\t\t\t\tif (this.state.flowing && this.flowEnd()) {\n\t\t\t\t\tthis.destroy();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'error':\n\t\t\t\tthis.listeners.error.push(callback);\n\n\t\t\t\t// emit buffered 'error' events unless done already\n\t\t\t\t// now that we know that we have at least one listener\n\t\t\t\tif (this.state.flowing) {\n\t\t\t\t\tthis.flowErrors();\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tremoveListener(event: string, callback: Function): void {\n\t\tif (this.state.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet listeners: unknown[] | undefined = undefined;\n\n\t\tswitch (event) {\n\t\t\tcase 'data':\n\t\t\t\tlisteners = this.listeners.data;\n\t\t\t\tbreak;\n\n\t\t\tcase 'end':\n\t\t\t\tlisteners = this.listeners.end;\n\t\t\t\tbreak;\n\n\t\t\tcase 'error':\n\t\t\t\tlisteners = this.listeners.error;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (listeners) {\n\t\t\tconst index = listeners.indexOf(callback);\n\t\t\tif (index >= 0) {\n\t\t\t\tlisteners.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate flowData(): void {\n\t\tif (this.buffer.data.length > 0) {\n\t\t\tconst fullDataBuffer = this.reducer(this.buffer.data);\n\n\t\t\tthis.emitData(fullDataBuffer);\n\n\t\t\tthis.buffer.data.length = 0;\n\n\t\t\t// When the buffer is empty, resolve all pending writers\n\t\t\tconst pendingWritePromises = [...this.pendingWritePromises];\n\t\t\tthis.pendingWritePromises.length = 0;\n\t\t\tpendingWritePromises.forEach(pendingWritePromise => pendingWritePromise());\n\t\t}\n\t}\n\n\tprivate flowErrors(): void {\n\t\tif (this.listeners.error.length > 0) {\n\t\t\tfor (const error of this.buffer.error) {\n\t\t\t\tthis.emitError(error);\n\t\t\t}\n\n\t\t\tthis.buffer.error.length = 0;\n\t\t}\n\t}\n\n\tprivate flowEnd(): boolean {\n\t\tif (this.state.ended) {\n\t\t\tthis.emitEnd();\n\n\t\t\treturn this.listeners.end.length > 0;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tdestroy(): void {\n\t\tif (!this.state.destroyed) {\n\t\t\tthis.state.destroyed = true;\n\t\t\tthis.state.ended = true;\n\n\t\t\tthis.buffer.data.length = 0;\n\t\t\tthis.buffer.error.length = 0;\n\n\t\t\tthis.listeners.data.length = 0;\n\t\t\tthis.listeners.error.length = 0;\n\t\t\tthis.listeners.end.length = 0;\n\n\t\t\tthis.pendingWritePromises.length = 0;\n\t\t}\n\t}\n}\n\n/**\n * Helper to fully read a T readable into a T.\n */\nexport function consumeReadable<T>(readable: Readable<T>, reducer: IReducer<T>): T {\n\tconst chunks: T[] = [];\n\n\tlet chunk: T | null;\n\twhile ((chunk = readable.read()) !== null) {\n\t\tchunks.push(chunk);\n\t}\n\n\treturn reducer(chunks);\n}\n\n/**\n * Helper to read a T readable up to a maximum of chunks. If the limit is\n * reached, will return a readable instead to ensure all data can still\n * be read.\n */\nexport function peekReadable<T>(readable: Readable<T>, reducer: IReducer<T>, maxChunks: number): T | Readable<T> {\n\tconst chunks: T[] = [];\n\n\tlet chunk: T | null | undefined = undefined;\n\twhile ((chunk = readable.read()) !== null && chunks.length < maxChunks) {\n\t\tchunks.push(chunk);\n\t}\n\n\t// If the last chunk is null, it means we reached the end of\n\t// the readable and return all the data at once\n\tif (chunk === null && chunks.length > 0) {\n\t\treturn reducer(chunks);\n\t}\n\n\t// Otherwise, we still have a chunk, it means we reached the maxChunks\n\t// value and as such we return a new Readable that first returns\n\t// the existing read chunks and then continues with reading from\n\t// the underlying readable.\n\treturn {\n\t\tread: () => {\n\n\t\t\t// First consume chunks from our array\n\t\t\tif (chunks.length > 0) {\n\t\t\t\treturn chunks.shift()!;\n\t\t\t}\n\n\t\t\t// Then ensure to return our last read chunk\n\t\t\tif (typeof chunk !== 'undefined') {\n\t\t\t\tconst lastReadChunk = chunk;\n\n\t\t\t\t// explicitly use undefined here to indicate that we consumed\n\t\t\t\t// the chunk, which could have either been null or valued.\n\t\t\t\tchunk = undefined;\n\n\t\t\t\treturn lastReadChunk;\n\t\t\t}\n\n\t\t\t// Finally delegate back to the Readable\n\t\t\treturn readable.read();\n\t\t}\n\t};\n}\n\n/**\n * Helper to fully read a T stream into a T or consuming\n * a stream fully, awaiting all the events without caring\n * about the data.\n */\nexport function consumeStream<T>(stream: ReadableStreamEvents<T>, reducer: IReducer<T>): Promise<T>;\nexport function consumeStream(stream: ReadableStreamEvents<unknown>): Promise<undefined>;\nexport function consumeStream<T>(stream: ReadableStreamEvents<T>, reducer?: IReducer<T>): Promise<T | undefined> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst chunks: T[] = [];\n\n\t\tlistenStream(stream, {\n\t\t\tonData: chunk => {\n\t\t\t\tif (reducer) {\n\t\t\t\t\tchunks.push(chunk);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: error => {\n\t\t\t\tif (reducer) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonEnd: () => {\n\t\t\t\tif (reducer) {\n\t\t\t\t\tresolve(reducer(chunks));\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\nexport interface IStreamListener<T> {\n\n\t/**\n\t * The 'data' event is emitted whenever the stream is\n\t * relinquishing ownership of a chunk of data to a consumer.\n\t */\n\tonData(data: T): void;\n\n\t/**\n\t * Emitted when any error occurs.\n\t */\n\tonError(err: Error): void;\n\n\t/**\n\t * The 'end' event is emitted when there is no more data\n\t * to be consumed from the stream. The 'end' event will\n\t * not be emitted unless the data is completely consumed.\n\t */\n\tonEnd(): void;\n}\n\n/**\n * Helper to listen to all events of a T stream in proper order.\n */\nexport function listenStream<T>(stream: ReadableStreamEvents<T>, listener: IStreamListener<T>): void {\n\tstream.on('error', error => listener.onError(error));\n\tstream.on('end', () => listener.onEnd());\n\n\t// Adding the `data` listener will turn the stream\n\t// into flowing mode. As such it is important to\n\t// add this listener last (DO NOT CHANGE!)\n\tstream.on('data', data => listener.onData(data));\n}\n\n/**\n * Helper to peek up to `maxChunks` into a stream. The return type signals if\n * the stream has ended or not. If not, caller needs to add a `data` listener\n * to continue reading.\n */\nexport function peekStream<T>(stream: ReadableStream<T>, maxChunks: number): Promise<ReadableBufferedStream<T>> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst streamListeners = new DisposableStore();\n\t\tconst buffer: T[] = [];\n\n\t\t// Data Listener\n\t\tconst dataListener = (chunk: T) => {\n\n\t\t\t// Add to buffer\n\t\t\tbuffer.push(chunk);\n\n\t\t\t// We reached maxChunks and thus need to return\n\t\t\tif (buffer.length > maxChunks) {\n\n\t\t\t\t// Dispose any listeners and ensure to pause the\n\t\t\t\t// stream so that it can be consumed again by caller\n\t\t\t\tstreamListeners.dispose();\n\t\t\t\tstream.pause();\n\n\t\t\t\treturn resolve({ stream, buffer, ended: false });\n\t\t\t}\n\t\t};\n\n\t\t// Error Listener\n\t\tconst errorListener = (error: Error) => {\n\t\t\treturn reject(error);\n\t\t};\n\n\t\t// End Listener\n\t\tconst endListener = () => {\n\t\t\treturn resolve({ stream, buffer, ended: true });\n\t\t};\n\n\t\tstreamListeners.add(toDisposable(() => stream.removeListener('error', errorListener)));\n\t\tstream.on('error', errorListener);\n\n\t\tstreamListeners.add(toDisposable(() => stream.removeListener('end', endListener)));\n\t\tstream.on('end', endListener);\n\n\t\t// Important: leave the `data` listener last because\n\t\t// this can turn the stream into flowing mode and we\n\t\t// want `error` events to be received as well.\n\t\tstreamListeners.add(toDisposable(() => stream.removeListener('data', dataListener)));\n\t\tstream.on('data', dataListener);\n\t});\n}\n\n/**\n * Helper to create a readable stream from an existing T.\n */\nexport function toStream<T>(t: T, reducer: IReducer<T>): ReadableStream<T> {\n\tconst stream = newWriteableStream<T>(reducer);\n\n\tstream.end(t);\n\n\treturn stream;\n}\n\n/**\n * Helper to create an empty stream\n */\nexport function emptyStream(): ReadableStream<never> {\n\tconst stream = newWriteableStream<never>(() => { throw new Error('not supported'); });\n\tstream.end();\n\n\treturn stream;\n}\n\n/**\n * Helper to convert a T into a Readable<T>.\n */\nexport function toReadable<T>(t: T): Readable<T> {\n\tlet consumed = false;\n\n\treturn {\n\t\tread: () => {\n\t\t\tif (consumed) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconsumed = true;\n\n\t\t\treturn t;\n\t\t}\n\t};\n}\n\n/**\n * Helper to transform a readable stream into another stream.\n */\nexport function transform<Original, Transformed>(stream: ReadableStreamEvents<Original>, transformer: ITransformer<Original, Transformed>, reducer: IReducer<Transformed>): ReadableStream<Transformed> {\n\tconst target = newWriteableStream<Transformed>(reducer);\n\n\tlistenStream(stream, {\n\t\tonData: data => target.write(transformer.data(data)),\n\t\tonError: error => target.error(transformer.error ? transformer.error(error) : error),\n\t\tonEnd: () => target.end()\n\t});\n\n\treturn target;\n}\n\n/**\n * Helper to take an existing readable that will\n * have a prefix injected to the beginning.\n */\nexport function prefixedReadable<T>(prefix: T, readable: Readable<T>, reducer: IReducer<T>): Readable<T> {\n\tlet prefixHandled = false;\n\n\treturn {\n\t\tread: () => {\n\t\t\tconst chunk = readable.read();\n\n\t\t\t// Handle prefix only once\n\t\t\tif (!prefixHandled) {\n\t\t\t\tprefixHandled = true;\n\n\t\t\t\t// If we have also a read-result, make\n\t\t\t\t// sure to reduce it to a single result\n\t\t\t\tif (chunk !== null) {\n\t\t\t\t\treturn reducer([prefix, chunk]);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, just return prefix directly\n\t\t\t\treturn prefix;\n\t\t\t}\n\n\t\t\treturn chunk;\n\t\t}\n\t};\n}\n\n/**\n * Helper to take an existing stream that will\n * have a prefix injected to the beginning.\n */\nexport function prefixedStream<T>(prefix: T, stream: ReadableStream<T>, reducer: IReducer<T>): ReadableStream<T> {\n\tlet prefixHandled = false;\n\n\tconst target = newWriteableStream<T>(reducer);\n\n\tlistenStream(stream, {\n\t\tonData: data => {\n\n\t\t\t// Handle prefix only once\n\t\t\tif (!prefixHandled) {\n\t\t\t\tprefixHandled = true;\n\n\t\t\t\treturn target.write(reducer([prefix, data]));\n\t\t\t}\n\n\t\t\treturn target.write(data);\n\t\t},\n\t\tonError: error => target.error(error),\n\t\tonEnd: () => {\n\n\t\t\t// Handle prefix only once\n\t\t\tif (!prefixHandled) {\n\t\t\t\tprefixHandled = true;\n\n\t\t\t\ttarget.write(prefix);\n\t\t\t}\n\n\t\t\ttarget.end();\n\t\t}\n\t});\n\n\treturn target;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as streams from 'vs/base/common/stream';\n\ndeclare const Buffer: any;\n\nconst hasBuffer = (typeof Buffer !== 'undefined');\n\nlet textEncoder: TextEncoder | null;\nlet textDecoder: TextDecoder | null;\n\nexport class VSBuffer {\n\n\tstatic alloc(byteLength: number): VSBuffer {\n\t\tif (hasBuffer) {\n\t\t\treturn new VSBuffer(Buffer.allocUnsafe(byteLength));\n\t\t} else {\n\t\t\treturn new VSBuffer(new Uint8Array(byteLength));\n\t\t}\n\t}\n\n\tstatic wrap(actual: Uint8Array): VSBuffer {\n\t\tif (hasBuffer && !(Buffer.isBuffer(actual))) {\n\t\t\t// https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\n\t\t\t// Create a zero-copy Buffer wrapper around the ArrayBuffer pointed to by the Uint8Array\n\t\t\tactual = Buffer.from(actual.buffer, actual.byteOffset, actual.byteLength);\n\t\t}\n\t\treturn new VSBuffer(actual);\n\t}\n\n\tstatic fromString(source: string, options?: { dontUseNodeBuffer?: boolean; }): VSBuffer {\n\t\tconst dontUseNodeBuffer = options?.dontUseNodeBuffer || false;\n\t\tif (!dontUseNodeBuffer && hasBuffer) {\n\t\t\treturn new VSBuffer(Buffer.from(source));\n\t\t} else {\n\t\t\tif (!textEncoder) {\n\t\t\t\ttextEncoder = new TextEncoder();\n\t\t\t}\n\t\t\treturn new VSBuffer(textEncoder.encode(source));\n\t\t}\n\t}\n\n\tstatic concat(buffers: VSBuffer[], totalLength?: number): VSBuffer {\n\t\tif (typeof totalLength === 'undefined') {\n\t\t\ttotalLength = 0;\n\t\t\tfor (let i = 0, len = buffers.length; i < len; i++) {\n\t\t\t\ttotalLength += buffers[i].byteLength;\n\t\t\t}\n\t\t}\n\n\t\tconst ret = VSBuffer.alloc(totalLength);\n\t\tlet offset = 0;\n\t\tfor (let i = 0, len = buffers.length; i < len; i++) {\n\t\t\tconst element = buffers[i];\n\t\t\tret.set(element, offset);\n\t\t\toffset += element.byteLength;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\treadonly buffer: Uint8Array;\n\treadonly byteLength: number;\n\n\tprivate constructor(buffer: Uint8Array) {\n\t\tthis.buffer = buffer;\n\t\tthis.byteLength = this.buffer.byteLength;\n\t}\n\n\ttoString(): string {\n\t\tif (hasBuffer) {\n\t\t\treturn this.buffer.toString();\n\t\t} else {\n\t\t\tif (!textDecoder) {\n\t\t\t\ttextDecoder = new TextDecoder();\n\t\t\t}\n\t\t\treturn textDecoder.decode(this.buffer);\n\t\t}\n\t}\n\n\tslice(start?: number, end?: number): VSBuffer {\n\t\t// IMPORTANT: use subarray instead of slice because TypedArray#slice\n\t\t// creates shallow copy and NodeBuffer#slice doesn't. The use of subarray\n\t\t// ensures the same, performance, behaviour.\n\t\treturn new VSBuffer(this.buffer.subarray(start, end));\n\t}\n\n\tset(array: VSBuffer, offset?: number): void;\n\tset(array: Uint8Array, offset?: number): void;\n\tset(array: VSBuffer | Uint8Array, offset?: number): void {\n\t\tif (array instanceof VSBuffer) {\n\t\t\tthis.buffer.set(array.buffer, offset);\n\t\t} else {\n\t\t\tthis.buffer.set(array, offset);\n\t\t}\n\t}\n\n\treadUInt32BE(offset: number): number {\n\t\treturn readUInt32BE(this.buffer, offset);\n\t}\n\n\twriteUInt32BE(value: number, offset: number): void {\n\t\twriteUInt32BE(this.buffer, value, offset);\n\t}\n\n\treadUInt32LE(offset: number): number {\n\t\treturn readUInt32LE(this.buffer, offset);\n\t}\n\n\twriteUInt32LE(value: number, offset: number): void {\n\t\twriteUInt32LE(this.buffer, value, offset);\n\t}\n\n\treadUInt8(offset: number): number {\n\t\treturn readUInt8(this.buffer, offset);\n\t}\n\n\twriteUInt8(value: number, offset: number): void {\n\t\twriteUInt8(this.buffer, value, offset);\n\t}\n}\n\nexport function readUInt16LE(source: Uint8Array, offset: number): number {\n\treturn (\n\t\t((source[offset + 0] << 0) >>> 0) |\n\t\t((source[offset + 1] << 8) >>> 0)\n\t);\n}\n\nexport function writeUInt16LE(destination: Uint8Array, value: number, offset: number): void {\n\tdestination[offset + 0] = (value & 0b11111111);\n\tvalue = value >>> 8;\n\tdestination[offset + 1] = (value & 0b11111111);\n}\n\nexport function readUInt32BE(source: Uint8Array, offset: number): number {\n\treturn (\n\t\tsource[offset] * 2 ** 24\n\t\t+ source[offset + 1] * 2 ** 16\n\t\t+ source[offset + 2] * 2 ** 8\n\t\t+ source[offset + 3]\n\t);\n}\n\nexport function writeUInt32BE(destination: Uint8Array, value: number, offset: number): void {\n\tdestination[offset + 3] = value;\n\tvalue = value >>> 8;\n\tdestination[offset + 2] = value;\n\tvalue = value >>> 8;\n\tdestination[offset + 1] = value;\n\tvalue = value >>> 8;\n\tdestination[offset] = value;\n}\n\nexport function readUInt32LE(source: Uint8Array, offset: number): number {\n\treturn (\n\t\t((source[offset + 0] << 0) >>> 0) |\n\t\t((source[offset + 1] << 8) >>> 0) |\n\t\t((source[offset + 2] << 16) >>> 0) |\n\t\t((source[offset + 3] << 24) >>> 0)\n\t);\n}\n\nexport function writeUInt32LE(destination: Uint8Array, value: number, offset: number): void {\n\tdestination[offset + 0] = (value & 0b11111111);\n\tvalue = value >>> 8;\n\tdestination[offset + 1] = (value & 0b11111111);\n\tvalue = value >>> 8;\n\tdestination[offset + 2] = (value & 0b11111111);\n\tvalue = value >>> 8;\n\tdestination[offset + 3] = (value & 0b11111111);\n}\n\nexport function readUInt8(source: Uint8Array, offset: number): number {\n\treturn source[offset];\n}\n\nexport function writeUInt8(destination: Uint8Array, value: number, offset: number): void {\n\tdestination[offset] = value;\n}\n\nexport interface VSBufferReadable extends streams.Readable<VSBuffer> { }\n\nexport interface VSBufferReadableStream extends streams.ReadableStream<VSBuffer> { }\n\nexport interface VSBufferWriteableStream extends streams.WriteableStream<VSBuffer> { }\n\nexport interface VSBufferReadableBufferedStream extends streams.ReadableBufferedStream<VSBuffer> { }\n\nexport function readableToBuffer(readable: VSBufferReadable): VSBuffer {\n\treturn streams.consumeReadable<VSBuffer>(readable, chunks => VSBuffer.concat(chunks));\n}\n\nexport function bufferToReadable(buffer: VSBuffer): VSBufferReadable {\n\treturn streams.toReadable<VSBuffer>(buffer);\n}\n\nexport function streamToBuffer(stream: streams.ReadableStream<VSBuffer>): Promise<VSBuffer> {\n\treturn streams.consumeStream<VSBuffer>(stream, chunks => VSBuffer.concat(chunks));\n}\n\nexport async function bufferedStreamToBuffer(bufferedStream: streams.ReadableBufferedStream<VSBuffer>): Promise<VSBuffer> {\n\tif (bufferedStream.ended) {\n\t\treturn VSBuffer.concat(bufferedStream.buffer);\n\t}\n\n\treturn VSBuffer.concat([\n\n\t\t// Include already read chunks...\n\t\t...bufferedStream.buffer,\n\n\t\t// ...and all additional chunks\n\t\tawait streamToBuffer(bufferedStream.stream)\n\t]);\n}\n\nexport function bufferToStream(buffer: VSBuffer): streams.ReadableStream<VSBuffer> {\n\treturn streams.toStream<VSBuffer>(buffer, chunks => VSBuffer.concat(chunks));\n}\n\nexport function streamToBufferReadableStream(stream: streams.ReadableStreamEvents<Uint8Array | string>): streams.ReadableStream<VSBuffer> {\n\treturn streams.transform<Uint8Array | string, VSBuffer>(stream, { data: data => typeof data === 'string' ? VSBuffer.fromString(data) : VSBuffer.wrap(data) }, chunks => VSBuffer.concat(chunks));\n}\n\nexport function newWriteableBufferStream(options?: streams.WriteableStreamOptions): streams.WriteableStream<VSBuffer> {\n\treturn streams.newWriteableStream<VSBuffer>(chunks => VSBuffer.concat(chunks), options);\n}\n\nexport function prefixedBufferReadable(prefix: VSBuffer, readable: VSBufferReadable): VSBufferReadable {\n\treturn streams.prefixedReadable(prefix, readable, chunks => VSBuffer.concat(chunks));\n}\n\nexport function prefixedBufferStream(prefix: VSBuffer, stream: VSBufferReadableStream): VSBufferReadableStream {\n\treturn streams.prefixedStream(prefix, stream, chunks => VSBuffer.concat(chunks));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { isAbsolute, join, normalize, posix, sep } from 'vs/base/common/path';\nimport { isWindows } from 'vs/base/common/platform';\nimport { equalsIgnoreCase, rtrim, startsWithIgnoreCase } from 'vs/base/common/strings';\nimport { isNumber } from 'vs/base/common/types';\n\nexport function isPathSeparator(code: number) {\n\treturn code === CharCode.Slash || code === CharCode.Backslash;\n}\n\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath: string) {\n\treturn osPath.replace(/[\\\\/]/g, posix.sep);\n}\n\n/**\n * Takes a Windows OS path (using backward or forward slashes) and turns it into a posix path:\n * - turns backward slashes into forward slashes\n * - makes it absolute if it starts with a drive letter\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toPosixPath(osPath: string) {\n\tif (osPath.indexOf('/') === -1) {\n\t\tosPath = toSlashes(osPath);\n\t}\n\tif (/^[a-zA-Z]:(\\/|$)/.test(osPath)) { // starts with a drive letter\n\t\tosPath = '/' + osPath;\n\t}\n\treturn osPath;\n}\n\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path: string, sep: string = posix.sep): string {\n\tif (!path) {\n\t\treturn '';\n\t}\n\n\tconst len = path.length;\n\tconst firstLetter = path.charCodeAt(0);\n\tif (isPathSeparator(firstLetter)) {\n\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t// UNC candidate \\\\localhost\\shares\\ddd\n\t\t\t//               ^^^^^^^^^^^^^^^^^^^\n\t\t\tif (!isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\tlet pos = 3;\n\t\t\t\tconst start = pos;\n\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\t\t\t\treturn path.slice(0, pos + 1) // consume this separator\n\t\t\t\t\t\t\t\t.replace(/[\\\\/]/g, sep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// /user/far\n\t\t// ^\n\t\treturn sep;\n\n\t} else if (isWindowsDriveLetter(firstLetter)) {\n\t\t// check for windows drive letter c:\\ or c:\n\n\t\tif (path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t// C:\\fff\n\t\t\t\t// ^^^\n\t\t\t\treturn path.slice(0, 2) + sep;\n\t\t\t} else {\n\t\t\t\t// C:\n\t\t\t\t// ^^\n\t\t\t\treturn path.slice(0, 2);\n\t\t\t}\n\t\t}\n\t}\n\n\t// check for URI\n\t// scheme://authority/path\n\t// ^^^^^^^^^^^^^^^^^^^\n\tlet pos = path.indexOf('://');\n\tif (pos !== -1) {\n\t\tpos += 3; // 3 -> \"://\".length\n\t\tfor (; pos < len; pos++) {\n\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\treturn path.slice(0, pos + 1); // consume this separator\n\t\t\t}\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * Check if the path follows this pattern: `\\\\hostname\\sharename`.\n *\n * @see https://msdn.microsoft.com/en-us/library/gg465305.aspx\n * @return A boolean indication if the path is a UNC path, on none-windows\n * always false.\n */\nexport function isUNC(path: string): boolean {\n\tif (!isWindows) {\n\t\t// UNC is a windows concept\n\t\treturn false;\n\t}\n\n\tif (!path || path.length < 5) {\n\t\t// at least \\\\a\\b\n\t\treturn false;\n\t}\n\n\tlet code = path.charCodeAt(0);\n\tif (code !== CharCode.Backslash) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(1);\n\tif (code !== CharCode.Backslash) {\n\t\treturn false;\n\t}\n\tlet pos = 2;\n\tconst start = pos;\n\tfor (; pos < path.length; pos++) {\n\t\tcode = path.charCodeAt(pos);\n\t\tif (code === CharCode.Backslash) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (start === pos) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(pos + 1);\n\tif (isNaN(code) || code === CharCode.Backslash) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n// Reference: https://en.wikipedia.org/wiki/Filename\nconst WINDOWS_INVALID_FILE_CHARS = /[\\\\/:\\*\\?\"<>\\|]/g;\nconst UNIX_INVALID_FILE_CHARS = /[\\\\/]/g;\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])(\\.(.*?))?$/i;\nexport function isValidBasename(name: string | null | undefined, isWindowsOS: boolean = isWindows): boolean {\n\tconst invalidFileChars = isWindowsOS ? WINDOWS_INVALID_FILE_CHARS : UNIX_INVALID_FILE_CHARS;\n\n\tif (!name || name.length === 0 || /^\\s+$/.test(name)) {\n\t\treturn false; // require a name that is not just whitespace\n\t}\n\n\tinvalidFileChars.lastIndex = 0; // the holy grail of software development\n\tif (invalidFileChars.test(name)) {\n\t\treturn false; // check for certain invalid file characters\n\t}\n\n\tif (isWindowsOS && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n\t\treturn false; // check for certain invalid file names\n\t}\n\n\tif (name === '.' || name === '..') {\n\t\treturn false; // check for reserved values\n\t}\n\n\tif (isWindowsOS && name[name.length - 1] === '.') {\n\t\treturn false; // Windows: file cannot end with a \".\"\n\t}\n\n\tif (isWindowsOS && name.length !== name.trim().length) {\n\t\treturn false; // Windows: file cannot end with a whitespace\n\t}\n\n\tif (name.length > 255) {\n\t\treturn false; // most file systems do not allow files > 255 length\n\t}\n\n\treturn true;\n}\n\nexport function isEqual(pathA: string, pathB: string, ignoreCase?: boolean): boolean {\n\tconst identityEquals = (pathA === pathB);\n\tif (!ignoreCase || identityEquals) {\n\t\treturn identityEquals;\n\t}\n\n\tif (!pathA || !pathB) {\n\t\treturn false;\n\t}\n\n\treturn equalsIgnoreCase(pathA, pathB);\n}\n\nexport function isEqualOrParent(base: string, parentCandidate: string, ignoreCase?: boolean, separator = sep): boolean {\n\tif (base === parentCandidate) {\n\t\treturn true;\n\t}\n\n\tif (!base || !parentCandidate) {\n\t\treturn false;\n\t}\n\n\tif (parentCandidate.length > base.length) {\n\t\treturn false;\n\t}\n\n\tif (ignoreCase) {\n\t\tconst beginsWith = startsWithIgnoreCase(base, parentCandidate);\n\t\tif (!beginsWith) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (parentCandidate.length === base.length) {\n\t\t\treturn true; // same path, different casing\n\t\t}\n\n\t\tlet sepOffset = parentCandidate.length;\n\t\tif (parentCandidate.charAt(parentCandidate.length - 1) === separator) {\n\t\t\tsepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n\t\t}\n\n\t\treturn base.charAt(sepOffset) === separator;\n\t}\n\n\tif (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {\n\t\tparentCandidate += separator;\n\t}\n\n\treturn base.indexOf(parentCandidate) === 0;\n}\n\nexport function isWindowsDriveLetter(char0: number): boolean {\n\treturn char0 >= CharCode.A && char0 <= CharCode.Z || char0 >= CharCode.a && char0 <= CharCode.z;\n}\n\nexport function sanitizeFilePath(candidate: string, cwd: string): string {\n\n\t// Special case: allow to open a drive letter without trailing backslash\n\tif (isWindows && candidate.endsWith(':')) {\n\t\tcandidate += sep;\n\t}\n\n\t// Ensure absolute\n\tif (!isAbsolute(candidate)) {\n\t\tcandidate = join(cwd, candidate);\n\t}\n\n\t// Ensure normalized\n\tcandidate = normalize(candidate);\n\n\t// Ensure no trailing slash/backslash\n\tif (isWindows) {\n\t\tcandidate = rtrim(candidate, sep);\n\n\t\t// Special case: allow to open drive root ('C:\\')\n\t\tif (candidate.endsWith(':')) {\n\t\t\tcandidate += sep;\n\t\t}\n\n\t} else {\n\t\tcandidate = rtrim(candidate, sep);\n\n\t\t// Special case: allow to open root ('/')\n\t\tif (!candidate) {\n\t\t\tcandidate = sep;\n\t\t}\n\t}\n\n\treturn candidate;\n}\n\nexport function isRootOrDriveLetter(path: string): boolean {\n\tconst pathNormalized = normalize(path);\n\n\tif (isWindows) {\n\t\tif (path.length > 3) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn hasDriveLetter(pathNormalized) &&\n\t\t\t(path.length === 2 || pathNormalized.charCodeAt(2) === CharCode.Backslash);\n\t}\n\n\treturn pathNormalized === posix.sep;\n}\n\nexport function hasDriveLetter(path: string): boolean {\n\tif (isWindows) {\n\t\treturn isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === CharCode.Colon;\n\t}\n\n\treturn false;\n}\n\nexport function getDriveLetter(path: string): string | undefined {\n\treturn hasDriveLetter(path) ? path[0] : undefined;\n}\n\nexport function indexOfPath(path: string, candidate: string, ignoreCase?: boolean): number {\n\tif (candidate.length > path.length) {\n\t\treturn -1;\n\t}\n\n\tif (path === candidate) {\n\t\treturn 0;\n\t}\n\n\tif (ignoreCase) {\n\t\tpath = path.toLowerCase();\n\t\tcandidate = candidate.toLowerCase();\n\t}\n\n\treturn path.indexOf(candidate);\n}\n\nexport interface IPathWithLineAndColumn {\n\tpath: string;\n\tline?: number;\n\tcolumn?: number;\n}\n\nexport function parseLineAndColumnAware(rawPath: string): IPathWithLineAndColumn {\n\tconst segments = rawPath.split(':'); // C:\\file.txt:<line>:<column>\n\n\tlet path: string | undefined = undefined;\n\tlet line: number | undefined = undefined;\n\tlet column: number | undefined = undefined;\n\n\tsegments.forEach(segment => {\n\t\tconst segmentAsNumber = Number(segment);\n\t\tif (!isNumber(segmentAsNumber)) {\n\t\t\tpath = !!path ? [path, segment].join(':') : segment; // a colon can well be part of a path (e.g. C:\\...)\n\t\t} else if (line === undefined) {\n\t\t\tline = segmentAsNumber;\n\t\t} else if (column === undefined) {\n\t\t\tcolumn = segmentAsNumber;\n\t\t}\n\t});\n\n\tif (!path) {\n\t\tthrow new Error('Format for `--goto` should be: `FILE:LINE(:COLUMN)`');\n\t}\n\n\treturn {\n\t\tpath,\n\t\tline: line !== undefined ? line : undefined,\n\t\tcolumn: column !== undefined ? column : line !== undefined ? 1 : undefined // if we have a line, make sure column is also set\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isArray, isObject, isUndefinedOrNull } from 'vs/base/common/types';\n\nexport function deepClone<T>(obj: T): T {\n\tif (!obj || typeof obj !== 'object') {\n\t\treturn obj;\n\t}\n\tif (obj instanceof RegExp) {\n\t\t// See https://github.com/microsoft/TypeScript/issues/10990\n\t\treturn obj as any;\n\t}\n\tconst result: any = Array.isArray(obj) ? [] : {};\n\tObject.keys(<any>obj).forEach((key: string) => {\n\t\tif ((<any>obj)[key] && typeof (<any>obj)[key] === 'object') {\n\t\t\tresult[key] = deepClone((<any>obj)[key]);\n\t\t} else {\n\t\t\tresult[key] = (<any>obj)[key];\n\t\t}\n\t});\n\treturn result;\n}\n\nexport function deepFreeze<T>(obj: T): T {\n\tif (!obj || typeof obj !== 'object') {\n\t\treturn obj;\n\t}\n\tconst stack: any[] = [obj];\n\twhile (stack.length > 0) {\n\t\tconst obj = stack.shift();\n\t\tObject.freeze(obj);\n\t\tfor (const key in obj) {\n\t\t\tif (_hasOwnProperty.call(obj, key)) {\n\t\t\t\tconst prop = obj[key];\n\t\t\t\tif (typeof prop === 'object' && !Object.isFrozen(prop)) {\n\t\t\t\t\tstack.push(prop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn obj;\n}\n\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport function cloneAndChange(obj: any, changer: (orig: any) => any): any {\n\treturn _cloneAndChange(obj, changer, new Set());\n}\n\nfunction _cloneAndChange(obj: any, changer: (orig: any) => any, seen: Set<any>): any {\n\tif (isUndefinedOrNull(obj)) {\n\t\treturn obj;\n\t}\n\n\tconst changed = changer(obj);\n\tif (typeof changed !== 'undefined') {\n\t\treturn changed;\n\t}\n\n\tif (isArray(obj)) {\n\t\tconst r1: any[] = [];\n\t\tfor (const e of obj) {\n\t\t\tr1.push(_cloneAndChange(e, changer, seen));\n\t\t}\n\t\treturn r1;\n\t}\n\n\tif (isObject(obj)) {\n\t\tif (seen.has(obj)) {\n\t\t\tthrow new Error('Cannot clone recursive data-structure');\n\t\t}\n\t\tseen.add(obj);\n\t\tconst r2 = {};\n\t\tfor (let i2 in obj) {\n\t\t\tif (_hasOwnProperty.call(obj, i2)) {\n\t\t\t\t(r2 as any)[i2] = _cloneAndChange(obj[i2], changer, seen);\n\t\t\t}\n\t\t}\n\t\tseen.delete(obj);\n\t\treturn r2;\n\t}\n\n\treturn obj;\n}\n\n/**\n * Copies all properties of source into destination. The optional parameter \"overwrite\" allows to control\n * if existing properties on the destination should be overwritten or not. Defaults to true (overwrite).\n */\nexport function mixin(destination: any, source: any, overwrite: boolean = true): any {\n\tif (!isObject(destination)) {\n\t\treturn source;\n\t}\n\n\tif (isObject(source)) {\n\t\tObject.keys(source).forEach(key => {\n\t\t\tif (key in destination) {\n\t\t\t\tif (overwrite) {\n\t\t\t\t\tif (isObject(destination[key]) && isObject(source[key])) {\n\t\t\t\t\t\tmixin(destination[key], source[key], overwrite);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestination[key] = source[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdestination[key] = source[key];\n\t\t\t}\n\t\t});\n\t}\n\treturn destination;\n}\n\nexport function equals(one: any, other: any): boolean {\n\tif (one === other) {\n\t\treturn true;\n\t}\n\tif (one === null || one === undefined || other === null || other === undefined) {\n\t\treturn false;\n\t}\n\tif (typeof one !== typeof other) {\n\t\treturn false;\n\t}\n\tif (typeof one !== 'object') {\n\t\treturn false;\n\t}\n\tif ((Array.isArray(one)) !== (Array.isArray(other))) {\n\t\treturn false;\n\t}\n\n\tlet i: number;\n\tlet key: string;\n\n\tif (Array.isArray(one)) {\n\t\tif (one.length !== other.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (i = 0; i < one.length; i++) {\n\t\t\tif (!equals(one[i], other[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst oneKeys: string[] = [];\n\n\t\tfor (key in one) {\n\t\t\toneKeys.push(key);\n\t\t}\n\t\toneKeys.sort();\n\t\tconst otherKeys: string[] = [];\n\t\tfor (key in other) {\n\t\t\totherKeys.push(key);\n\t\t}\n\t\totherKeys.sort();\n\t\tif (!equals(oneKeys, otherKeys)) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (i = 0; i < oneKeys.length; i++) {\n\t\t\tif (!equals(one[oneKeys[i]], other[oneKeys[i]])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Calls `JSON.Stringify` with a replacer to break apart any circular references.\n * This prevents `JSON`.stringify` from throwing the exception\n *  \"Uncaught TypeError: Converting circular structure to JSON\"\n */\nexport function safeStringify(obj: any): string {\n\tconst seen = new Set<any>();\n\treturn JSON.stringify(obj, (key, value) => {\n\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\tif (seen.has(value)) {\n\t\t\t\treturn '[Circular]';\n\t\t\t} else {\n\t\t\t\tseen.add(value);\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t});\n}\n\nexport function getOrDefault<T, R>(obj: T, fn: (obj: T) => R | undefined, defaultValue: R): R {\n\tconst result = fn(obj);\n\treturn typeof result === 'undefined' ? defaultValue : result;\n}\n\ntype obj = { [key: string]: any; };\n/**\n * Returns an object that has keys for each value that is different in the base object. Keys\n * that do not exist in the target but in the base object are not considered.\n *\n * Note: This is not a deep-diffing method, so the values are strictly taken into the resulting\n * object if they differ.\n *\n * @param base the object to diff against\n * @param obj the object to use for diffing\n */\nexport function distinct(base: obj, target: obj): obj {\n\tconst result = Object.create(null);\n\n\tif (!base || !target) {\n\t\treturn result;\n\t}\n\n\tconst targetKeys = Object.keys(target);\n\ttargetKeys.forEach(k => {\n\t\tconst baseValue = base[k];\n\t\tconst targetValue = target[k];\n\n\t\tif (!equals(baseValue, targetValue)) {\n\t\t\tresult[k] = targetValue;\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function getCaseInsensitive(target: obj, key: string): any {\n\tconst lowercaseKey = key.toLowerCase();\n\tconst equivalentKey = Object.keys(target).find(k => k.toLowerCase() === lowercaseKey);\n\treturn equivalentKey ? target[equivalentKey] : target[key];\n}\n\nexport function filter(obj: obj, predicate: (key: string, value: any) => boolean): obj {\n\tconst result = Object.create(null);\n\tfor (const key of Object.keys(obj)) {\n\t\tif (predicate(key, obj[key])) {\n\t\t\tresult[key] = obj[key];\n\t\t}\n\t}\n\treturn result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { compare, compareIgnoreCase, compareSubstring, compareSubstringIgnoreCase } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\n\nexport function getOrSet<K, V>(map: Map<K, V>, key: K, value: V): V {\n\tlet result = map.get(key);\n\tif (result === undefined) {\n\t\tresult = value;\n\t\tmap.set(key, result);\n\t}\n\n\treturn result;\n}\n\nexport function mapToString<K, V>(map: Map<K, V>): string {\n\tconst entries: string[] = [];\n\tmap.forEach((value, key) => {\n\t\tentries.push(`${key} => ${value}`);\n\t});\n\n\treturn `Map(${map.size}) {${entries.join(', ')}}`;\n}\n\nexport function setToString<K>(set: Set<K>): string {\n\tconst entries: K[] = [];\n\tset.forEach(value => {\n\t\tentries.push(value);\n\t});\n\n\treturn `Set(${set.size}) {${entries.join(', ')}}`;\n}\n\nexport interface IKeyIterator<K> {\n\treset(key: K): this;\n\tnext(): this;\n\n\thasNext(): boolean;\n\tcmp(a: string): number;\n\tvalue(): string;\n}\n\nexport class StringIterator implements IKeyIterator<string> {\n\n\tprivate _value: string = '';\n\tprivate _pos: number = 0;\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._pos = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tthis._pos += 1;\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._pos < this._value.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tconst aCode = a.charCodeAt(0);\n\t\tconst thisCode = this._value.charCodeAt(this._pos);\n\t\treturn aCode - thisCode;\n\t}\n\n\tvalue(): string {\n\t\treturn this._value[this._pos];\n\t}\n}\n\nexport class ConfigKeysIterator implements IKeyIterator<string> {\n\n\tprivate _value!: string;\n\tprivate _from!: number;\n\tprivate _to!: number;\n\n\tconstructor(\n\t\tprivate readonly _caseSensitive: boolean = true\n\t) { }\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._value.length;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._value.length; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Period) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\t\treturn this._caseSensitive\n\t\t\t? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n\t\t\t: compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nexport class PathIterator implements IKeyIterator<string> {\n\n\tprivate _value!: string;\n\tprivate _from!: number;\n\tprivate _to!: number;\n\n\tconstructor(\n\t\tprivate readonly _splitOnBackslash: boolean = true,\n\t\tprivate readonly _caseSensitive: boolean = true\n\t) { }\n\n\treset(key: string): this {\n\t\tthis._value = key.replace(/\\\\$|\\/$/, '');\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._value.length;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._value.length; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Slash || this._splitOnBackslash && ch === CharCode.Backslash) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\t\treturn this._caseSensitive\n\t\t\t? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n\t\t\t: compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nconst enum UriIteratorState {\n\tScheme = 1, Authority = 2, Path = 3, Query = 4, Fragment = 5\n}\n\nexport class UriIterator implements IKeyIterator<URI> {\n\n\tprivate _pathIterator!: PathIterator;\n\tprivate _value!: URI;\n\tprivate _states: UriIteratorState[] = [];\n\tprivate _stateIdx: number = 0;\n\n\tconstructor(private readonly _ignorePathCasing: (uri: URI) => boolean) { }\n\n\treset(key: URI): this {\n\t\tthis._value = key;\n\t\tthis._states = [];\n\t\tif (this._value.scheme) {\n\t\t\tthis._states.push(UriIteratorState.Scheme);\n\t\t}\n\t\tif (this._value.authority) {\n\t\t\tthis._states.push(UriIteratorState.Authority);\n\t\t}\n\t\tif (this._value.path) {\n\t\t\tthis._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\n\t\t\tthis._pathIterator.reset(key.path);\n\t\t\tif (this._pathIterator.value()) {\n\t\t\t\tthis._states.push(UriIteratorState.Path);\n\t\t\t}\n\t\t}\n\t\tif (this._value.query) {\n\t\t\tthis._states.push(UriIteratorState.Query);\n\t\t}\n\t\tif (this._value.fragment) {\n\t\t\tthis._states.push(UriIteratorState.Fragment);\n\t\t}\n\t\tthis._stateIdx = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext()) {\n\t\t\tthis._pathIterator.next();\n\t\t} else {\n\t\t\tthis._stateIdx += 1;\n\t\t}\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext())\n\t\t\t|| this._stateIdx < this._states.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n\t\t\treturn compareIgnoreCase(a, this._value.scheme);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n\t\t\treturn compareIgnoreCase(a, this._value.authority);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n\t\t\treturn this._pathIterator.cmp(a);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n\t\t\treturn compare(a, this._value.query);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n\t\t\treturn compare(a, this._value.fragment);\n\t\t}\n\t\tthrow new Error();\n\t}\n\n\tvalue(): string {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n\t\t\treturn this._value.scheme;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n\t\t\treturn this._value.authority;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n\t\t\treturn this._pathIterator.value();\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n\t\t\treturn this._value.query;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n\t\t\treturn this._value.fragment;\n\t\t}\n\t\tthrow new Error();\n\t}\n}\n\nclass TernarySearchTreeNode<K, V> {\n\tsegment!: string;\n\tvalue: V | undefined;\n\tkey!: K;\n\tleft: TernarySearchTreeNode<K, V> | undefined;\n\tmid: TernarySearchTreeNode<K, V> | undefined;\n\tright: TernarySearchTreeNode<K, V> | undefined;\n\n\tisEmpty(): boolean {\n\t\treturn !this.left && !this.mid && !this.right && !this.value;\n\t}\n}\n\nexport class TernarySearchTree<K, V> {\n\n\tstatic forUris<E>(ignorePathCasing: (key: URI) => boolean = () => false): TernarySearchTree<URI, E> {\n\t\treturn new TernarySearchTree<URI, E>(new UriIterator(ignorePathCasing));\n\t}\n\n\tstatic forPaths<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new PathIterator());\n\t}\n\n\tstatic forStrings<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new StringIterator());\n\t}\n\n\tstatic forConfigKeys<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new ConfigKeysIterator());\n\t}\n\n\tprivate _iter: IKeyIterator<K>;\n\tprivate _root: TernarySearchTreeNode<K, V> | undefined;\n\n\tconstructor(segments: IKeyIterator<K>) {\n\t\tthis._iter = segments;\n\t}\n\n\tclear(): void {\n\t\tthis._root = undefined;\n\t}\n\n\tset(key: K, element: V): V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node: TernarySearchTreeNode<K, V>;\n\n\t\tif (!this._root) {\n\t\t\tthis._root = new TernarySearchTreeNode<K, V>();\n\t\t\tthis._root.segment = iter.value();\n\t\t}\n\n\t\tnode = this._root;\n\t\twhile (true) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tif (!node.left) {\n\t\t\t\t\tnode.left = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.left.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tnode = node.left;\n\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tif (!node.right) {\n\t\t\t\t\tnode.right = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.right.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tnode = node.right;\n\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\tnode.mid = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.mid.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst oldElement = node.value;\n\t\tnode.value = element;\n\t\tnode.key = key;\n\t\treturn oldElement;\n\t}\n\n\tget(key: K): V | undefined {\n\t\treturn this._getNode(key)?.value;\n\t}\n\n\tprivate _getNode(key: K) {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\thas(key: K): boolean {\n\t\tconst node = this._getNode(key);\n\t\treturn !(node?.value === undefined && node?.mid === undefined);\n\t}\n\n\tdelete(key: K): void {\n\t\treturn this._delete(key, false);\n\t}\n\n\tdeleteSuperstr(key: K): void {\n\t\treturn this._delete(key, true);\n\t}\n\n\tprivate _delete(key: K, superStr: boolean): void {\n\t\tconst iter = this._iter.reset(key);\n\t\tconst stack: [-1 | 0 | 1, TernarySearchTreeNode<K, V>][] = [];\n\t\tlet node = this._root;\n\n\t\t// find and unset node\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tstack.push([1, node]);\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tstack.push([-1, node]);\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tstack.push([0, node]);\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tif (superStr) {\n\t\t\t\t\t// remove children\n\t\t\t\t\tnode.left = undefined;\n\t\t\t\t\tnode.mid = undefined;\n\t\t\t\t\tnode.right = undefined;\n\t\t\t\t} else {\n\t\t\t\t\t// remove element\n\t\t\t\t\tnode.value = undefined;\n\t\t\t\t}\n\n\t\t\t\t// clean up empty nodes\n\t\t\t\twhile (stack.length > 0 && node.isEmpty()) {\n\t\t\t\t\tlet [dir, parent] = stack.pop()!;\n\t\t\t\t\tswitch (dir) {\n\t\t\t\t\t\tcase 1: parent.left = undefined; break;\n\t\t\t\t\t\tcase 0: parent.mid = undefined; break;\n\t\t\t\t\t\tcase -1: parent.right = undefined; break;\n\t\t\t\t\t}\n\t\t\t\t\tnode = parent;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfindSubstr(key: K): V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\tlet candidate: V | undefined = undefined;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tcandidate = node.value || candidate;\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node && node.value || candidate;\n\t}\n\n\tfindSuperstr(key: K): IterableIterator<[K, V]> | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\t// collect\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t} else {\n\t\t\t\t\treturn this._entries(node.mid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tforEach(callback: (value: V, index: K) => any): void {\n\t\tfor (const [key, value] of this) {\n\t\t\tcallback(value, key);\n\t\t}\n\t}\n\n\t*[Symbol.iterator](): IterableIterator<[K, V]> {\n\t\tyield* this._entries(this._root);\n\t}\n\n\tprivate *_entries(node: TernarySearchTreeNode<K, V> | undefined): IterableIterator<[K, V]> {\n\t\t// DFS\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\t\tconst stack = [node];\n\t\twhile (stack.length > 0) {\n\t\t\tconst node = stack.pop();\n\t\t\tif (node) {\n\t\t\t\tif (node.value) {\n\t\t\t\t\tyield [node.key, node.value];\n\t\t\t\t}\n\t\t\t\tif (node.left) {\n\t\t\t\t\tstack.push(node.left);\n\t\t\t\t}\n\t\t\t\tif (node.mid) {\n\t\t\t\t\tstack.push(node.mid);\n\t\t\t\t}\n\t\t\t\tif (node.right) {\n\t\t\t\t\tstack.push(node.right);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface ResourceMapKeyFn {\n\t(resource: URI): string;\n}\n\nexport class ResourceMap<T> implements Map<URI, T> {\n\n\tprivate static readonly defaultToKey = (resource: URI) => resource.toString();\n\n\treadonly [Symbol.toStringTag] = 'ResourceMap';\n\n\tprivate readonly map: Map<string, T>;\n\tprivate readonly toKey: ResourceMapKeyFn;\n\n\t/**\n\t *\n\t * @param toKey Custom uri identity function, e.g use an existing `IExtUri#getComparison`-util\n\t */\n\tconstructor(toKey?: ResourceMapKeyFn);\n\n\t/**\n\t *\n\t * @param other Another resource which this maps is created from\n\t * @param toKey Custom uri identity function, e.g use an existing `IExtUri#getComparison`-util\n\t */\n\tconstructor(other?: ResourceMap<T>, toKey?: ResourceMapKeyFn);\n\n\tconstructor(mapOrKeyFn?: ResourceMap<T> | ResourceMapKeyFn, toKey?: ResourceMapKeyFn) {\n\t\tif (mapOrKeyFn instanceof ResourceMap) {\n\t\t\tthis.map = new Map(mapOrKeyFn.map);\n\t\t\tthis.toKey = toKey ?? ResourceMap.defaultToKey;\n\t\t} else {\n\t\t\tthis.map = new Map();\n\t\t\tthis.toKey = mapOrKeyFn ?? ResourceMap.defaultToKey;\n\t\t}\n\t}\n\n\tset(resource: URI, value: T): this {\n\t\tthis.map.set(this.toKey(resource), value);\n\t\treturn this;\n\t}\n\n\tget(resource: URI): T | undefined {\n\t\treturn this.map.get(this.toKey(resource));\n\t}\n\n\thas(resource: URI): boolean {\n\t\treturn this.map.has(this.toKey(resource));\n\t}\n\n\tget size(): number {\n\t\treturn this.map.size;\n\t}\n\n\tclear(): void {\n\t\tthis.map.clear();\n\t}\n\n\tdelete(resource: URI): boolean {\n\t\treturn this.map.delete(this.toKey(resource));\n\t}\n\n\tforEach(clb: (value: T, key: URI, map: Map<URI, T>) => void, thisArg?: any): void {\n\t\tif (typeof thisArg !== 'undefined') {\n\t\t\tclb = clb.bind(thisArg);\n\t\t}\n\t\tfor (let [index, value] of this.map) {\n\t\t\tclb(value, URI.parse(index), <any>this);\n\t\t}\n\t}\n\n\tvalues(): IterableIterator<T> {\n\t\treturn this.map.values();\n\t}\n\n\t*keys(): IterableIterator<URI> {\n\t\tfor (let key of this.map.keys()) {\n\t\t\tyield URI.parse(key);\n\t\t}\n\t}\n\n\t*entries(): IterableIterator<[URI, T]> {\n\t\tfor (let tuple of this.map.entries()) {\n\t\t\tyield [URI.parse(tuple[0]), tuple[1]];\n\t\t}\n\t}\n\n\t*[Symbol.iterator](): IterableIterator<[URI, T]> {\n\t\tfor (let item of this.map) {\n\t\t\tyield [URI.parse(item[0]), item[1]];\n\t\t}\n\t}\n}\n\ninterface Item<K, V> {\n\tprevious: Item<K, V> | undefined;\n\tnext: Item<K, V> | undefined;\n\tkey: K;\n\tvalue: V;\n}\n\nexport const enum Touch {\n\tNone = 0,\n\tAsOld = 1,\n\tAsNew = 2\n}\n\nexport class LinkedMap<K, V> implements Map<K, V> {\n\n\treadonly [Symbol.toStringTag] = 'LinkedMap';\n\n\tprivate _map: Map<K, Item<K, V>>;\n\tprivate _head: Item<K, V> | undefined;\n\tprivate _tail: Item<K, V> | undefined;\n\tprivate _size: number;\n\n\tprivate _state: number;\n\n\tconstructor() {\n\t\tthis._map = new Map<K, Item<K, V>>();\n\t\tthis._head = undefined;\n\t\tthis._tail = undefined;\n\t\tthis._size = 0;\n\t\tthis._state = 0;\n\t}\n\n\tclear(): void {\n\t\tthis._map.clear();\n\t\tthis._head = undefined;\n\t\tthis._tail = undefined;\n\t\tthis._size = 0;\n\t\tthis._state++;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn !this._head && !this._tail;\n\t}\n\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\tget first(): V | undefined {\n\t\treturn this._head?.value;\n\t}\n\n\tget last(): V | undefined {\n\t\treturn this._tail?.value;\n\t}\n\n\thas(key: K): boolean {\n\t\treturn this._map.has(key);\n\t}\n\n\tget(key: K, touch: Touch = Touch.None): V | undefined {\n\t\tconst item = this._map.get(key);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (touch !== Touch.None) {\n\t\t\tthis.touch(item, touch);\n\t\t}\n\t\treturn item.value;\n\t}\n\n\tset(key: K, value: V, touch: Touch = Touch.None): this {\n\t\tlet item = this._map.get(key);\n\t\tif (item) {\n\t\t\titem.value = value;\n\t\t\tif (touch !== Touch.None) {\n\t\t\t\tthis.touch(item, touch);\n\t\t\t}\n\t\t} else {\n\t\t\titem = { key, value, next: undefined, previous: undefined };\n\t\t\tswitch (touch) {\n\t\t\t\tcase Touch.None:\n\t\t\t\t\tthis.addItemLast(item);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Touch.AsOld:\n\t\t\t\t\tthis.addItemFirst(item);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Touch.AsNew:\n\t\t\t\t\tthis.addItemLast(item);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.addItemLast(item);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._map.set(key, item);\n\t\t\tthis._size++;\n\t\t}\n\t\treturn this;\n\t}\n\n\tdelete(key: K): boolean {\n\t\treturn !!this.remove(key);\n\t}\n\n\tremove(key: K): V | undefined {\n\t\tconst item = this._map.get(key);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthis._map.delete(key);\n\t\tthis.removeItem(item);\n\t\tthis._size--;\n\t\treturn item.value;\n\t}\n\n\tshift(): V | undefined {\n\t\tif (!this._head && !this._tail) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!this._head || !this._tail) {\n\t\t\tthrow new Error('Invalid list');\n\t\t}\n\t\tconst item = this._head;\n\t\tthis._map.delete(item.key);\n\t\tthis.removeItem(item);\n\t\tthis._size--;\n\t\treturn item.value;\n\t}\n\n\tforEach(callbackfn: (value: V, key: K, map: LinkedMap<K, V>) => void, thisArg?: any): void {\n\t\tconst state = this._state;\n\t\tlet current = this._head;\n\t\twhile (current) {\n\t\t\tif (thisArg) {\n\t\t\t\tcallbackfn.bind(thisArg)(current.value, current.key, this);\n\t\t\t} else {\n\t\t\t\tcallbackfn(current.value, current.key, this);\n\t\t\t}\n\t\t\tif (this._state !== state) {\n\t\t\t\tthrow new Error(`LinkedMap got modified during iteration.`);\n\t\t\t}\n\t\t\tcurrent = current.next;\n\t\t}\n\t}\n\n\tkeys(): IterableIterator<K> {\n\t\tconst map = this;\n\t\tconst state = this._state;\n\t\tlet current = this._head;\n\t\tconst iterator: IterableIterator<K> = {\n\t\t\t[Symbol.iterator]() {\n\t\t\t\treturn iterator;\n\t\t\t},\n\t\t\tnext(): IteratorResult<K> {\n\t\t\t\tif (map._state !== state) {\n\t\t\t\t\tthrow new Error(`LinkedMap got modified during iteration.`);\n\t\t\t\t}\n\t\t\t\tif (current) {\n\t\t\t\t\tconst result = { value: current.key, done: false };\n\t\t\t\t\tcurrent = current.next;\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\treturn { value: undefined, done: true };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn iterator;\n\t}\n\n\tvalues(): IterableIterator<V> {\n\t\tconst map = this;\n\t\tconst state = this._state;\n\t\tlet current = this._head;\n\t\tconst iterator: IterableIterator<V> = {\n\t\t\t[Symbol.iterator]() {\n\t\t\t\treturn iterator;\n\t\t\t},\n\t\t\tnext(): IteratorResult<V> {\n\t\t\t\tif (map._state !== state) {\n\t\t\t\t\tthrow new Error(`LinkedMap got modified during iteration.`);\n\t\t\t\t}\n\t\t\t\tif (current) {\n\t\t\t\t\tconst result = { value: current.value, done: false };\n\t\t\t\t\tcurrent = current.next;\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\treturn { value: undefined, done: true };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn iterator;\n\t}\n\n\tentries(): IterableIterator<[K, V]> {\n\t\tconst map = this;\n\t\tconst state = this._state;\n\t\tlet current = this._head;\n\t\tconst iterator: IterableIterator<[K, V]> = {\n\t\t\t[Symbol.iterator]() {\n\t\t\t\treturn iterator;\n\t\t\t},\n\t\t\tnext(): IteratorResult<[K, V]> {\n\t\t\t\tif (map._state !== state) {\n\t\t\t\t\tthrow new Error(`LinkedMap got modified during iteration.`);\n\t\t\t\t}\n\t\t\t\tif (current) {\n\t\t\t\t\tconst result: IteratorResult<[K, V]> = { value: [current.key, current.value], done: false };\n\t\t\t\t\tcurrent = current.next;\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\treturn { value: undefined, done: true };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn iterator;\n\t}\n\n\t[Symbol.iterator](): IterableIterator<[K, V]> {\n\t\treturn this.entries();\n\t}\n\n\tprotected trimOld(newSize: number) {\n\t\tif (newSize >= this.size) {\n\t\t\treturn;\n\t\t}\n\t\tif (newSize === 0) {\n\t\t\tthis.clear();\n\t\t\treturn;\n\t\t}\n\t\tlet current = this._head;\n\t\tlet currentSize = this.size;\n\t\twhile (current && currentSize > newSize) {\n\t\t\tthis._map.delete(current.key);\n\t\t\tcurrent = current.next;\n\t\t\tcurrentSize--;\n\t\t}\n\t\tthis._head = current;\n\t\tthis._size = currentSize;\n\t\tif (current) {\n\t\t\tcurrent.previous = undefined;\n\t\t}\n\t\tthis._state++;\n\t}\n\n\tprivate addItemFirst(item: Item<K, V>): void {\n\t\t// First time Insert\n\t\tif (!this._head && !this._tail) {\n\t\t\tthis._tail = item;\n\t\t} else if (!this._head) {\n\t\t\tthrow new Error('Invalid list');\n\t\t} else {\n\t\t\titem.next = this._head;\n\t\t\tthis._head.previous = item;\n\t\t}\n\t\tthis._head = item;\n\t\tthis._state++;\n\t}\n\n\tprivate addItemLast(item: Item<K, V>): void {\n\t\t// First time Insert\n\t\tif (!this._head && !this._tail) {\n\t\t\tthis._head = item;\n\t\t} else if (!this._tail) {\n\t\t\tthrow new Error('Invalid list');\n\t\t} else {\n\t\t\titem.previous = this._tail;\n\t\t\tthis._tail.next = item;\n\t\t}\n\t\tthis._tail = item;\n\t\tthis._state++;\n\t}\n\n\tprivate removeItem(item: Item<K, V>): void {\n\t\tif (item === this._head && item === this._tail) {\n\t\t\tthis._head = undefined;\n\t\t\tthis._tail = undefined;\n\t\t}\n\t\telse if (item === this._head) {\n\t\t\t// This can only happen if size === 1 which is handled\n\t\t\t// by the case above.\n\t\t\tif (!item.next) {\n\t\t\t\tthrow new Error('Invalid list');\n\t\t\t}\n\t\t\titem.next.previous = undefined;\n\t\t\tthis._head = item.next;\n\t\t}\n\t\telse if (item === this._tail) {\n\t\t\t// This can only happen if size === 1 which is handled\n\t\t\t// by the case above.\n\t\t\tif (!item.previous) {\n\t\t\t\tthrow new Error('Invalid list');\n\t\t\t}\n\t\t\titem.previous.next = undefined;\n\t\t\tthis._tail = item.previous;\n\t\t}\n\t\telse {\n\t\t\tconst next = item.next;\n\t\t\tconst previous = item.previous;\n\t\t\tif (!next || !previous) {\n\t\t\t\tthrow new Error('Invalid list');\n\t\t\t}\n\t\t\tnext.previous = previous;\n\t\t\tprevious.next = next;\n\t\t}\n\t\titem.next = undefined;\n\t\titem.previous = undefined;\n\t\tthis._state++;\n\t}\n\n\tprivate touch(item: Item<K, V>, touch: Touch): void {\n\t\tif (!this._head || !this._tail) {\n\t\t\tthrow new Error('Invalid list');\n\t\t}\n\t\tif ((touch !== Touch.AsOld && touch !== Touch.AsNew)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (touch === Touch.AsOld) {\n\t\t\tif (item === this._head) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst next = item.next;\n\t\t\tconst previous = item.previous;\n\n\t\t\t// Unlink the item\n\t\t\tif (item === this._tail) {\n\t\t\t\t// previous must be defined since item was not head but is tail\n\t\t\t\t// So there are more than on item in the map\n\t\t\t\tprevious!.next = undefined;\n\t\t\t\tthis._tail = previous;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Both next and previous are not undefined since item was neither head nor tail.\n\t\t\t\tnext!.previous = previous;\n\t\t\t\tprevious!.next = next;\n\t\t\t}\n\n\t\t\t// Insert the node at head\n\t\t\titem.previous = undefined;\n\t\t\titem.next = this._head;\n\t\t\tthis._head.previous = item;\n\t\t\tthis._head = item;\n\t\t\tthis._state++;\n\t\t} else if (touch === Touch.AsNew) {\n\t\t\tif (item === this._tail) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst next = item.next;\n\t\t\tconst previous = item.previous;\n\n\t\t\t// Unlink the item.\n\t\t\tif (item === this._head) {\n\t\t\t\t// next must be defined since item was not tail but is head\n\t\t\t\t// So there are more than on item in the map\n\t\t\t\tnext!.previous = undefined;\n\t\t\t\tthis._head = next;\n\t\t\t} else {\n\t\t\t\t// Both next and previous are not undefined since item was neither head nor tail.\n\t\t\t\tnext!.previous = previous;\n\t\t\t\tprevious!.next = next;\n\t\t\t}\n\t\t\titem.next = undefined;\n\t\t\titem.previous = this._tail;\n\t\t\tthis._tail.next = item;\n\t\t\tthis._tail = item;\n\t\t\tthis._state++;\n\t\t}\n\t}\n\n\ttoJSON(): [K, V][] {\n\t\tconst data: [K, V][] = [];\n\n\t\tthis.forEach((value, key) => {\n\t\t\tdata.push([key, value]);\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tfromJSON(data: [K, V][]): void {\n\t\tthis.clear();\n\n\t\tfor (const [key, value] of data) {\n\t\t\tthis.set(key, value);\n\t\t}\n\t}\n}\n\nexport class LRUCache<K, V> extends LinkedMap<K, V> {\n\n\tprivate _limit: number;\n\tprivate _ratio: number;\n\n\tconstructor(limit: number, ratio: number = 1) {\n\t\tsuper();\n\t\tthis._limit = limit;\n\t\tthis._ratio = Math.min(Math.max(0, ratio), 1);\n\t}\n\n\tget limit(): number {\n\t\treturn this._limit;\n\t}\n\n\tset limit(limit: number) {\n\t\tthis._limit = limit;\n\t\tthis.checkTrim();\n\t}\n\n\tget ratio(): number {\n\t\treturn this._ratio;\n\t}\n\n\tset ratio(ratio: number) {\n\t\tthis._ratio = Math.min(Math.max(0, ratio), 1);\n\t\tthis.checkTrim();\n\t}\n\n\toverride get(key: K, touch: Touch = Touch.AsNew): V | undefined {\n\t\treturn super.get(key, touch);\n\t}\n\n\tpeek(key: K): V | undefined {\n\t\treturn super.get(key, Touch.None);\n\t}\n\n\toverride set(key: K, value: V): this {\n\t\tsuper.set(key, value, Touch.AsNew);\n\t\tthis.checkTrim();\n\t\treturn this;\n\t}\n\n\tprivate checkTrim() {\n\t\tif (this.size > this._limit) {\n\t\t\tthis.trimOld(Math.round(this._limit * this._ratio));\n\t\t}\n\t}\n}\n\n/**\n * Wraps the map in type that only implements readonly properties. Useful\n * in the extension host to prevent the consumer from making any mutations.\n */\nexport class ReadonlyMapView<K, V> implements ReadonlyMap<K, V>{\n\treadonly #source: ReadonlyMap<K, V>;\n\n\tpublic get size() {\n\t\treturn this.#source.size;\n\t}\n\n\tconstructor(source: ReadonlyMap<K, V>) {\n\t\tthis.#source = source;\n\t}\n\n\tforEach(callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void, thisArg?: any): void {\n\t\tthis.#source.forEach(callbackfn, thisArg);\n\t}\n\n\tget(key: K): V | undefined {\n\t\treturn this.#source.get(key);\n\t}\n\n\thas(key: K): boolean {\n\t\treturn this.#source.has(key);\n\t}\n\n\tentries(): IterableIterator<[K, V]> {\n\t\treturn this.#source.entries();\n\t}\n\n\tkeys(): IterableIterator<K> {\n\t\treturn this.#source.keys();\n\t}\n\n\tvalues(): IterableIterator<V> {\n\t\treturn this.#source.values();\n\t}\n\n\t[Symbol.iterator](): IterableIterator<[K, V]> {\n\t\treturn this.#source.entries();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\n\nexport namespace Schemas {\n\n\t/**\n\t * A schema that is used for models that exist in memory\n\t * only and that have no correspondence on a server or such.\n\t */\n\texport const inMemory = 'inmemory';\n\n\t/**\n\t * A schema that is used for setting files\n\t */\n\texport const vscode = 'vscode';\n\n\t/**\n\t * A schema that is used for internal private files\n\t */\n\texport const internal = 'private';\n\n\t/**\n\t * A walk-through document.\n\t */\n\texport const walkThrough = 'walkThrough';\n\n\t/**\n\t * An embedded code snippet.\n\t */\n\texport const walkThroughSnippet = 'walkThroughSnippet';\n\n\texport const http = 'http';\n\n\texport const https = 'https';\n\n\texport const file = 'file';\n\n\texport const mailto = 'mailto';\n\n\texport const untitled = 'untitled';\n\n\texport const data = 'data';\n\n\texport const command = 'command';\n\n\texport const vscodeRemote = 'vscode-remote';\n\n\texport const vscodeRemoteResource = 'vscode-remote-resource';\n\n\texport const userData = 'vscode-userdata';\n\n\texport const vscodeCustomEditor = 'vscode-custom-editor';\n\n\texport const vscodeNotebook = 'vscode-notebook';\n\n\texport const vscodeNotebookCell = 'vscode-notebook-cell';\n\n\texport const vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';\n\texport const vscodeNotebookCellOutput = 'vscode-notebook-cell-output';\n\texport const vscodeInteractive = 'vscode-interactive';\n\texport const vscodeInteractiveInput = 'vscode-interactive-input';\n\n\texport const vscodeSettings = 'vscode-settings';\n\n\texport const vscodeWorkspaceTrust = 'vscode-workspace-trust';\n\n\texport const vscodeTerminal = 'vscode-terminal';\n\n\texport const webviewPanel = 'webview-panel';\n\n\t/**\n\t * Scheme used for loading the wrapper html and script in webviews.\n\t */\n\texport const vscodeWebview = 'vscode-webview';\n\n\t/**\n\t * Scheme used for extension pages\n\t */\n\texport const extension = 'extension';\n\n\t/**\n\t * Scheme used as a replacement of `file` scheme to load\n\t * files with our custom protocol handler (desktop only).\n\t */\n\texport const vscodeFileResource = 'vscode-file';\n\n\t/**\n\t * Scheme used for temporary resources\n\t */\n\texport const tmp = 'tmp';\n}\n\nclass RemoteAuthoritiesImpl {\n\tprivate readonly _hosts: { [authority: string]: string | undefined; } = Object.create(null);\n\tprivate readonly _ports: { [authority: string]: number | undefined; } = Object.create(null);\n\tprivate readonly _connectionTokens: { [authority: string]: string | undefined; } = Object.create(null);\n\tprivate _preferredWebSchema: 'http' | 'https' = 'http';\n\tprivate _delegate: ((uri: URI) => URI) | null = null;\n\n\tsetPreferredWebSchema(schema: 'http' | 'https') {\n\t\tthis._preferredWebSchema = schema;\n\t}\n\n\tsetDelegate(delegate: (uri: URI) => URI): void {\n\t\tthis._delegate = delegate;\n\t}\n\n\tset(authority: string, host: string, port: number): void {\n\t\tthis._hosts[authority] = host;\n\t\tthis._ports[authority] = port;\n\t}\n\n\tsetConnectionToken(authority: string, connectionToken: string): void {\n\t\tthis._connectionTokens[authority] = connectionToken;\n\t}\n\n\trewrite(uri: URI): URI {\n\t\tif (this._delegate) {\n\t\t\treturn this._delegate(uri);\n\t\t}\n\t\tconst authority = uri.authority;\n\t\tlet host = this._hosts[authority];\n\t\tif (host && host.indexOf(':') !== -1) {\n\t\t\thost = `[${host}]`;\n\t\t}\n\t\t// const port = this._ports[authority];\n\t\tconst connectionToken = this._connectionTokens[authority];\n\t\tlet query = `path=${encodeURIComponent(uri.path)}`;\n\t\tif (typeof connectionToken === 'string') {\n\t\t\tquery += `&tkn=${encodeURIComponent(connectionToken)}`;\n\t\t}\n\t\t// NOTE@coder: Changed this to work against the current path.\n\t\treturn URI.from({\n\t\t\tscheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,\n\t\t\tauthority: window.location.host,\n\t\t\tpath: `${window.location.pathname.replace(/\\/+$/, '')}/vscode-remote-resource`,\n\t\t\tquery\n\t\t});\n\t}\n}\n\nexport const RemoteAuthorities = new RemoteAuthoritiesImpl();\n\nclass FileAccessImpl {\n\n\tprivate static readonly FALLBACK_AUTHORITY = 'vscode-app';\n\n\t/**\n\t * Returns a URI to use in contexts where the browser is responsible\n\t * for loading (e.g. fetch()) or when used within the DOM.\n\t *\n\t * **Note:** use `dom.ts#asCSSUrl` whenever the URL is to be used in CSS context.\n\t */\n\tasBrowserUri(uri: URI): URI;\n\tasBrowserUri(moduleId: string, moduleIdToUrl: { toUrl(moduleId: string): string }): URI;\n\tasBrowserUri(uriOrModule: URI | string, moduleIdToUrl?: { toUrl(moduleId: string): string }): URI {\n\t\tconst uri = this.toUri(uriOrModule, moduleIdToUrl);\n\n\t\t// Handle remote URIs via `RemoteAuthorities`\n\t\tif (uri.scheme === Schemas.vscodeRemote) {\n\t\t\treturn RemoteAuthorities.rewrite(uri);\n\t\t}\n\n\t\t// Convert to `vscode-file` resource..\n\t\tif (\n\t\t\t// ...only ever for `file` resources\n\t\t\turi.scheme === Schemas.file &&\n\t\t\t(\n\t\t\t\t// ...and we run in native environments\n\t\t\t\tplatform.isNative ||\n\t\t\t\t// ...or web worker extensions on desktop\n\t\t\t\t(typeof platform.globals.importScripts === 'function' && platform.globals.origin === `${Schemas.vscodeFileResource}://${FileAccessImpl.FALLBACK_AUTHORITY}`)\n\t\t\t)\n\t\t) {\n\t\t\treturn uri.with({\n\t\t\t\tscheme: Schemas.vscodeFileResource,\n\t\t\t\t// We need to provide an authority here so that it can serve\n\t\t\t\t// as origin for network and loading matters in chromium.\n\t\t\t\t// If the URI is not coming with an authority already, we\n\t\t\t\t// add our own\n\t\t\t\tauthority: uri.authority || FileAccessImpl.FALLBACK_AUTHORITY,\n\t\t\t\tquery: null,\n\t\t\t\tfragment: null\n\t\t\t});\n\t\t}\n\n\t\treturn uri;\n\t}\n\n\t/**\n\t * Returns the `file` URI to use in contexts where node.js\n\t * is responsible for loading.\n\t */\n\tasFileUri(uri: URI): URI;\n\tasFileUri(moduleId: string, moduleIdToUrl: { toUrl(moduleId: string): string }): URI;\n\tasFileUri(uriOrModule: URI | string, moduleIdToUrl?: { toUrl(moduleId: string): string }): URI {\n\t\tconst uri = this.toUri(uriOrModule, moduleIdToUrl);\n\n\t\t// Only convert the URI if it is `vscode-file:` scheme\n\t\tif (uri.scheme === Schemas.vscodeFileResource) {\n\t\t\treturn uri.with({\n\t\t\t\tscheme: Schemas.file,\n\t\t\t\t// Only preserve the `authority` if it is different from\n\t\t\t\t// our fallback authority. This ensures we properly preserve\n\t\t\t\t// Windows UNC paths that come with their own authority.\n\t\t\t\tauthority: uri.authority !== FileAccessImpl.FALLBACK_AUTHORITY ? uri.authority : null,\n\t\t\t\tquery: null,\n\t\t\t\tfragment: null\n\t\t\t});\n\t\t}\n\n\t\treturn uri;\n\t}\n\n\tprivate toUri(uriOrModule: URI | string, moduleIdToUrl?: { toUrl(moduleId: string): string }): URI {\n\t\tif (URI.isUri(uriOrModule)) {\n\t\t\treturn uriOrModule;\n\t\t}\n\n\t\treturn URI.parse(moduleIdToUrl!.toUrl(uriOrModule));\n\t}\n}\n\nexport const FileAccess = new FileAccessImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as extpath from 'vs/base/common/extpath';\nimport { Schemas } from 'vs/base/common/network';\nimport * as paths from 'vs/base/common/path';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport { compare as strCompare, equalsIgnoreCase } from 'vs/base/common/strings';\nimport { URI, uriToFsPath } from 'vs/base/common/uri';\n\nexport function originalFSPath(uri: URI): string {\n\treturn uriToFsPath(uri, true);\n}\n\n//#region IExtUri\n\nexport interface IExtUri {\n\n\t// --- identity\n\n\t/**\n\t * Compares two uris.\n\t *\n\t * @param uri1 Uri\n\t * @param uri2 Uri\n\t * @param ignoreFragment Ignore the fragment (defaults to `false`)\n\t */\n\tcompare(uri1: URI, uri2: URI, ignoreFragment?: boolean): number;\n\n\t/**\n\t * Tests whether two uris are equal\n\t *\n\t * @param uri1 Uri\n\t * @param uri2 Uri\n\t * @param ignoreFragment Ignore the fragment (defaults to `false`)\n\t */\n\tisEqual(uri1: URI | undefined, uri2: URI | undefined, ignoreFragment?: boolean): boolean;\n\n\t/**\n\t * Tests whether a `candidate` URI is a parent or equal of a given `base` URI.\n\t *\n\t * @param base A uri which is \"longer\" or at least same length as `parentCandidate`\n\t * @param parentCandidate A uri which is \"shorter\" or up to same length as `base`\n\t * @param ignoreFragment Ignore the fragment (defaults to `false`)\n\t */\n\tisEqualOrParent(base: URI, parentCandidate: URI, ignoreFragment?: boolean): boolean;\n\n\t/**\n\t * Creates a key from a resource URI to be used to resource comparison and for resource maps.\n\t * @see {@link ResourceMap}\n\t * @param uri Uri\n\t * @param ignoreFragment Ignore the fragment (defaults to `false`)\n\t */\n\tgetComparisonKey(uri: URI, ignoreFragment?: boolean): string;\n\n\t/**\n\t * Whether the casing of the path-component of the uri should be ignored.\n\t */\n\tignorePathCasing(uri: URI): boolean;\n\n\t// --- path math\n\n\tbasenameOrAuthority(resource: URI): string;\n\n\t/**\n\t * Returns the basename of the path component of an uri.\n\t * @param resource\n\t */\n\tbasename(resource: URI): string;\n\n\t/**\n\t * Returns the extension of the path component of an uri.\n\t * @param resource\n\t */\n\textname(resource: URI): string;\n\t/**\n\t * Return a URI representing the directory of a URI path.\n\t *\n\t * @param resource The input URI.\n\t * @returns The URI representing the directory of the input URI.\n\t */\n\tdirname(resource: URI): URI;\n\t/**\n\t * Join a URI path with path fragments and normalizes the resulting path.\n\t *\n\t * @param resource The input URI.\n\t * @param pathFragment The path fragment to add to the URI path.\n\t * @returns The resulting URI.\n\t */\n\tjoinPath(resource: URI, ...pathFragment: string[]): URI\n\t/**\n\t * Normalizes the path part of a URI: Resolves `.` and `..` elements with directory names.\n\t *\n\t * @param resource The URI to normalize the path.\n\t * @returns The URI with the normalized path.\n\t */\n\tnormalizePath(resource: URI): URI;\n\t/**\n\t *\n\t * @param from\n\t * @param to\n\t */\n\trelativePath(from: URI, to: URI): string | undefined;\n\t/**\n\t * Resolves an absolute or relative path against a base URI.\n\t * The path can be relative or absolute posix or a Windows path\n\t */\n\tresolvePath(base: URI, path: string): URI;\n\n\t// --- misc\n\n\t/**\n\t * Returns true if the URI path is absolute.\n\t */\n\tisAbsolutePath(resource: URI): boolean;\n\t/**\n\t * Tests whether the two authorities are the same\n\t */\n\tisEqualAuthority(a1: string, a2: string): boolean;\n\t/**\n\t * Returns true if the URI path has a trailing path separator\n\t */\n\thasTrailingPathSeparator(resource: URI, sep?: string): boolean;\n\t/**\n\t * Removes a trailing path separator, if there's one.\n\t * Important: Doesn't remove the first slash, it would make the URI invalid\n\t */\n\tremoveTrailingPathSeparator(resource: URI, sep?: string): URI;\n\t/**\n\t * Adds a trailing path separator to the URI if there isn't one already.\n\t * For example, c:\\ would be unchanged, but c:\\users would become c:\\users\\\n\t */\n\taddTrailingPathSeparator(resource: URI, sep?: string): URI;\n}\n\nexport class ExtUri implements IExtUri {\n\n\tconstructor(private _ignorePathCasing: (uri: URI) => boolean) { }\n\n\tcompare(uri1: URI, uri2: URI, ignoreFragment: boolean = false): number {\n\t\tif (uri1 === uri2) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn strCompare(this.getComparisonKey(uri1, ignoreFragment), this.getComparisonKey(uri2, ignoreFragment));\n\t}\n\n\tisEqual(uri1: URI | undefined, uri2: URI | undefined, ignoreFragment: boolean = false): boolean {\n\t\tif (uri1 === uri2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!uri1 || !uri2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.getComparisonKey(uri1, ignoreFragment) === this.getComparisonKey(uri2, ignoreFragment);\n\t}\n\n\tgetComparisonKey(uri: URI, ignoreFragment: boolean = false): string {\n\t\treturn uri.with({\n\t\t\tpath: this._ignorePathCasing(uri) ? uri.path.toLowerCase() : undefined,\n\t\t\tfragment: ignoreFragment ? null : undefined\n\t\t}).toString();\n\t}\n\n\tignorePathCasing(uri: URI): boolean {\n\t\treturn this._ignorePathCasing(uri);\n\t}\n\n\tisEqualOrParent(base: URI, parentCandidate: URI, ignoreFragment: boolean = false): boolean {\n\t\tif (base.scheme === parentCandidate.scheme) {\n\t\t\tif (base.scheme === Schemas.file) {\n\t\t\t\treturn extpath.isEqualOrParent(originalFSPath(base), originalFSPath(parentCandidate), this._ignorePathCasing(base)) && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n\t\t\t}\n\t\t\tif (isEqualAuthority(base.authority, parentCandidate.authority)) {\n\t\t\t\treturn extpath.isEqualOrParent(base.path, parentCandidate.path, this._ignorePathCasing(base), '/') && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// --- path math\n\n\tjoinPath(resource: URI, ...pathFragment: string[]): URI {\n\t\treturn URI.joinPath(resource, ...pathFragment);\n\t}\n\n\tbasenameOrAuthority(resource: URI): string {\n\t\treturn basename(resource) || resource.authority;\n\t}\n\n\tbasename(resource: URI): string {\n\t\treturn paths.posix.basename(resource.path);\n\t}\n\n\textname(resource: URI): string {\n\t\treturn paths.posix.extname(resource.path);\n\t}\n\n\tdirname(resource: URI): URI {\n\t\tif (resource.path.length === 0) {\n\t\t\treturn resource;\n\t\t}\n\t\tlet dirname;\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\tdirname = URI.file(paths.dirname(originalFSPath(resource))).path;\n\t\t} else {\n\t\t\tdirname = paths.posix.dirname(resource.path);\n\t\t\tif (resource.authority && dirname.length && dirname.charCodeAt(0) !== CharCode.Slash) {\n\t\t\t\tconsole.error(`dirname(\"${resource.toString})) resulted in a relative path`);\n\t\t\t\tdirname = '/'; // If a URI contains an authority component, then the path component must either be empty or begin with a CharCode.Slash (\"/\") character\n\t\t\t}\n\t\t}\n\t\treturn resource.with({\n\t\t\tpath: dirname\n\t\t});\n\t}\n\n\tnormalizePath(resource: URI): URI {\n\t\tif (!resource.path.length) {\n\t\t\treturn resource;\n\t\t}\n\t\tlet normalizedPath: string;\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\tnormalizedPath = URI.file(paths.normalize(originalFSPath(resource))).path;\n\t\t} else {\n\t\t\tnormalizedPath = paths.posix.normalize(resource.path);\n\t\t}\n\t\treturn resource.with({\n\t\t\tpath: normalizedPath\n\t\t});\n\t}\n\n\trelativePath(from: URI, to: URI): string | undefined {\n\t\tif (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (from.scheme === Schemas.file) {\n\t\t\tconst relativePath = paths.relative(originalFSPath(from), originalFSPath(to));\n\t\t\treturn isWindows ? extpath.toSlashes(relativePath) : relativePath;\n\t\t}\n\t\tlet fromPath = from.path || '/', toPath = to.path || '/';\n\t\tif (this._ignorePathCasing(from)) {\n\t\t\t// make casing of fromPath match toPath\n\t\t\tlet i = 0;\n\t\t\tfor (const len = Math.min(fromPath.length, toPath.length); i < len; i++) {\n\t\t\t\tif (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {\n\t\t\t\t\tif (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfromPath = toPath.substr(0, i) + fromPath.substr(i);\n\t\t}\n\t\treturn paths.posix.relative(fromPath, toPath);\n\t}\n\n\tresolvePath(base: URI, path: string): URI {\n\t\tif (base.scheme === Schemas.file) {\n\t\t\tconst newURI = URI.file(paths.resolve(originalFSPath(base), path));\n\t\t\treturn base.with({\n\t\t\t\tauthority: newURI.authority,\n\t\t\t\tpath: newURI.path\n\t\t\t});\n\t\t}\n\t\tpath = extpath.toPosixPath(path); // we allow path to be a windows path\n\t\treturn base.with({\n\t\t\tpath: paths.posix.resolve(base.path, path)\n\t\t});\n\t}\n\n\t// --- misc\n\n\tisAbsolutePath(resource: URI): boolean {\n\t\treturn !!resource.path && resource.path[0] === '/';\n\t}\n\n\tisEqualAuthority(a1: string, a2: string) {\n\t\treturn a1 === a2 || equalsIgnoreCase(a1, a2);\n\t}\n\n\thasTrailingPathSeparator(resource: URI, sep: string = paths.sep): boolean {\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\tconst fsp = originalFSPath(resource);\n\t\t\treturn fsp.length > extpath.getRoot(fsp).length && fsp[fsp.length - 1] === sep;\n\t\t} else {\n\t\t\tconst p = resource.path;\n\t\t\treturn (p.length > 1 && p.charCodeAt(p.length - 1) === CharCode.Slash) && !(/^[a-zA-Z]:(\\/$|\\\\$)/.test(resource.fsPath)); // ignore the slash at offset 0\n\t\t}\n\t}\n\n\tremoveTrailingPathSeparator(resource: URI, sep: string = paths.sep): URI {\n\t\t// Make sure that the path isn't a drive letter. A trailing separator there is not removable.\n\t\tif (hasTrailingPathSeparator(resource, sep)) {\n\t\t\treturn resource.with({ path: resource.path.substr(0, resource.path.length - 1) });\n\t\t}\n\t\treturn resource;\n\t}\n\n\taddTrailingPathSeparator(resource: URI, sep: string = paths.sep): URI {\n\t\tlet isRootSep: boolean = false;\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\tconst fsp = originalFSPath(resource);\n\t\t\tisRootSep = ((fsp !== undefined) && (fsp.length === extpath.getRoot(fsp).length) && (fsp[fsp.length - 1] === sep));\n\t\t} else {\n\t\t\tsep = '/';\n\t\t\tconst p = resource.path;\n\t\t\tisRootSep = p.length === 1 && p.charCodeAt(p.length - 1) === CharCode.Slash;\n\t\t}\n\t\tif (!isRootSep && !hasTrailingPathSeparator(resource, sep)) {\n\t\t\treturn resource.with({ path: resource.path + '/' });\n\t\t}\n\t\treturn resource;\n\t}\n}\n\n\n/**\n * Unbiased utility that takes uris \"as they are\". This means it can be interchanged with\n * uri#toString() usages. The following is true\n * ```\n * assertEqual(aUri.toString() === bUri.toString(), exturi.isEqual(aUri, bUri))\n * ```\n */\nexport const extUri = new ExtUri(() => false);\n\n/**\n * BIASED utility that _mostly_ ignored the case of urs paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriBiasedIgnorePathCase = new ExtUri(uri => {\n\t// A file scheme resource is in the same platform as code, so ignore case for non linux platforms\n\t// Resource can be from another platform. Lowering the case as an hack. Should come from File system provider\n\treturn uri.scheme === Schemas.file ? !isLinux : true;\n});\n\n\n/**\n * BIASED utility that always ignores the casing of uris paths. ONLY use this util if you\n * understand what you are doing.\n *\n * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.\n *\n * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient\n * because those uris come from a \"trustworthy source\". When creating unknown uris it's always\n * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path\n * casing matters.\n */\nexport const extUriIgnorePathCase = new ExtUri(_ => true);\n\nexport const isEqual = extUri.isEqual.bind(extUri);\nexport const isEqualOrParent = extUri.isEqualOrParent.bind(extUri);\nexport const getComparisonKey = extUri.getComparisonKey.bind(extUri);\nexport const basenameOrAuthority = extUri.basenameOrAuthority.bind(extUri);\nexport const basename = extUri.basename.bind(extUri);\nexport const extname = extUri.extname.bind(extUri);\nexport const dirname = extUri.dirname.bind(extUri);\nexport const joinPath = extUri.joinPath.bind(extUri);\nexport const normalizePath = extUri.normalizePath.bind(extUri);\nexport const relativePath = extUri.relativePath.bind(extUri);\nexport const resolvePath = extUri.resolvePath.bind(extUri);\nexport const isAbsolutePath = extUri.isAbsolutePath.bind(extUri);\nexport const isEqualAuthority = extUri.isEqualAuthority.bind(extUri);\nexport const hasTrailingPathSeparator = extUri.hasTrailingPathSeparator.bind(extUri);\nexport const removeTrailingPathSeparator = extUri.removeTrailingPathSeparator.bind(extUri);\nexport const addTrailingPathSeparator = extUri.addTrailingPathSeparator.bind(extUri);\n\n//#endregion\n\nexport function distinctParents<T>(items: T[], resourceAccessor: (item: T) => URI): T[] {\n\tconst distinctParents: T[] = [];\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst candidateResource = resourceAccessor(items[i]);\n\t\tif (items.some((otherItem, index) => {\n\t\t\tif (index === i) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn isEqualOrParent(candidateResource, resourceAccessor(otherItem));\n\t\t})) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdistinctParents.push(items[i]);\n\t}\n\n\treturn distinctParents;\n}\n\n/**\n * Data URI related helpers.\n */\nexport namespace DataUri {\n\n\texport const META_DATA_LABEL = 'label';\n\texport const META_DATA_DESCRIPTION = 'description';\n\texport const META_DATA_SIZE = 'size';\n\texport const META_DATA_MIME = 'mime';\n\n\texport function parseMetaData(dataUri: URI): Map<string, string> {\n\t\tconst metadata = new Map<string, string>();\n\n\t\t// Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n\t\t// the metadata is: size:2313;label:SomeLabel;description:SomeDescription\n\t\tconst meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));\n\t\tmeta.split(';').forEach(property => {\n\t\t\tconst [key, value] = property.split(':');\n\t\t\tif (key && value) {\n\t\t\t\tmetadata.set(key, value);\n\t\t\t}\n\t\t});\n\n\t\t// Given a URI of:  data:image/png;size:2313;label:SomeLabel;description:SomeDescription;base64,77+9UE5...\n\t\t// the mime is: image/png\n\t\tconst mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));\n\t\tif (mime) {\n\t\t\tmetadata.set(META_DATA_MIME, mime);\n\t\t}\n\n\t\treturn metadata;\n\t}\n}\n\nexport function toLocalResource(resource: URI, authority: string | undefined, localScheme: string): URI {\n\tif (authority) {\n\t\tlet path = resource.path;\n\t\tif (path && path[0] !== paths.posix.sep) {\n\t\t\tpath = paths.posix.sep + path;\n\t\t}\n\n\t\treturn resource.with({ scheme: localScheme, authority, path });\n\t}\n\n\treturn resource.with({ scheme: localScheme });\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { extUri as defaultExtUri, IExtUri } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\n\nexport function isThenable<T>(obj: unknown): obj is Promise<T> {\n\treturn !!obj && typeof (obj as unknown as Promise<T>).then === 'function';\n}\n\nexport interface CancelablePromise<T> extends Promise<T> {\n\tcancel(): void;\n}\n\nexport function createCancelablePromise<T>(callback: (token: CancellationToken) => Promise<T>): CancelablePromise<T> {\n\tconst source = new CancellationTokenSource();\n\n\tconst thenable = callback(source.token);\n\tconst promise = new Promise<T>((resolve, reject) => {\n\t\tconst subscription = source.token.onCancellationRequested(() => {\n\t\t\tsubscription.dispose();\n\t\t\tsource.dispose();\n\t\t\treject(canceled());\n\t\t});\n\t\tPromise.resolve(thenable).then(value => {\n\t\t\tsubscription.dispose();\n\t\t\tsource.dispose();\n\t\t\tresolve(value);\n\t\t}, err => {\n\t\t\tsubscription.dispose();\n\t\t\tsource.dispose();\n\t\t\treject(err);\n\t\t});\n\t});\n\n\treturn <CancelablePromise<T>>new class {\n\t\tcancel() {\n\t\t\tsource.cancel();\n\t\t}\n\t\tthen<TResult1 = T, TResult2 = never>(resolve?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, reject?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2> {\n\t\t\treturn promise.then(resolve, reject);\n\t\t}\n\t\tcatch<TResult = never>(reject?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult> {\n\t\t\treturn this.then(undefined, reject);\n\t\t}\n\t\tfinally(onfinally?: (() => void) | undefined | null): Promise<T> {\n\t\t\treturn promise.finally(onfinally);\n\t\t}\n\t};\n}\n\nexport function raceCancellation<T>(promise: Promise<T>, token: CancellationToken): Promise<T | undefined>;\nexport function raceCancellation<T>(promise: Promise<T>, token: CancellationToken, defaultValue: T): Promise<T>;\nexport function raceCancellation<T>(promise: Promise<T>, token: CancellationToken, defaultValue?: T): Promise<T | undefined> {\n\treturn Promise.race([promise, new Promise<T | undefined>(resolve => token.onCancellationRequested(() => resolve(defaultValue)))]);\n}\n\n/**\n * Returns as soon as one of the promises is resolved and cancels remaining promises\n */\nexport async function raceCancellablePromises<T>(cancellablePromises: CancelablePromise<T>[]): Promise<T> {\n\tlet resolvedPromiseIndex = -1;\n\tconst promises = cancellablePromises.map((promise, index) => promise.then(result => { resolvedPromiseIndex = index; return result; }));\n\tconst result = await Promise.race(promises);\n\tcancellablePromises.forEach((cancellablePromise, index) => {\n\t\tif (index !== resolvedPromiseIndex) {\n\t\t\tcancellablePromise.cancel();\n\t\t}\n\t});\n\treturn result;\n}\n\nexport function raceTimeout<T>(promise: Promise<T>, timeout: number, onTimeout?: () => void): Promise<T | undefined> {\n\tlet promiseResolve: ((value: T | undefined) => void) | undefined = undefined;\n\n\tconst timer = setTimeout(() => {\n\t\tpromiseResolve?.(undefined);\n\t\tonTimeout?.();\n\t}, timeout);\n\n\treturn Promise.race([\n\t\tpromise.finally(() => clearTimeout(timer)),\n\t\tnew Promise<T | undefined>(resolve => promiseResolve = resolve)\n\t]);\n}\n\nexport function asPromise<T>(callback: () => T | Thenable<T>): Promise<T> {\n\treturn new Promise<T>((resolve, reject) => {\n\t\tconst item = callback();\n\t\tif (isThenable<T>(item)) {\n\t\t\titem.then(resolve, reject);\n\t\t} else {\n\t\t\tresolve(item);\n\t\t}\n\t});\n}\n\nexport interface ITask<T> {\n\t(): T;\n}\n\n/**\n * A helper to prevent accumulation of sequential async tasks.\n *\n * Imagine a mail man with the sole task of delivering letters. As soon as\n * a letter submitted for delivery, he drives to the destination, delivers it\n * and returns to his base. Imagine that during the trip, N more letters were submitted.\n * When the mail man returns, he picks those N letters and delivers them all in a\n * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\n *\n * The throttler implements this via the queue() method, by providing it a task\n * factory. Following the example:\n *\n * \t\tconst throttler = new Throttler();\n * \t\tconst letters = [];\n *\n * \t\tfunction deliver() {\n * \t\t\tconst lettersToDeliver = letters;\n * \t\t\tletters = [];\n * \t\t\treturn makeTheTrip(lettersToDeliver);\n * \t\t}\n *\n * \t\tfunction onLetterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tthrottler.queue(deliver);\n * \t\t}\n */\nexport class Throttler {\n\n\tprivate activePromise: Promise<any> | null;\n\tprivate queuedPromise: Promise<any> | null;\n\tprivate queuedPromiseFactory: ITask<Promise<any>> | null;\n\n\tconstructor() {\n\t\tthis.activePromise = null;\n\t\tthis.queuedPromise = null;\n\t\tthis.queuedPromiseFactory = null;\n\t}\n\n\tqueue<T>(promiseFactory: ITask<Promise<T>>): Promise<T> {\n\t\tif (this.activePromise) {\n\t\t\tthis.queuedPromiseFactory = promiseFactory;\n\n\t\t\tif (!this.queuedPromise) {\n\t\t\t\tconst onComplete = () => {\n\t\t\t\t\tthis.queuedPromise = null;\n\n\t\t\t\t\tconst result = this.queue(this.queuedPromiseFactory!);\n\t\t\t\t\tthis.queuedPromiseFactory = null;\n\n\t\t\t\t\treturn result;\n\t\t\t\t};\n\n\t\t\t\tthis.queuedPromise = new Promise(resolve => {\n\t\t\t\t\tthis.activePromise!.then(onComplete, onComplete).then(resolve);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.queuedPromise!.then(resolve, reject);\n\t\t\t});\n\t\t}\n\n\t\tthis.activePromise = promiseFactory();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.activePromise!.then((result: T) => {\n\t\t\t\tthis.activePromise = null;\n\t\t\t\tresolve(result);\n\t\t\t}, (err: unknown) => {\n\t\t\t\tthis.activePromise = null;\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport class Sequencer {\n\n\tprivate current: Promise<unknown> = Promise.resolve(null);\n\n\tqueue<T>(promiseTask: ITask<Promise<T>>): Promise<T> {\n\t\treturn this.current = this.current.then(() => promiseTask(), () => promiseTask());\n\t}\n}\n\nexport class SequencerByKey<TKey> {\n\n\tprivate promiseMap = new Map<TKey, Promise<unknown>>();\n\n\tqueue<T>(key: TKey, promiseTask: ITask<Promise<T>>): Promise<T> {\n\t\tconst runningPromise = this.promiseMap.get(key) ?? Promise.resolve();\n\t\tconst newPromise = runningPromise\n\t\t\t.catch(() => { })\n\t\t\t.then(promiseTask)\n\t\t\t.finally(() => {\n\t\t\t\tif (this.promiseMap.get(key) === newPromise) {\n\t\t\t\t\tthis.promiseMap.delete(key);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.promiseMap.set(key, newPromise);\n\t\treturn newPromise;\n\t}\n}\n\n/**\n * A helper to delay (debounce) execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tconst delayer = new Delayer(WAITING_PERIOD);\n * \t\tconst letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Delayer<T> implements IDisposable {\n\n\tprivate timeout: any;\n\tprivate completionPromise: Promise<any> | null;\n\tprivate doResolve: ((value?: any | Promise<any>) => void) | null;\n\tprivate doReject: ((err: any) => void) | null;\n\tprivate task: ITask<T | Promise<T>> | null;\n\n\tconstructor(public defaultDelay: number) {\n\t\tthis.timeout = null;\n\t\tthis.completionPromise = null;\n\t\tthis.doResolve = null;\n\t\tthis.doReject = null;\n\t\tthis.task = null;\n\t}\n\n\ttrigger(task: ITask<T | Promise<T>>, delay: number = this.defaultDelay): Promise<T> {\n\t\tthis.task = task;\n\t\tthis.cancelTimeout();\n\n\t\tif (!this.completionPromise) {\n\t\t\tthis.completionPromise = new Promise((resolve, reject) => {\n\t\t\t\tthis.doResolve = resolve;\n\t\t\t\tthis.doReject = reject;\n\t\t\t}).then(() => {\n\t\t\t\tthis.completionPromise = null;\n\t\t\t\tthis.doResolve = null;\n\t\t\t\tif (this.task) {\n\t\t\t\t\tconst task = this.task;\n\t\t\t\t\tthis.task = null;\n\t\t\t\t\treturn task();\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\n\t\tthis.timeout = setTimeout(() => {\n\t\t\tthis.timeout = null;\n\t\t\tif (this.doResolve) {\n\t\t\t\tthis.doResolve(null);\n\t\t\t}\n\t\t}, delay);\n\n\t\treturn this.completionPromise;\n\t}\n\n\tisTriggered(): boolean {\n\t\treturn this.timeout !== null;\n\t}\n\n\tcancel(): void {\n\t\tthis.cancelTimeout();\n\n\t\tif (this.completionPromise) {\n\t\t\tif (this.doReject) {\n\t\t\t\tthis.doReject(canceled());\n\t\t\t}\n\t\t\tthis.completionPromise = null;\n\t\t}\n\t}\n\n\tprivate cancelTimeout(): void {\n\t\tif (this.timeout !== null) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.cancel();\n\t}\n}\n\n/**\n * A helper to delay execution of a task that is being requested often, while\n * preventing accumulation of consecutive executions, while the task runs.\n *\n * The mail man is clever and waits for a certain amount of time, before going\n * out to deliver letters. While the mail man is going out, more letters arrive\n * and can only be delivered once he is back. Once he is back the mail man will\n * do one more trip to deliver the letters that have accumulated while he was out.\n */\nexport class ThrottledDelayer<T> {\n\n\tprivate delayer: Delayer<Promise<T>>;\n\tprivate throttler: Throttler;\n\n\tconstructor(defaultDelay: number) {\n\t\tthis.delayer = new Delayer(defaultDelay);\n\t\tthis.throttler = new Throttler();\n\t}\n\n\ttrigger(promiseFactory: ITask<Promise<T>>, delay?: number): Promise<T> {\n\t\treturn this.delayer.trigger(() => this.throttler.queue(promiseFactory), delay) as unknown as Promise<T>;\n\t}\n\n\tisTriggered(): boolean {\n\t\treturn this.delayer.isTriggered();\n\t}\n\n\tcancel(): void {\n\t\tthis.delayer.cancel();\n\t}\n\n\tdispose(): void {\n\t\tthis.delayer.dispose();\n\t}\n}\n\n/**\n * A barrier that is initially closed and then becomes opened permanently.\n */\nexport class Barrier {\n\n\tprivate _isOpen: boolean;\n\tprivate _promise: Promise<boolean>;\n\tprivate _completePromise!: (v: boolean) => void;\n\n\tconstructor() {\n\t\tthis._isOpen = false;\n\t\tthis._promise = new Promise<boolean>((c, e) => {\n\t\t\tthis._completePromise = c;\n\t\t});\n\t}\n\n\tisOpen(): boolean {\n\t\treturn this._isOpen;\n\t}\n\n\topen(): void {\n\t\tthis._isOpen = true;\n\t\tthis._completePromise(true);\n\t}\n\n\twait(): Promise<boolean> {\n\t\treturn this._promise;\n\t}\n}\n\n/**\n * A barrier that is initially closed and then becomes opened permanently after a certain period of\n * time or when open is called explicitly\n */\nexport class AutoOpenBarrier extends Barrier {\n\n\tprivate readonly _timeout: any;\n\n\tconstructor(autoOpenTimeMs: number) {\n\t\tsuper();\n\t\tthis._timeout = setTimeout(() => this.open(), autoOpenTimeMs);\n\t}\n\n\toverride open(): void {\n\t\tclearTimeout(this._timeout);\n\t\tsuper.open();\n\t}\n}\n\nexport function timeout(millis: number): CancelablePromise<void>;\nexport function timeout(millis: number, token: CancellationToken): Promise<void>;\nexport function timeout(millis: number, token?: CancellationToken): CancelablePromise<void> | Promise<void> {\n\tif (!token) {\n\t\treturn createCancelablePromise(token => timeout(millis, token));\n\t}\n\n\treturn new Promise((resolve, reject) => {\n\t\tconst handle = setTimeout(() => {\n\t\t\tdisposable.dispose();\n\t\t\tresolve();\n\t\t}, millis);\n\t\tconst disposable = token.onCancellationRequested(() => {\n\t\t\tclearTimeout(handle);\n\t\t\tdisposable.dispose();\n\t\t\treject(canceled());\n\t\t});\n\t});\n}\n\nexport function disposableTimeout(handler: () => void, timeout = 0): IDisposable {\n\tconst timer = setTimeout(handler, timeout);\n\treturn toDisposable(() => clearTimeout(timer));\n}\n\n/**\n * Runs the provided list of promise factories in sequential order. The returned\n * promise will complete to an array of results from each promise.\n */\n\nexport function sequence<T>(promiseFactories: ITask<Promise<T>>[]): Promise<T[]> {\n\tconst results: T[] = [];\n\tlet index = 0;\n\tconst len = promiseFactories.length;\n\n\tfunction next(): Promise<T> | null {\n\t\treturn index < len ? promiseFactories[index++]() : null;\n\t}\n\n\tfunction thenHandler(result: any): Promise<any> {\n\t\tif (result !== undefined && result !== null) {\n\t\t\tresults.push(result);\n\t\t}\n\n\t\tconst n = next();\n\t\tif (n) {\n\t\t\treturn n.then(thenHandler);\n\t\t}\n\n\t\treturn Promise.resolve(results);\n\t}\n\n\treturn Promise.resolve(null).then(thenHandler);\n}\n\nexport function first<T>(promiseFactories: ITask<Promise<T>>[], shouldStop: (t: T) => boolean = t => !!t, defaultValue: T | null = null): Promise<T | null> {\n\tlet index = 0;\n\tconst len = promiseFactories.length;\n\n\tconst loop: () => Promise<T | null> = () => {\n\t\tif (index >= len) {\n\t\t\treturn Promise.resolve(defaultValue);\n\t\t}\n\n\t\tconst factory = promiseFactories[index++];\n\t\tconst promise = Promise.resolve(factory());\n\n\t\treturn promise.then(result => {\n\t\t\tif (shouldStop(result)) {\n\t\t\t\treturn Promise.resolve(result);\n\t\t\t}\n\n\t\t\treturn loop();\n\t\t});\n\t};\n\n\treturn loop();\n}\n\n/**\n * Returns the result of the first promise that matches the \"shouldStop\",\n * running all promises in parallel. Supports cancelable promises.\n */\nexport function firstParallel<T>(promiseList: Promise<T>[], shouldStop?: (t: T) => boolean, defaultValue?: T | null): Promise<T | null>;\nexport function firstParallel<T, R extends T>(promiseList: Promise<T>[], shouldStop: (t: T) => t is R, defaultValue?: R | null): Promise<R | null>;\nexport function firstParallel<T>(promiseList: Promise<T>[], shouldStop: (t: T) => boolean = t => !!t, defaultValue: T | null = null) {\n\tif (promiseList.length === 0) {\n\t\treturn Promise.resolve(defaultValue);\n\t}\n\n\tlet todo = promiseList.length;\n\tconst finish = () => {\n\t\ttodo = -1;\n\t\tfor (const promise of promiseList) {\n\t\t\t(promise as Partial<CancelablePromise<T>>).cancel?.();\n\t\t}\n\t};\n\n\treturn new Promise<T | null>((resolve, reject) => {\n\t\tfor (const promise of promiseList) {\n\t\t\tpromise.then(result => {\n\t\t\t\tif (--todo >= 0 && shouldStop(result)) {\n\t\t\t\t\tfinish();\n\t\t\t\t\tresolve(result);\n\t\t\t\t} else if (todo === 0) {\n\t\t\t\t\tresolve(defaultValue);\n\t\t\t\t}\n\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (--todo >= 0) {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t});\n}\n\ninterface ILimitedTaskFactory<T> {\n\tfactory: ITask<Promise<T>>;\n\tc: (value: T | Promise<T>) => void;\n\te: (error?: unknown) => void;\n}\n\n/**\n * A helper to queue N promises and run them all with a max degree of parallelism. The helper\n * ensures that at any time no more than M promises are running at the same time.\n */\nexport class Limiter<T> {\n\n\tprivate _size = 0;\n\tprivate runningPromises: number;\n\tprivate maxDegreeOfParalellism: number;\n\tprivate outstandingPromises: ILimitedTaskFactory<T>[];\n\tprivate readonly _onFinished: Emitter<void>;\n\n\tconstructor(maxDegreeOfParalellism: number) {\n\t\tthis.maxDegreeOfParalellism = maxDegreeOfParalellism;\n\t\tthis.outstandingPromises = [];\n\t\tthis.runningPromises = 0;\n\t\tthis._onFinished = new Emitter<void>();\n\t}\n\n\tget onFinished(): Event<void> {\n\t\treturn this._onFinished.event;\n\t}\n\n\tget size(): number {\n\t\treturn this._size;\n\t}\n\n\tqueue(factory: ITask<Promise<T>>): Promise<T> {\n\t\tthis._size++;\n\n\t\treturn new Promise<T>((c, e) => {\n\t\t\tthis.outstandingPromises.push({ factory, c, e });\n\t\t\tthis.consume();\n\t\t});\n\t}\n\n\tprivate consume(): void {\n\t\twhile (this.outstandingPromises.length && this.runningPromises < this.maxDegreeOfParalellism) {\n\t\t\tconst iLimitedTask = this.outstandingPromises.shift()!;\n\t\t\tthis.runningPromises++;\n\n\t\t\tconst promise = iLimitedTask.factory();\n\t\t\tpromise.then(iLimitedTask.c, iLimitedTask.e);\n\t\t\tpromise.then(() => this.consumed(), () => this.consumed());\n\t\t}\n\t}\n\n\tprivate consumed(): void {\n\t\tthis._size--;\n\t\tthis.runningPromises--;\n\n\t\tif (this.outstandingPromises.length > 0) {\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tthis._onFinished.fire();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis._onFinished.dispose();\n\t}\n}\n\n/**\n * A queue is handles one promise at a time and guarantees that at any time only one promise is executing.\n */\nexport class Queue<T> extends Limiter<T> {\n\n\tconstructor() {\n\t\tsuper(1);\n\t}\n}\n\n/**\n * A helper to organize queues per resource. The ResourceQueue makes sure to manage queues per resource\n * by disposing them once the queue is empty.\n */\nexport class ResourceQueue implements IDisposable {\n\n\tprivate readonly queues = new Map<string, Queue<void>>();\n\n\tqueueFor(resource: URI, extUri: IExtUri = defaultExtUri): Queue<void> {\n\t\tconst key = extUri.getComparisonKey(resource);\n\n\t\tlet queue = this.queues.get(key);\n\t\tif (!queue) {\n\t\t\tqueue = new Queue<void>();\n\t\t\tEvent.once(queue.onFinished)(() => {\n\t\t\t\tqueue?.dispose();\n\t\t\t\tthis.queues.delete(key);\n\t\t\t});\n\n\t\t\tthis.queues.set(key, queue);\n\t\t}\n\n\t\treturn queue;\n\t}\n\n\tdispose(): void {\n\t\tthis.queues.forEach(queue => queue.dispose());\n\t\tthis.queues.clear();\n\t}\n}\n\nexport class TimeoutTimer implements IDisposable {\n\tprivate _token: any;\n\n\tconstructor();\n\tconstructor(runner: () => void, timeout: number);\n\tconstructor(runner?: () => void, timeout?: number) {\n\t\tthis._token = -1;\n\n\t\tif (typeof runner === 'function' && typeof timeout === 'number') {\n\t\t\tthis.setIfNotSet(runner, timeout);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.cancel();\n\t}\n\n\tcancel(): void {\n\t\tif (this._token !== -1) {\n\t\t\tclearTimeout(this._token);\n\t\t\tthis._token = -1;\n\t\t}\n\t}\n\n\tcancelAndSet(runner: () => void, timeout: number): void {\n\t\tthis.cancel();\n\t\tthis._token = setTimeout(() => {\n\t\t\tthis._token = -1;\n\t\t\trunner();\n\t\t}, timeout);\n\t}\n\n\tsetIfNotSet(runner: () => void, timeout: number): void {\n\t\tif (this._token !== -1) {\n\t\t\t// timer is already set\n\t\t\treturn;\n\t\t}\n\t\tthis._token = setTimeout(() => {\n\t\t\tthis._token = -1;\n\t\t\trunner();\n\t\t}, timeout);\n\t}\n}\n\nexport class IntervalTimer implements IDisposable {\n\n\tprivate _token: any;\n\n\tconstructor() {\n\t\tthis._token = -1;\n\t}\n\n\tdispose(): void {\n\t\tthis.cancel();\n\t}\n\n\tcancel(): void {\n\t\tif (this._token !== -1) {\n\t\t\tclearInterval(this._token);\n\t\t\tthis._token = -1;\n\t\t}\n\t}\n\n\tcancelAndSet(runner: () => void, interval: number): void {\n\t\tthis.cancel();\n\t\tthis._token = setInterval(() => {\n\t\t\trunner();\n\t\t}, interval);\n\t}\n}\n\nexport class RunOnceScheduler {\n\n\tprotected runner: ((...args: unknown[]) => void) | null;\n\n\tprivate timeoutToken: any;\n\tprivate timeout: number;\n\tprivate timeoutHandler: () => void;\n\n\tconstructor(runner: (...args: any[]) => void, delay: number) {\n\t\tthis.timeoutToken = -1;\n\t\tthis.runner = runner;\n\t\tthis.timeout = delay;\n\t\tthis.timeoutHandler = this.onTimeout.bind(this);\n\t}\n\n\t/**\n\t * Dispose RunOnceScheduler\n\t */\n\tdispose(): void {\n\t\tthis.cancel();\n\t\tthis.runner = null;\n\t}\n\n\t/**\n\t * Cancel current scheduled runner (if any).\n\t */\n\tcancel(): void {\n\t\tif (this.isScheduled()) {\n\t\t\tclearTimeout(this.timeoutToken);\n\t\t\tthis.timeoutToken = -1;\n\t\t}\n\t}\n\n\t/**\n\t * Cancel previous runner (if any) & schedule a new runner.\n\t */\n\tschedule(delay = this.timeout): void {\n\t\tthis.cancel();\n\t\tthis.timeoutToken = setTimeout(this.timeoutHandler, delay);\n\t}\n\n\tget delay(): number {\n\t\treturn this.timeout;\n\t}\n\n\tset delay(value: number) {\n\t\tthis.timeout = value;\n\t}\n\n\t/**\n\t * Returns true if scheduled.\n\t */\n\tisScheduled(): boolean {\n\t\treturn this.timeoutToken !== -1;\n\t}\n\n\tprivate onTimeout() {\n\t\tthis.timeoutToken = -1;\n\t\tif (this.runner) {\n\t\t\tthis.doRun();\n\t\t}\n\t}\n\n\tprotected doRun(): void {\n\t\tif (this.runner) {\n\t\t\tthis.runner();\n\t\t}\n\t}\n}\n\nexport class RunOnceWorker<T> extends RunOnceScheduler {\n\tprivate units: T[] = [];\n\n\tconstructor(runner: (units: T[]) => void, timeout: number) {\n\t\tsuper(runner, timeout);\n\t}\n\n\twork(unit: T): void {\n\t\tthis.units.push(unit);\n\n\t\tif (!this.isScheduled()) {\n\t\t\tthis.schedule();\n\t\t}\n\t}\n\n\tprotected override doRun(): void {\n\t\tconst units = this.units;\n\t\tthis.units = [];\n\n\t\tif (this.runner) {\n\t\t\tthis.runner(units);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.units = [];\n\n\t\tsuper.dispose();\n\t}\n}\n\n/**\n * The `ThrottledWorker` will accept units of work `T`\n * to handle. The contract is:\n * * there is a maximum of units the worker can handle at once (via `chunkSize`)\n * * after having handled units, the worker needs to rest (via `throttleDelay`)\n */\nexport class ThrottledWorker<T> extends Disposable {\n\n\tprivate readonly pendingWork: T[] = [];\n\n\tprivate readonly throttler = this._register(new MutableDisposable<RunOnceScheduler>());\n\tprivate disposed = false;\n\n\tconstructor(\n\t\tprivate readonly maxWorkChunkSize: number,\n\t\tprivate readonly maxPendingWork: number | undefined,\n\t\tprivate readonly throttleDelay: number,\n\t\tprivate readonly handler: (units: readonly T[]) => void\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * The number of work units that are pending to be processed.\n\t */\n\tget pending(): number { return this.pendingWork.length; }\n\n\t/**\n\t * Add units to be worked on. Use `pending` to figure out\n\t * how many units are not yet processed after this method\n\t * was called.\n\t *\n\t * @returns whether the work was accepted or not. If the\n\t * worker is disposed, it will not accept any more work.\n\t * If the number of pending units would become larger\n\t * than `maxPendingWork`, more work will also not be accepted.\n\t */\n\twork(units: readonly T[]): boolean {\n\t\tif (this.disposed) {\n\t\t\treturn false; // work not accepted: disposed\n\t\t}\n\n\t\t// Check for reaching maximum of pending work\n\t\tif (typeof this.maxPendingWork === 'number') {\n\n\t\t\t// Throttled: simple check if pending + units exceeds max pending\n\t\t\tif (this.throttler.value) {\n\t\t\t\tif (this.pending + units.length > this.maxPendingWork) {\n\t\t\t\t\treturn false; // work not accepted: too much pending work\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Unthrottled: same as throttled, but account for max chunk getting\n\t\t\t// worked on directly without being pending\n\t\t\telse {\n\t\t\t\tif (this.pending + units.length - this.maxWorkChunkSize > this.maxPendingWork) {\n\t\t\t\t\treturn false; // work not accepted: too much pending work\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add to pending units first\n\t\tthis.pendingWork.push(...units);\n\n\t\t// If not throttled, start working directly\n\t\t// Otherwise, when the throttle delay has\n\t\t// past, pending work will be worked again.\n\t\tif (!this.throttler.value) {\n\t\t\tthis.doWork();\n\t\t}\n\n\t\treturn true; // work accepted\n\t}\n\n\tprivate doWork(): void {\n\n\t\t// Extract chunk to handle and handle it\n\t\tthis.handler(this.pendingWork.splice(0, this.maxWorkChunkSize));\n\n\t\t// If we have remaining work, schedule it after a delay\n\t\tif (this.pendingWork.length > 0) {\n\t\t\tthis.throttler.value = new RunOnceScheduler(() => {\n\t\t\t\tthis.throttler.clear();\n\n\t\t\t\tthis.doWork();\n\t\t\t}, this.throttleDelay);\n\t\t\tthis.throttler.value.schedule();\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.disposed = true;\n\t}\n}\n\n//#region -- run on idle tricks ------------\n\nexport interface IdleDeadline {\n\treadonly didTimeout: boolean;\n\ttimeRemaining(): number;\n}\n/**\n * Execute the callback the next time the browser is idle\n */\nexport let runWhenIdle: (callback: (idle: IdleDeadline) => void, timeout?: number) => IDisposable;\n\ndeclare function requestIdleCallback(callback: (args: IdleDeadline) => void, options?: { timeout: number }): number;\ndeclare function cancelIdleCallback(handle: number): void;\n\n(function () {\n\tif (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {\n\t\tconst dummyIdle: IdleDeadline = Object.freeze({\n\t\t\tdidTimeout: true,\n\t\t\ttimeRemaining() { return 15; }\n\t\t});\n\t\trunWhenIdle = (runner) => {\n\t\t\tconst handle = setTimeout(() => runner(dummyIdle));\n\t\t\tlet disposed = false;\n\t\t\treturn {\n\t\t\t\tdispose() {\n\t\t\t\t\tif (disposed) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdisposed = true;\n\t\t\t\t\tclearTimeout(handle);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t} else {\n\t\trunWhenIdle = (runner, timeout?) => {\n\t\t\tconst handle: number = requestIdleCallback(runner, typeof timeout === 'number' ? { timeout } : undefined);\n\t\t\tlet disposed = false;\n\t\t\treturn {\n\t\t\t\tdispose() {\n\t\t\t\t\tif (disposed) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdisposed = true;\n\t\t\t\t\tcancelIdleCallback(handle);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n})();\n\n/**\n * An implementation of the \"idle-until-urgent\"-strategy as introduced\n * here: https://philipwalton.com/articles/idle-until-urgent/\n */\nexport class IdleValue<T> {\n\n\tprivate readonly _executor: () => void;\n\tprivate readonly _handle: IDisposable;\n\n\tprivate _didRun: boolean = false;\n\tprivate _value?: T;\n\tprivate _error: unknown;\n\n\tconstructor(executor: () => T) {\n\t\tthis._executor = () => {\n\t\t\ttry {\n\t\t\t\tthis._value = executor();\n\t\t\t} catch (err) {\n\t\t\t\tthis._error = err;\n\t\t\t} finally {\n\t\t\t\tthis._didRun = true;\n\t\t\t}\n\t\t};\n\t\tthis._handle = runWhenIdle(() => this._executor());\n\t}\n\n\tdispose(): void {\n\t\tthis._handle.dispose();\n\t}\n\n\tget value(): T {\n\t\tif (!this._didRun) {\n\t\t\tthis._handle.dispose();\n\t\t\tthis._executor();\n\t\t}\n\t\tif (this._error) {\n\t\t\tthrow this._error;\n\t\t}\n\t\treturn this._value!;\n\t}\n\n\tget isInitialized(): boolean {\n\t\treturn this._didRun;\n\t}\n}\n\n//#endregion\n\nexport async function retry<T>(task: ITask<Promise<T>>, delay: number, retries: number): Promise<T> {\n\tlet lastError: Error | undefined;\n\n\tfor (let i = 0; i < retries; i++) {\n\t\ttry {\n\t\t\treturn await task();\n\t\t} catch (error) {\n\t\t\tlastError = error;\n\n\t\t\tawait timeout(delay);\n\t\t}\n\t}\n\n\tthrow lastError;\n}\n\n//#region Task Sequentializer\n\ninterface IPendingTask {\n\ttaskId: number;\n\tcancel: () => void;\n\tpromise: Promise<void>;\n}\n\ninterface ISequentialTask {\n\tpromise: Promise<void>;\n\tpromiseResolve: () => void;\n\tpromiseReject: (error: Error) => void;\n\trun: () => Promise<void>;\n}\n\nexport interface ITaskSequentializerWithPendingTask {\n\treadonly pending: Promise<void>;\n}\n\nexport class TaskSequentializer {\n\tprivate _pending?: IPendingTask;\n\tprivate _next?: ISequentialTask;\n\n\thasPending(taskId?: number): this is ITaskSequentializerWithPendingTask {\n\t\tif (!this._pending) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof taskId === 'number') {\n\t\t\treturn this._pending.taskId === taskId;\n\t\t}\n\n\t\treturn !!this._pending;\n\t}\n\n\tget pending(): Promise<void> | undefined {\n\t\treturn this._pending ? this._pending.promise : undefined;\n\t}\n\n\tcancelPending(): void {\n\t\tthis._pending?.cancel();\n\t}\n\n\tsetPending(taskId: number, promise: Promise<void>, onCancel?: () => void,): Promise<void> {\n\t\tthis._pending = { taskId, cancel: () => onCancel?.(), promise };\n\n\t\tpromise.then(() => this.donePending(taskId), () => this.donePending(taskId));\n\n\t\treturn promise;\n\t}\n\n\tprivate donePending(taskId: number): void {\n\t\tif (this._pending && taskId === this._pending.taskId) {\n\n\t\t\t// only set pending to done if the promise finished that is associated with that taskId\n\t\t\tthis._pending = undefined;\n\n\t\t\t// schedule the next task now that we are free if we have any\n\t\t\tthis.triggerNext();\n\t\t}\n\t}\n\n\tprivate triggerNext(): void {\n\t\tif (this._next) {\n\t\t\tconst next = this._next;\n\t\t\tthis._next = undefined;\n\n\t\t\t// Run next task and complete on the associated promise\n\t\t\tnext.run().then(next.promiseResolve, next.promiseReject);\n\t\t}\n\t}\n\n\tsetNext(run: () => Promise<void>): Promise<void> {\n\n\t\t// this is our first next task, so we create associated promise with it\n\t\t// so that we can return a promise that completes when the task has\n\t\t// completed.\n\t\tif (!this._next) {\n\t\t\tlet promiseResolve: () => void;\n\t\t\tlet promiseReject: (error: Error) => void;\n\t\t\tconst promise = new Promise<void>((resolve, reject) => {\n\t\t\t\tpromiseResolve = resolve;\n\t\t\t\tpromiseReject = reject;\n\t\t\t});\n\n\t\t\tthis._next = {\n\t\t\t\trun,\n\t\t\t\tpromise,\n\t\t\t\tpromiseResolve: promiseResolve!,\n\t\t\t\tpromiseReject: promiseReject!\n\t\t\t};\n\t\t}\n\n\t\t// we have a previous next task, just overwrite it\n\t\telse {\n\t\t\tthis._next.run = run;\n\t\t}\n\n\t\treturn this._next.promise;\n\t}\n}\n\n//#endregion\n\n//#region\n\n/**\n * The `IntervalCounter` allows to count the number\n * of calls to `increment()` over a duration of\n * `interval`. This utility can be used to conditionally\n * throttle a frequent task when a certain threshold\n * is reached.\n */\nexport class IntervalCounter {\n\n\tprivate lastIncrementTime = 0;\n\n\tprivate value = 0;\n\n\tconstructor(private readonly interval: number) { }\n\n\tincrement(): number {\n\t\tconst now = Date.now();\n\n\t\t// We are outside of the range of `interval` and as such\n\t\t// start counting from 0 and remember the time\n\t\tif (now - this.lastIncrementTime > this.interval) {\n\t\t\tthis.lastIncrementTime = now;\n\t\t\tthis.value = 0;\n\t\t}\n\n\t\tthis.value++;\n\n\t\treturn this.value;\n\t}\n}\n\n//#endregion\n\n//#region\n\nexport type ValueCallback<T = unknown> = (value: T | Promise<T>) => void;\n\n/**\n * Creates a promise whose resolution or rejection can be controlled imperatively.\n */\nexport class DeferredPromise<T> {\n\n\tprivate completeCallback!: ValueCallback<T>;\n\tprivate errorCallback!: (err: unknown) => void;\n\tprivate rejected = false;\n\tprivate resolved = false;\n\n\tpublic get isRejected() {\n\t\treturn this.rejected;\n\t}\n\n\tpublic get isResolved() {\n\t\treturn this.resolved;\n\t}\n\n\tpublic get isSettled() {\n\t\treturn this.rejected || this.resolved;\n\t}\n\n\tpublic p: Promise<T>;\n\n\tconstructor() {\n\t\tthis.p = new Promise<T>((c, e) => {\n\t\t\tthis.completeCallback = c;\n\t\t\tthis.errorCallback = e;\n\t\t});\n\t}\n\n\tpublic complete(value: T) {\n\t\treturn new Promise<void>(resolve => {\n\t\t\tthis.completeCallback(value);\n\t\t\tthis.resolved = true;\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic error(err: unknown) {\n\t\treturn new Promise<void>(resolve => {\n\t\t\tthis.errorCallback(err);\n\t\t\tthis.rejected = true;\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic cancel() {\n\t\tnew Promise<void>(resolve => {\n\t\t\tthis.errorCallback(canceled());\n\t\t\tthis.rejected = true;\n\t\t\tresolve();\n\t\t});\n\t}\n}\n\n//#endregion\n\n//#region Promises\n\nexport namespace Promises {\n\n\t/**\n\t * A drop-in replacement for `Promise.all` with the only difference\n\t * that the method awaits every promise to either fulfill or reject.\n\t *\n\t * Similar to `Promise.all`, only the first error will be returned\n\t * if any.\n\t */\n\texport async function settled<T>(promises: Promise<T>[]): Promise<T[]> {\n\t\tlet firstError: Error | undefined = undefined;\n\n\t\tconst result = await Promise.all(promises.map(promise => promise.then(value => value, error => {\n\t\t\tif (!firstError) {\n\t\t\t\tfirstError = error;\n\t\t\t}\n\n\t\t\treturn undefined; // do not rethrow so that other promises can settle\n\t\t})));\n\n\t\tif (typeof firstError !== 'undefined') {\n\t\t\tthrow firstError;\n\t\t}\n\n\t\treturn result as unknown as T[]; // cast is needed and protected by the `throw` above\n\t}\n}\n\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isThenable } from 'vs/base/common/async';\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as extpath from 'vs/base/common/extpath';\nimport { LRUCache } from 'vs/base/common/map';\nimport * as paths from 'vs/base/common/path';\nimport * as strings from 'vs/base/common/strings';\n\nexport interface IExpression {\n\t[pattern: string]: boolean | SiblingClause;\n}\n\nexport interface IRelativePattern {\n\tbase: string;\n\tpattern: string;\n}\n\nexport function getEmptyExpression(): IExpression {\n\treturn Object.create(null);\n}\n\nexport interface SiblingClause {\n\twhen: string;\n}\n\nconst GLOBSTAR = '**';\nconst GLOB_SPLIT = '/';\nconst PATH_REGEX = '[/\\\\\\\\]';\t\t// any slash or backslash\nconst NO_PATH_REGEX = '[^/\\\\\\\\]';\t// any non-slash and non-backslash\nconst ALL_FORWARD_SLASHES = /\\//g;\n\nfunction starsToRegExp(starCount: number): string {\n\tswitch (starCount) {\n\t\tcase 0:\n\t\t\treturn '';\n\t\tcase 1:\n\t\t\treturn `${NO_PATH_REGEX}*?`; // 1 star matches any number of characters except path separator (/ and \\) - non greedy (?)\n\t\tdefault:\n\t\t\t// Matches:  (Path Sep OR Path Val followed by Path Sep OR Path Sep followed by Path Val) 0-many times\n\t\t\t// Group is non capturing because we don't need to capture at all (?:...)\n\t\t\t// Overall we use non-greedy matching because it could be that we match too much\n\t\t\treturn `(?:${PATH_REGEX}|${NO_PATH_REGEX}+${PATH_REGEX}|${PATH_REGEX}${NO_PATH_REGEX}+)*?`;\n\t}\n}\n\nexport function splitGlobAware(pattern: string, splitChar: string): string[] {\n\tif (!pattern) {\n\t\treturn [];\n\t}\n\n\tconst segments: string[] = [];\n\n\tlet inBraces = false;\n\tlet inBrackets = false;\n\n\tlet curVal = '';\n\tfor (const char of pattern) {\n\t\tswitch (char) {\n\t\t\tcase splitChar:\n\t\t\t\tif (!inBraces && !inBrackets) {\n\t\t\t\t\tsegments.push(curVal);\n\t\t\t\t\tcurVal = '';\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '{':\n\t\t\t\tinBraces = true;\n\t\t\t\tbreak;\n\t\t\tcase '}':\n\t\t\t\tinBraces = false;\n\t\t\t\tbreak;\n\t\t\tcase '[':\n\t\t\t\tinBrackets = true;\n\t\t\t\tbreak;\n\t\t\tcase ']':\n\t\t\t\tinBrackets = false;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tcurVal += char;\n\t}\n\n\t// Tail\n\tif (curVal) {\n\t\tsegments.push(curVal);\n\t}\n\n\treturn segments;\n}\n\nfunction parseRegExp(pattern: string): string {\n\tif (!pattern) {\n\t\treturn '';\n\t}\n\n\tlet regEx = '';\n\n\t// Split up into segments for each slash found\n\tconst segments = splitGlobAware(pattern, GLOB_SPLIT);\n\n\t// Special case where we only have globstars\n\tif (segments.every(s => s === GLOBSTAR)) {\n\t\tregEx = '.*';\n\t}\n\n\t// Build regex over segments\n\telse {\n\t\tlet previousSegmentWasGlobStar = false;\n\t\tsegments.forEach((segment, index) => {\n\n\t\t\t// Globstar is special\n\t\t\tif (segment === GLOBSTAR) {\n\n\t\t\t\t// if we have more than one globstar after another, just ignore it\n\t\t\t\tif (!previousSegmentWasGlobStar) {\n\t\t\t\t\tregEx += starsToRegExp(2);\n\t\t\t\t\tpreviousSegmentWasGlobStar = true;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// States\n\t\t\tlet inBraces = false;\n\t\t\tlet braceVal = '';\n\n\t\t\tlet inBrackets = false;\n\t\t\tlet bracketVal = '';\n\n\t\t\tfor (const char of segment) {\n\t\t\t\t// Support brace expansion\n\t\t\t\tif (char !== '}' && inBraces) {\n\t\t\t\t\tbraceVal += char;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Support brackets\n\t\t\t\tif (inBrackets && (char !== ']' || !bracketVal) /* ] is literally only allowed as first character in brackets to match it */) {\n\t\t\t\t\tlet res: string;\n\n\t\t\t\t\t// range operator\n\t\t\t\t\tif (char === '-') {\n\t\t\t\t\t\tres = char;\n\t\t\t\t\t}\n\n\t\t\t\t\t// negation operator (only valid on first index in bracket)\n\t\t\t\t\telse if ((char === '^' || char === '!') && !bracketVal) {\n\t\t\t\t\t\tres = '^';\n\t\t\t\t\t}\n\n\t\t\t\t\t// glob split matching is not allowed within character ranges\n\t\t\t\t\t// see http://man7.org/linux/man-pages/man7/glob.7.html\n\t\t\t\t\telse if (char === GLOB_SPLIT) {\n\t\t\t\t\t\tres = '';\n\t\t\t\t\t}\n\n\t\t\t\t\t// anything else gets escaped\n\t\t\t\t\telse {\n\t\t\t\t\t\tres = strings.escapeRegExpCharacters(char);\n\t\t\t\t\t}\n\n\t\t\t\t\tbracketVal += res;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tswitch (char) {\n\t\t\t\t\tcase '{':\n\t\t\t\t\t\tinBraces = true;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '[':\n\t\t\t\t\t\tinBrackets = true;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '}':\n\t\t\t\t\t\tconst choices = splitGlobAware(braceVal, ',');\n\n\t\t\t\t\t\t// Converts {foo,bar} => [foo|bar]\n\t\t\t\t\t\tconst braceRegExp = `(?:${choices.map(c => parseRegExp(c)).join('|')})`;\n\n\t\t\t\t\t\tregEx += braceRegExp;\n\n\t\t\t\t\t\tinBraces = false;\n\t\t\t\t\t\tbraceVal = '';\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ']':\n\t\t\t\t\t\tregEx += ('[' + bracketVal + ']');\n\n\t\t\t\t\t\tinBrackets = false;\n\t\t\t\t\t\tbracketVal = '';\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\tregEx += NO_PATH_REGEX; // 1 ? matches any single character except path separator (/ and \\)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tregEx += starsToRegExp(1);\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tregEx += strings.escapeRegExpCharacters(char);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Tail: Add the slash we had split on if there is more to come and the remaining pattern is not a globstar\n\t\t\t// For example if pattern: some/**/*.js we want the \"/\" after some to be included in the RegEx to prevent\n\t\t\t// a folder called \"something\" to match as well.\n\t\t\t// However, if pattern: some/**, we tolerate that we also match on \"something\" because our globstar behaviour\n\t\t\t// is to match 0-N segments.\n\t\t\tif (index < segments.length - 1 && (segments[index + 1] !== GLOBSTAR || index + 2 < segments.length)) {\n\t\t\t\tregEx += PATH_REGEX;\n\t\t\t}\n\n\t\t\t// reset state\n\t\t\tpreviousSegmentWasGlobStar = false;\n\t\t});\n\t}\n\n\treturn regEx;\n}\n\n// regexes to check for trivial glob patterns that just check for String#endsWith\nconst T1 = /^\\*\\*\\/\\*\\.[\\w\\.-]+$/; \t\t\t\t\t\t   \t\t\t// **/*.something\nconst T2 = /^\\*\\*\\/([\\w\\.-]+)\\/?$/; \t\t\t\t\t\t\t   \t\t\t// **/something\nconst T3 = /^{\\*\\*\\/[\\*\\.]?[\\w\\.-]+\\/?(,\\*\\*\\/[\\*\\.]?[\\w\\.-]+\\/?)*}$/; \t// {**/*.something,**/*.else} or {**/package.json,**/project.json}\nconst T3_2 = /^{\\*\\*\\/[\\*\\.]?[\\w\\.-]+(\\/(\\*\\*)?)?(,\\*\\*\\/[\\*\\.]?[\\w\\.-]+(\\/(\\*\\*)?)?)*}$/; \t// Like T3, with optional trailing /**\nconst T4 = /^\\*\\*((\\/[\\w\\.-]+)+)\\/?$/; \t\t\t\t\t\t   \t\t\t// **/something/else\nconst T5 = /^([\\w\\.-]+(\\/[\\w\\.-]+)*)\\/?$/; \t\t\t\t\t\t   \t\t// something/else\n\nexport type ParsedPattern = (path: string, basename?: string) => boolean;\n\n// The ParsedExpression returns a Promise iff hasSibling returns a Promise.\nexport type ParsedExpression = (path: string, basename?: string, hasSibling?: (name: string) => boolean | Promise<boolean>) => string | null | Promise<string | null> /* the matching pattern */;\n\nexport interface IGlobOptions {\n\t/**\n\t * Simplify patterns for use as exclusion filters during tree traversal to skip entire subtrees. Cannot be used outside of a tree traversal.\n\t */\n\ttrimForExclusions?: boolean;\n}\n\ninterface ParsedStringPattern {\n\t(path: string, basename?: string): string | null | Promise<string | null> /* the matching pattern */;\n\tbasenames?: string[];\n\tpatterns?: string[];\n\tallBasenames?: string[];\n\tallPaths?: string[];\n}\ninterface ParsedExpressionPattern {\n\t(path: string, basename?: string, name?: string, hasSibling?: (name: string) => boolean | Promise<boolean>): string | null | Promise<string | null> /* the matching pattern */;\n\trequiresSiblings?: boolean;\n\tallBasenames?: string[];\n\tallPaths?: string[];\n}\n\nconst CACHE = new LRUCache<string, ParsedStringPattern>(10000); // bounded to 10000 elements\n\nconst FALSE = function () {\n\treturn false;\n};\n\nconst NULL = function (): string | null {\n\treturn null;\n};\n\nfunction parsePattern(arg1: string | IRelativePattern, options: IGlobOptions): ParsedStringPattern {\n\tif (!arg1) {\n\t\treturn NULL;\n\t}\n\n\t// Handle IRelativePattern\n\tlet pattern: string;\n\tif (typeof arg1 !== 'string') {\n\t\tpattern = arg1.pattern;\n\t} else {\n\t\tpattern = arg1;\n\t}\n\n\t// Whitespace trimming\n\tpattern = pattern.trim();\n\n\t// Check cache\n\tconst patternKey = `${pattern}_${!!options.trimForExclusions}`;\n\tlet parsedPattern = CACHE.get(patternKey);\n\tif (parsedPattern) {\n\t\treturn wrapRelativePattern(parsedPattern, arg1);\n\t}\n\n\t// Check for Trivials\n\tlet match: RegExpExecArray | null;\n\tif (T1.test(pattern)) { // common pattern: **/*.txt just need endsWith check\n\t\tconst base = pattern.substr(4); // '**/*'.length === 4\n\t\tparsedPattern = function (path, basename) {\n\t\t\treturn typeof path === 'string' && path.endsWith(base) ? pattern : null;\n\t\t};\n\t} else if (match = T2.exec(trimForExclusions(pattern, options))) { // common pattern: **/some.txt just need basename check\n\t\tparsedPattern = trivia2(match[1], pattern);\n\t} else if ((options.trimForExclusions ? T3_2 : T3).test(pattern)) { // repetition of common patterns (see above) {**/*.txt,**/*.png}\n\t\tparsedPattern = trivia3(pattern, options);\n\t} else if (match = T4.exec(trimForExclusions(pattern, options))) { // common pattern: **/something/else just need endsWith check\n\t\tparsedPattern = trivia4and5(match[1].substr(1), pattern, true);\n\t} else if (match = T5.exec(trimForExclusions(pattern, options))) { // common pattern: something/else just need equals check\n\t\tparsedPattern = trivia4and5(match[1], pattern, false);\n\t}\n\n\t// Otherwise convert to pattern\n\telse {\n\t\tparsedPattern = toRegExp(pattern);\n\t}\n\n\t// Cache\n\tCACHE.set(patternKey, parsedPattern);\n\n\treturn wrapRelativePattern(parsedPattern, arg1);\n}\n\nfunction wrapRelativePattern(parsedPattern: ParsedStringPattern, arg2: string | IRelativePattern): ParsedStringPattern {\n\tif (typeof arg2 === 'string') {\n\t\treturn parsedPattern;\n\t}\n\n\treturn function (path, basename) {\n\t\tif (!extpath.isEqualOrParent(path, arg2.base)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn parsedPattern(paths.relative(arg2.base, path), basename);\n\t};\n}\n\nfunction trimForExclusions(pattern: string, options: IGlobOptions): string {\n\treturn options.trimForExclusions && pattern.endsWith('/**') ? pattern.substr(0, pattern.length - 2) : pattern; // dropping **, tailing / is dropped later\n}\n\n// common pattern: **/some.txt just need basename check\nfunction trivia2(base: string, originalPattern: string): ParsedStringPattern {\n\tconst slashBase = `/${base}`;\n\tconst backslashBase = `\\\\${base}`;\n\tconst parsedPattern: ParsedStringPattern = function (path, basename) {\n\t\tif (typeof path !== 'string') {\n\t\t\treturn null;\n\t\t}\n\t\tif (basename) {\n\t\t\treturn basename === base ? originalPattern : null;\n\t\t}\n\t\treturn path === base || path.endsWith(slashBase) || path.endsWith(backslashBase) ? originalPattern : null;\n\t};\n\tconst basenames = [base];\n\tparsedPattern.basenames = basenames;\n\tparsedPattern.patterns = [originalPattern];\n\tparsedPattern.allBasenames = basenames;\n\treturn parsedPattern;\n}\n\n// repetition of common patterns (see above) {**/*.txt,**/*.png}\nfunction trivia3(pattern: string, options: IGlobOptions): ParsedStringPattern {\n\tconst parsedPatterns = aggregateBasenameMatches(pattern.slice(1, -1).split(',')\n\t\t.map(pattern => parsePattern(pattern, options))\n\t\t.filter(pattern => pattern !== NULL), pattern);\n\tconst n = parsedPatterns.length;\n\tif (!n) {\n\t\treturn NULL;\n\t}\n\tif (n === 1) {\n\t\treturn <ParsedStringPattern>parsedPatterns[0];\n\t}\n\tconst parsedPattern: ParsedStringPattern = function (path: string, basename?: string) {\n\t\tfor (let i = 0, n = parsedPatterns.length; i < n; i++) {\n\t\t\tif ((<ParsedStringPattern>parsedPatterns[i])(path, basename)) {\n\t\t\t\treturn pattern;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\tconst withBasenames = parsedPatterns.find(pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n\tif (withBasenames) {\n\t\tparsedPattern.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n\t}\n\tconst allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n\tif (allPaths.length) {\n\t\tparsedPattern.allPaths = allPaths;\n\t}\n\treturn parsedPattern;\n}\n\n// common patterns: **/something/else just need endsWith check, something/else just needs and equals check\nfunction trivia4and5(targetPath: string, pattern: string, matchPathEnds: boolean): ParsedStringPattern {\n\tconst usingPosixSep = paths.sep === paths.posix.sep;\n\tconst nativePath = usingPosixSep ? targetPath : targetPath.replace(ALL_FORWARD_SLASHES, paths.sep);\n\tconst nativePathEnd = paths.sep + nativePath;\n\tconst targetPathEnd = paths.posix.sep + targetPath;\n\n\tconst parsedPattern: ParsedStringPattern = matchPathEnds ? function (testPath, basename) {\n\t\treturn typeof testPath === 'string' &&\n\t\t\t((testPath === nativePath || testPath.endsWith(nativePathEnd))\n\t\t\t\t|| !usingPosixSep && (testPath === targetPath || testPath.endsWith(targetPathEnd)))\n\t\t\t? pattern : null;\n\t} : function (testPath, basename) {\n\t\treturn typeof testPath === 'string' &&\n\t\t\t(testPath === nativePath\n\t\t\t\t|| (!usingPosixSep && testPath === targetPath))\n\t\t\t? pattern : null;\n\t};\n\tparsedPattern.allPaths = [(matchPathEnds ? '*/' : './') + targetPath];\n\treturn parsedPattern;\n}\n\nfunction toRegExp(pattern: string): ParsedStringPattern {\n\ttry {\n\t\tconst regExp = new RegExp(`^${parseRegExp(pattern)}$`);\n\t\treturn function (path: string) {\n\t\t\tregExp.lastIndex = 0; // reset RegExp to its initial state to reuse it!\n\t\t\treturn typeof path === 'string' && regExp.test(path) ? pattern : null;\n\t\t};\n\t} catch (error) {\n\t\treturn NULL;\n\t}\n}\n\n/**\n * Simplified glob matching. Supports a subset of glob patterns:\n * - * matches anything inside a path segment\n * - ? matches 1 character inside a path segment\n * - ** matches anything including an empty path segment\n * - simple brace expansion ({js,ts} => js or ts)\n * - character ranges (using [...])\n */\nexport function match(pattern: string | IRelativePattern, path: string): boolean;\nexport function match(expression: IExpression, path: string, hasSibling?: (name: string) => boolean): string /* the matching pattern */;\nexport function match(arg1: string | IExpression | IRelativePattern, path: string, hasSibling?: (name: string) => boolean): boolean | string | null | Promise<string | null> {\n\tif (!arg1 || typeof path !== 'string') {\n\t\treturn false;\n\t}\n\n\treturn parse(<IExpression>arg1)(path, undefined, hasSibling);\n}\n\n/**\n * Simplified glob matching. Supports a subset of glob patterns:\n * - * matches anything inside a path segment\n * - ? matches 1 character inside a path segment\n * - ** matches anything including an empty path segment\n * - simple brace expansion ({js,ts} => js or ts)\n * - character ranges (using [...])\n */\nexport function parse(pattern: string | IRelativePattern, options?: IGlobOptions): ParsedPattern;\nexport function parse(expression: IExpression, options?: IGlobOptions): ParsedExpression;\nexport function parse(arg1: string | IExpression | IRelativePattern, options: IGlobOptions = {}): ParsedPattern | ParsedExpression {\n\tif (!arg1) {\n\t\treturn FALSE;\n\t}\n\n\t// Glob with String\n\tif (typeof arg1 === 'string' || isRelativePattern(arg1)) {\n\t\tconst parsedPattern = parsePattern(arg1, options);\n\t\tif (parsedPattern === NULL) {\n\t\t\treturn FALSE;\n\t\t}\n\t\tconst resultPattern: ParsedPattern & { allBasenames?: string[]; allPaths?: string[]; } = function (path: string, basename?: string) {\n\t\t\treturn !!parsedPattern(path, basename);\n\t\t};\n\t\tif (parsedPattern.allBasenames) {\n\t\t\tresultPattern.allBasenames = parsedPattern.allBasenames;\n\t\t}\n\t\tif (parsedPattern.allPaths) {\n\t\t\tresultPattern.allPaths = parsedPattern.allPaths;\n\t\t}\n\t\treturn resultPattern;\n\t}\n\n\t// Glob with Expression\n\treturn parsedExpression(<IExpression>arg1, options);\n}\n\nexport function hasSiblingPromiseFn(siblingsFn?: () => Promise<string[]>) {\n\tif (!siblingsFn) {\n\t\treturn undefined;\n\t}\n\n\tlet siblings: Promise<Record<string, true>>;\n\treturn (name: string) => {\n\t\tif (!siblings) {\n\t\t\tsiblings = (siblingsFn() || Promise.resolve([]))\n\t\t\t\t.then(list => list ? listToMap(list) : {});\n\t\t}\n\t\treturn siblings.then(map => !!map[name]);\n\t};\n}\n\nexport function hasSiblingFn(siblingsFn?: () => string[]) {\n\tif (!siblingsFn) {\n\t\treturn undefined;\n\t}\n\n\tlet siblings: Record<string, true>;\n\treturn (name: string) => {\n\t\tif (!siblings) {\n\t\t\tconst list = siblingsFn();\n\t\t\tsiblings = list ? listToMap(list) : {};\n\t\t}\n\t\treturn !!siblings[name];\n\t};\n}\n\nfunction listToMap(list: string[]) {\n\tconst map: Record<string, true> = {};\n\tfor (const key of list) {\n\t\tmap[key] = true;\n\t}\n\treturn map;\n}\n\nexport function isRelativePattern(obj: unknown): obj is IRelativePattern {\n\tconst rp = obj as IRelativePattern;\n\n\treturn rp && typeof rp.base === 'string' && typeof rp.pattern === 'string';\n}\n\nexport function getBasenameTerms(patternOrExpression: ParsedPattern | ParsedExpression): string[] {\n\treturn (<ParsedStringPattern>patternOrExpression).allBasenames || [];\n}\n\nexport function getPathTerms(patternOrExpression: ParsedPattern | ParsedExpression): string[] {\n\treturn (<ParsedStringPattern>patternOrExpression).allPaths || [];\n}\n\nfunction parsedExpression(expression: IExpression, options: IGlobOptions): ParsedExpression {\n\tconst parsedPatterns = aggregateBasenameMatches(Object.getOwnPropertyNames(expression)\n\t\t.map(pattern => parseExpressionPattern(pattern, expression[pattern], options))\n\t\t.filter(pattern => pattern !== NULL));\n\n\tconst n = parsedPatterns.length;\n\tif (!n) {\n\t\treturn NULL;\n\t}\n\n\tif (!parsedPatterns.some(parsedPattern => !!(<ParsedExpressionPattern>parsedPattern).requiresSiblings)) {\n\t\tif (n === 1) {\n\t\t\treturn <ParsedStringPattern>parsedPatterns[0];\n\t\t}\n\n\t\tconst resultExpression: ParsedStringPattern = function (path: string, basename?: string) {\n\t\t\tfor (let i = 0, n = parsedPatterns.length; i < n; i++) {\n\t\t\t\t// Pattern matches path\n\t\t\t\tconst result = (<ParsedStringPattern>parsedPatterns[i])(path, basename);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\tconst withBasenames = parsedPatterns.find(pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n\t\tif (withBasenames) {\n\t\t\tresultExpression.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n\t\t}\n\n\t\tconst allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n\t\tif (allPaths.length) {\n\t\t\tresultExpression.allPaths = allPaths;\n\t\t}\n\n\t\treturn resultExpression;\n\t}\n\n\tconst resultExpression: ParsedStringPattern = function (path: string, basename?: string, hasSibling?: (name: string) => boolean | Promise<boolean>) {\n\t\tlet name: string | undefined = undefined;\n\n\t\tfor (let i = 0, n = parsedPatterns.length; i < n; i++) {\n\t\t\t// Pattern matches path\n\t\t\tconst parsedPattern = (<ParsedExpressionPattern>parsedPatterns[i]);\n\t\t\tif (parsedPattern.requiresSiblings && hasSibling) {\n\t\t\t\tif (!basename) {\n\t\t\t\t\tbasename = paths.basename(path);\n\t\t\t\t}\n\t\t\t\tif (!name) {\n\t\t\t\t\tname = basename.substr(0, basename.length - paths.extname(path).length);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result = parsedPattern(path, basename, name, hasSibling);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tconst withBasenames = parsedPatterns.find(pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n\tif (withBasenames) {\n\t\tresultExpression.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n\t}\n\n\tconst allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n\tif (allPaths.length) {\n\t\tresultExpression.allPaths = allPaths;\n\t}\n\n\treturn resultExpression;\n}\n\nfunction parseExpressionPattern(pattern: string, value: boolean | SiblingClause, options: IGlobOptions): (ParsedStringPattern | ParsedExpressionPattern) {\n\tif (value === false) {\n\t\treturn NULL; // pattern is disabled\n\t}\n\n\tconst parsedPattern = parsePattern(pattern, options);\n\tif (parsedPattern === NULL) {\n\t\treturn NULL;\n\t}\n\n\t// Expression Pattern is <boolean>\n\tif (typeof value === 'boolean') {\n\t\treturn parsedPattern;\n\t}\n\n\t// Expression Pattern is <SiblingClause>\n\tif (value) {\n\t\tconst when = (<SiblingClause>value).when;\n\t\tif (typeof when === 'string') {\n\t\t\tconst result: ParsedExpressionPattern = (path: string, basename?: string, name?: string, hasSibling?: (name: string) => boolean | Promise<boolean>) => {\n\t\t\t\tif (!hasSibling || !parsedPattern(path, basename)) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst clausePattern = when.replace('$(basename)', name!);\n\t\t\t\tconst matched = hasSibling(clausePattern);\n\t\t\t\treturn isThenable(matched) ?\n\t\t\t\t\tmatched.then(m => m ? pattern : null) :\n\t\t\t\t\tmatched ? pattern : null;\n\t\t\t};\n\t\t\tresult.requiresSiblings = true;\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t// Expression is Anything\n\treturn parsedPattern;\n}\n\nfunction aggregateBasenameMatches(parsedPatterns: Array<ParsedStringPattern | ParsedExpressionPattern>, result?: string): Array<ParsedStringPattern | ParsedExpressionPattern> {\n\tconst basenamePatterns = parsedPatterns.filter(parsedPattern => !!(<ParsedStringPattern>parsedPattern).basenames);\n\tif (basenamePatterns.length < 2) {\n\t\treturn parsedPatterns;\n\t}\n\n\tconst basenames = basenamePatterns.reduce<string[]>((all, current) => {\n\t\tconst basenames = (<ParsedStringPattern>current).basenames;\n\t\treturn basenames ? all.concat(basenames) : all;\n\t}, <string[]>[]);\n\tlet patterns: string[];\n\tif (result) {\n\t\tpatterns = [];\n\t\tfor (let i = 0, n = basenames.length; i < n; i++) {\n\t\t\tpatterns.push(result);\n\t\t}\n\t} else {\n\t\tpatterns = basenamePatterns.reduce((all, current) => {\n\t\t\tconst patterns = (<ParsedStringPattern>current).patterns;\n\t\t\treturn patterns ? all.concat(patterns) : all;\n\t\t}, <string[]>[]);\n\t}\n\tconst aggregate: ParsedStringPattern = function (path, basename) {\n\t\tif (typeof path !== 'string') {\n\t\t\treturn null;\n\t\t}\n\t\tif (!basename) {\n\t\t\tlet i: number;\n\t\t\tfor (i = path.length; i > 0; i--) {\n\t\t\t\tconst ch = path.charCodeAt(i - 1);\n\t\t\t\tif (ch === CharCode.Slash || ch === CharCode.Backslash) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbasename = path.substr(i);\n\t\t}\n\t\tconst index = basenames.indexOf(basename);\n\t\treturn index !== -1 ? patterns[index] : null;\n\t};\n\taggregate.basenames = basenames;\n\taggregate.patterns = patterns;\n\taggregate.allBasenames = basenames;\n\n\tconst aggregatedPatterns = parsedPatterns.filter(parsedPattern => !(<ParsedStringPattern>parsedPattern).basenames);\n\taggregatedPatterns.push(aggregate);\n\treturn aggregatedPatterns;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ParsedPattern, parse } from 'vs/base/common/glob';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename, extname, posix } from 'vs/base/common/path';\nimport { DataUri } from 'vs/base/common/resources';\nimport { startsWithUTF8BOM } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\n\nexport namespace Mimes {\n\texport const text = 'text/plain';\n\texport const binary = 'application/octet-stream';\n\texport const unknown = 'application/unknown';\n\texport const markdown = 'text/markdown';\n}\n\nexport interface ITextMimeAssociation {\n\treadonly id: string;\n\treadonly mime: string;\n\treadonly filename?: string;\n\treadonly extension?: string;\n\treadonly filepattern?: string;\n\treadonly firstline?: RegExp;\n\treadonly userConfigured?: boolean;\n}\n\ninterface ITextMimeAssociationItem extends ITextMimeAssociation {\n\treadonly filenameLowercase?: string;\n\treadonly extensionLowercase?: string;\n\treadonly filepatternLowercase?: ParsedPattern;\n\treadonly filepatternOnPath?: boolean;\n}\n\nlet registeredAssociations: ITextMimeAssociationItem[] = [];\nlet nonUserRegisteredAssociations: ITextMimeAssociationItem[] = [];\nlet userRegisteredAssociations: ITextMimeAssociationItem[] = [];\n\n/**\n * Associate a text mime to the registry.\n */\nexport function registerTextMime(association: ITextMimeAssociation, warnOnOverwrite = false): void {\n\n\t// Register\n\tconst associationItem = toTextMimeAssociationItem(association);\n\tregisteredAssociations.push(associationItem);\n\tif (!associationItem.userConfigured) {\n\t\tnonUserRegisteredAssociations.push(associationItem);\n\t} else {\n\t\tuserRegisteredAssociations.push(associationItem);\n\t}\n\n\t// Check for conflicts unless this is a user configured association\n\tif (warnOnOverwrite && !associationItem.userConfigured) {\n\t\tregisteredAssociations.forEach(a => {\n\t\t\tif (a.mime === associationItem.mime || a.userConfigured) {\n\t\t\t\treturn; // same mime or userConfigured is ok\n\t\t\t}\n\n\t\t\tif (associationItem.extension && a.extension === associationItem.extension) {\n\t\t\t\tconsole.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filename && a.filename === associationItem.filename) {\n\t\t\t\tconsole.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n\t\t\t\tconsole.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.firstline && a.firstline === associationItem.firstline) {\n\t\t\t\tconsole.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction toTextMimeAssociationItem(association: ITextMimeAssociation): ITextMimeAssociationItem {\n\treturn {\n\t\tid: association.id,\n\t\tmime: association.mime,\n\t\tfilename: association.filename,\n\t\textension: association.extension,\n\t\tfilepattern: association.filepattern,\n\t\tfirstline: association.firstline,\n\t\tuserConfigured: association.userConfigured,\n\t\tfilenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n\t\textensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n\t\tfilepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n\t\tfilepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n\t};\n}\n\n/**\n * Clear text mimes from the registry.\n */\nexport function clearTextMimes(onlyUserConfigured?: boolean): void {\n\tif (!onlyUserConfigured) {\n\t\tregisteredAssociations = [];\n\t\tnonUserRegisteredAssociations = [];\n\t\tuserRegisteredAssociations = [];\n\t} else {\n\t\tregisteredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n\t\tuserRegisteredAssociations = [];\n\t}\n}\n\n/**\n * Given a file, return the best matching mime type for it\n */\nexport function guessMimeTypes(resource: URI | null, firstLine?: string): string[] {\n\tlet path: string | undefined;\n\tif (resource) {\n\t\tswitch (resource.scheme) {\n\t\t\tcase Schemas.file:\n\t\t\t\tpath = resource.fsPath;\n\t\t\t\tbreak;\n\t\t\tcase Schemas.data:\n\t\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\t\tpath = metadata.get(DataUri.META_DATA_LABEL);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpath = resource.path;\n\t\t}\n\t}\n\n\tif (!path) {\n\t\treturn [Mimes.unknown];\n\t}\n\n\tpath = path.toLowerCase();\n\n\tconst filename = basename(path);\n\n\t// 1.) User configured mappings have highest priority\n\tconst configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\n\tif (configuredMime) {\n\t\treturn [configuredMime, Mimes.text];\n\t}\n\n\t// 2.) Registered mappings have middle priority\n\tconst registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\n\tif (registeredMime) {\n\t\treturn [registeredMime, Mimes.text];\n\t}\n\n\t// 3.) Firstline has lowest priority\n\tif (firstLine) {\n\t\tconst firstlineMime = guessMimeTypeByFirstline(firstLine);\n\t\tif (firstlineMime) {\n\t\t\treturn [firstlineMime, Mimes.text];\n\t\t}\n\t}\n\n\treturn [Mimes.unknown];\n}\n\nfunction guessMimeTypeByPath(path: string, filename: string, associations: ITextMimeAssociationItem[]): string | null {\n\tlet filenameMatch: ITextMimeAssociationItem | null = null;\n\tlet patternMatch: ITextMimeAssociationItem | null = null;\n\tlet extensionMatch: ITextMimeAssociationItem | null = null;\n\n\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t// association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\tfor (let i = associations.length - 1; i >= 0; i--) {\n\t\tconst association = associations[i];\n\n\t\t// First exact name match\n\t\tif (filename === association.filenameLowercase) {\n\t\t\tfilenameMatch = association;\n\t\t\tbreak; // take it!\n\t\t}\n\n\t\t// Longest pattern match\n\t\tif (association.filepattern) {\n\t\t\tif (!patternMatch || association.filepattern.length > patternMatch.filepattern!.length) {\n\t\t\t\tconst target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n\t\t\t\tif (association.filepatternLowercase?.(target)) {\n\t\t\t\t\tpatternMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Longest extension match\n\t\tif (association.extension) {\n\t\t\tif (!extensionMatch || association.extension.length > extensionMatch.extension!.length) {\n\t\t\t\tif (filename.endsWith(association.extensionLowercase!)) {\n\t\t\t\t\textensionMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 1.) Exact name match has second highest priority\n\tif (filenameMatch) {\n\t\treturn filenameMatch.mime;\n\t}\n\n\t// 2.) Match on pattern\n\tif (patternMatch) {\n\t\treturn patternMatch.mime;\n\t}\n\n\t// 3.) Match on extension comes next\n\tif (extensionMatch) {\n\t\treturn extensionMatch.mime;\n\t}\n\n\treturn null;\n}\n\nfunction guessMimeTypeByFirstline(firstLine: string): string | null {\n\tif (startsWithUTF8BOM(firstLine)) {\n\t\tfirstLine = firstLine.substr(1);\n\t}\n\n\tif (firstLine.length > 0) {\n\n\t\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t\t// association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\t\tfor (let i = registeredAssociations.length - 1; i >= 0; i--) {\n\t\t\tconst association = registeredAssociations[i];\n\t\t\tif (!association.firstline) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst matches = firstLine.match(association.firstline);\n\t\t\tif (matches && matches.length > 0) {\n\t\t\t\treturn association.mime;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function isUnspecific(mime: string[] | string): boolean {\n\tif (!mime) {\n\t\treturn true;\n\t}\n\n\tif (typeof mime === 'string') {\n\t\treturn mime === Mimes.binary || mime === Mimes.text || mime === Mimes.unknown;\n\t}\n\n\treturn mime.length === 1 && isUnspecific(mime[0]);\n}\n\ninterface MapExtToMediaMimes {\n\t[index: string]: string;\n}\n\nconst mapExtToTextMimes: MapExtToMediaMimes = {\n\t'.css': 'text/css',\n\t'.csv': 'text/csv',\n\t'.htm': 'text/html',\n\t'.html': 'text/html',\n\t'.ics': 'text/calendar',\n\t'.js': 'text/javascript',\n\t'.mjs': 'text/javascript',\n\t'.txt': 'text/plain',\n\t'.xml': 'text/xml'\n};\n\n// Known media mimes that we can handle\nconst mapExtToMediaMimes: MapExtToMediaMimes = {\n\t'.aac': 'audio/x-aac',\n\t'.avi': 'video/x-msvideo',\n\t'.bmp': 'image/bmp',\n\t'.flv': 'video/x-flv',\n\t'.gif': 'image/gif',\n\t'.ico': 'image/x-icon',\n\t'.jpe': 'image/jpg',\n\t'.jpeg': 'image/jpg',\n\t'.jpg': 'image/jpg',\n\t'.m1v': 'video/mpeg',\n\t'.m2a': 'audio/mpeg',\n\t'.m2v': 'video/mpeg',\n\t'.m3a': 'audio/mpeg',\n\t'.mid': 'audio/midi',\n\t'.midi': 'audio/midi',\n\t'.mk3d': 'video/x-matroska',\n\t'.mks': 'video/x-matroska',\n\t'.mkv': 'video/x-matroska',\n\t'.mov': 'video/quicktime',\n\t'.movie': 'video/x-sgi-movie',\n\t'.mp2': 'audio/mpeg',\n\t'.mp2a': 'audio/mpeg',\n\t'.mp3': 'audio/mpeg',\n\t'.mp4': 'video/mp4',\n\t'.mp4a': 'audio/mp4',\n\t'.mp4v': 'video/mp4',\n\t'.mpe': 'video/mpeg',\n\t'.mpeg': 'video/mpeg',\n\t'.mpg': 'video/mpeg',\n\t'.mpg4': 'video/mp4',\n\t'.mpga': 'audio/mpeg',\n\t'.oga': 'audio/ogg',\n\t'.ogg': 'audio/ogg',\n\t'.ogv': 'video/ogg',\n\t'.png': 'image/png',\n\t'.psd': 'image/vnd.adobe.photoshop',\n\t'.qt': 'video/quicktime',\n\t'.spx': 'audio/ogg',\n\t'.svg': 'image/svg+xml',\n\t'.tga': 'image/x-tga',\n\t'.tif': 'image/tiff',\n\t'.tiff': 'image/tiff',\n\t'.wav': 'audio/x-wav',\n\t'.webm': 'video/webm',\n\t'.webp': 'image/webp',\n\t'.wma': 'audio/x-ms-wma',\n\t'.wmv': 'video/x-ms-wmv',\n\t'.woff': 'application/font-woff',\n};\n\nexport function getMediaOrTextMime(path: string): string | undefined {\n\tconst ext = extname(path);\n\tconst textMime = mapExtToTextMimes[ext.toLowerCase()];\n\tif (textMime !== undefined) {\n\t\treturn textMime;\n\t} else {\n\t\treturn getMediaMime(path);\n\t}\n}\n\nexport function getMediaMime(path: string): string | undefined {\n\tconst ext = extname(path);\n\treturn mapExtToMediaMimes[ext.toLowerCase()];\n}\n\nexport function getExtensionForMimeType(mimeType: string): string | undefined {\n\tfor (const extension in mapExtToMediaMimes) {\n\t\tif (mapExtToMediaMimes[extension] === mimeType) {\n\t\t\treturn extension;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nconst _simplePattern = /^(.+)\\/(.+?)(;.+)?$/;\n\nexport function normalizeMimeType(mimeType: string): string;\nexport function normalizeMimeType(mimeType: string, strict: true): string | undefined;\nexport function normalizeMimeType(mimeType: string, strict?: true): string | undefined {\n\n\tconst match = _simplePattern.exec(mimeType);\n\tif (!match) {\n\t\treturn strict\n\t\t\t? undefined\n\t\t\t: mimeType;\n\t}\n\t// https://datatracker.ietf.org/doc/html/rfc2045#section-5.1\n\t// media and subtype must ALWAYS be lowercase, parameter not\n\treturn `${match[1].toLowerCase()}/${match[2].toLowerCase()}${match[3] ?? ''}`;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { CharacterClassifier } from 'vs/editor/common/core/characterClassifier';\n\nexport const enum WordCharacterClass {\n\tRegular = 0,\n\tWhitespace = 1,\n\tWordSeparator = 2\n}\n\nexport class WordCharacterClassifier extends CharacterClassifier<WordCharacterClass> {\n\n\tconstructor(wordSeparators: string) {\n\t\tsuper(WordCharacterClass.Regular);\n\n\t\tfor (let i = 0, len = wordSeparators.length; i < len; i++) {\n\t\t\tthis.set(wordSeparators.charCodeAt(i), WordCharacterClass.WordSeparator);\n\t\t}\n\n\t\tthis.set(CharCode.Space, WordCharacterClass.Whitespace);\n\t\tthis.set(CharCode.Tab, WordCharacterClass.Whitespace);\n\t}\n\n}\n\nfunction once<R>(computeFn: (input: string) => R): (input: string) => R {\n\tlet cache: { [key: string]: R; } = {}; // TODO@Alex unbounded cache\n\treturn (input: string): R => {\n\t\tif (!cache.hasOwnProperty(input)) {\n\t\t\tcache[input] = computeFn(input);\n\t\t}\n\t\treturn cache[input];\n\t};\n}\n\nexport const getMapForWordSeparators = once<WordCharacterClassifier>(\n\t(input) => new WordCharacterClassifier(input)\n);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport * as platform from 'vs/base/common/platform';\nimport * as buffer from 'vs/base/common/buffer';\n\ndeclare const TextDecoder: {\n\tprototype: TextDecoder;\n\tnew(label?: string): TextDecoder;\n};\ninterface TextDecoder {\n\tdecode(view: Uint16Array): string;\n}\n\nexport interface IStringBuilder {\n\tbuild(): string;\n\treset(): void;\n\twrite1(charCode: number): void;\n\tappendASCII(charCode: number): void;\n\tappendASCIIString(str: string): void;\n}\n\nlet _utf16LE_TextDecoder: TextDecoder | null;\nfunction getUTF16LE_TextDecoder(): TextDecoder {\n\tif (!_utf16LE_TextDecoder) {\n\t\t_utf16LE_TextDecoder = new TextDecoder('UTF-16LE');\n\t}\n\treturn _utf16LE_TextDecoder;\n}\n\nlet _utf16BE_TextDecoder: TextDecoder | null;\nfunction getUTF16BE_TextDecoder(): TextDecoder {\n\tif (!_utf16BE_TextDecoder) {\n\t\t_utf16BE_TextDecoder = new TextDecoder('UTF-16BE');\n\t}\n\treturn _utf16BE_TextDecoder;\n}\n\nlet _platformTextDecoder: TextDecoder | null;\nexport function getPlatformTextDecoder(): TextDecoder {\n\tif (!_platformTextDecoder) {\n\t\t_platformTextDecoder = platform.isLittleEndian() ? getUTF16LE_TextDecoder() : getUTF16BE_TextDecoder();\n\t}\n\treturn _platformTextDecoder;\n}\n\nexport const hasTextDecoder = (typeof TextDecoder !== 'undefined');\nexport let createStringBuilder: (capacity: number) => IStringBuilder;\nexport let decodeUTF16LE: (source: Uint8Array, offset: number, len: number) => string;\n\nif (hasTextDecoder) {\n\tcreateStringBuilder = (capacity) => new StringBuilder(capacity);\n\tdecodeUTF16LE = standardDecodeUTF16LE;\n} else {\n\tcreateStringBuilder = (capacity) => new CompatStringBuilder();\n\tdecodeUTF16LE = compatDecodeUTF16LE;\n}\n\nfunction standardDecodeUTF16LE(source: Uint8Array, offset: number, len: number): string {\n\tconst view = new Uint16Array(source.buffer, offset, len);\n\tif (len > 0 && (view[0] === 0xFEFF || view[0] === 0xFFFE)) {\n\t\t// UTF16 sometimes starts with a BOM https://de.wikipedia.org/wiki/Byte_Order_Mark\n\t\t// It looks like TextDecoder.decode will eat up a leading BOM (0xFEFF or 0xFFFE)\n\t\t// We don't want that behavior because we know the string is UTF16LE and the BOM should be maintained\n\t\t// So we use the manual decoder\n\t\treturn compatDecodeUTF16LE(source, offset, len);\n\t}\n\treturn getUTF16LE_TextDecoder().decode(view);\n}\n\nfunction compatDecodeUTF16LE(source: Uint8Array, offset: number, len: number): string {\n\tlet result: string[] = [];\n\tlet resultLen = 0;\n\tfor (let i = 0; i < len; i++) {\n\t\tconst charCode = buffer.readUInt16LE(source, offset); offset += 2;\n\t\tresult[resultLen++] = String.fromCharCode(charCode);\n\t}\n\treturn result.join('');\n}\n\nclass StringBuilder implements IStringBuilder {\n\n\tprivate readonly _capacity: number;\n\tprivate readonly _buffer: Uint16Array;\n\n\tprivate _completedStrings: string[] | null;\n\tprivate _bufferLength: number;\n\n\tconstructor(capacity: number) {\n\t\tthis._capacity = capacity | 0;\n\t\tthis._buffer = new Uint16Array(this._capacity);\n\n\t\tthis._completedStrings = null;\n\t\tthis._bufferLength = 0;\n\t}\n\n\tpublic reset(): void {\n\t\tthis._completedStrings = null;\n\t\tthis._bufferLength = 0;\n\t}\n\n\tpublic build(): string {\n\t\tif (this._completedStrings !== null) {\n\t\t\tthis._flushBuffer();\n\t\t\treturn this._completedStrings.join('');\n\t\t}\n\t\treturn this._buildBuffer();\n\t}\n\n\tprivate _buildBuffer(): string {\n\t\tif (this._bufferLength === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n\t\treturn getPlatformTextDecoder().decode(view);\n\t}\n\n\tprivate _flushBuffer(): void {\n\t\tconst bufferString = this._buildBuffer();\n\t\tthis._bufferLength = 0;\n\n\t\tif (this._completedStrings === null) {\n\t\t\tthis._completedStrings = [bufferString];\n\t\t} else {\n\t\t\tthis._completedStrings[this._completedStrings.length] = bufferString;\n\t\t}\n\t}\n\n\tpublic write1(charCode: number): void {\n\t\tconst remainingSpace = this._capacity - this._bufferLength;\n\n\t\tif (remainingSpace <= 1) {\n\t\t\tif (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n\t\t\t\tthis._flushBuffer();\n\t\t\t}\n\t\t}\n\n\t\tthis._buffer[this._bufferLength++] = charCode;\n\t}\n\n\tpublic appendASCII(charCode: number): void {\n\t\tif (this._bufferLength === this._capacity) {\n\t\t\t// buffer is full\n\t\t\tthis._flushBuffer();\n\t\t}\n\t\tthis._buffer[this._bufferLength++] = charCode;\n\t}\n\n\tpublic appendASCIIString(str: string): void {\n\t\tconst strLen = str.length;\n\n\t\tif (this._bufferLength + strLen >= this._capacity) {\n\t\t\t// This string does not fit in the remaining buffer space\n\n\t\t\tthis._flushBuffer();\n\t\t\tthis._completedStrings![this._completedStrings!.length] = str;\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < strLen; i++) {\n\t\t\tthis._buffer[this._bufferLength++] = str.charCodeAt(i);\n\t\t}\n\t}\n}\n\nclass CompatStringBuilder implements IStringBuilder {\n\n\tprivate _pieces: string[];\n\tprivate _piecesLen: number;\n\n\tconstructor() {\n\t\tthis._pieces = [];\n\t\tthis._piecesLen = 0;\n\t}\n\n\tpublic reset(): void {\n\t\tthis._pieces = [];\n\t\tthis._piecesLen = 0;\n\t}\n\n\tpublic build(): string {\n\t\treturn this._pieces.join('');\n\t}\n\n\tpublic write1(charCode: number): void {\n\t\tthis._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n\t}\n\n\tpublic appendASCII(charCode: number): void {\n\t\tthis._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n\t}\n\n\tpublic appendASCIIString(str: string): void {\n\t\tthis._pieces[this._piecesLen++] = str;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { LineTokens } from 'vs/editor/common/core/lineTokens';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IModelContentChange, IModelContentChangedEvent, IModelDecorationsChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelOptionsChangedEvent, IModelTokensChangedEvent, ModelInjectedTextChangedEvent, ModelRawContentChangedEvent } from 'vs/editor/common/model/textModelEvents';\nimport { SearchData } from 'vs/editor/common/model/textModelSearch';\nimport { LanguageId, LanguageIdentifier, FormattingOptions } from 'vs/editor/common/modes';\nimport { ThemeColor } from 'vs/platform/theme/common/themeService';\nimport { MultilineTokens, MultilineTokens2 } from 'vs/editor/common/model/tokensStore';\nimport { TextChange } from 'vs/editor/common/model/textChange';\nimport { equals } from 'vs/base/common/objects';\n\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport enum OverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\n/**\n * Position in the minimap to render the decoration.\n */\nexport enum MinimapPosition {\n\tInline = 1,\n\tGutter = 2\n}\n\nexport interface IDecorationOptions {\n\t/**\n\t * CSS color to render.\n\t * e.g.: rgba(100, 100, 100, 0.5) or a color from the color registry\n\t */\n\tcolor: string | ThemeColor | undefined;\n\t/**\n\t * CSS color to render.\n\t * e.g.: rgba(100, 100, 100, 0.5) or a color from the color registry\n\t */\n\tdarkColor?: string | ThemeColor;\n}\n\n/**\n * Options for rendering a model decoration in the overview ruler.\n */\nexport interface IModelDecorationOverviewRulerOptions extends IDecorationOptions {\n\t/**\n\t * The position in the overview ruler.\n\t */\n\tposition: OverviewRulerLane;\n}\n\n/**\n * Options for rendering a model decoration in the overview ruler.\n */\nexport interface IModelDecorationMinimapOptions extends IDecorationOptions {\n\t/**\n\t * The position in the overview ruler.\n\t */\n\tposition: MinimapPosition;\n}\n\n/**\n * Options for a model decoration.\n */\nexport interface IModelDecorationOptions {\n\t/**\n\t * A debug description that can be used for inspecting model decorations.\n\t * @internal\n\t */\n\tdescription: string;\n\t/**\n\t * Customize the growing behavior of the decoration when typing at the edges of the decoration.\n\t * Defaults to TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges\n\t */\n\tstickiness?: TrackedRangeStickiness;\n\t/**\n\t * CSS class name describing the decoration.\n\t */\n\tclassName?: string | null;\n\t/**\n\t * Message to be rendered when hovering over the glyph margin decoration.\n\t */\n\tglyphMarginHoverMessage?: IMarkdownString | IMarkdownString[] | null;\n\t/**\n\t * Array of MarkdownString to render as the decoration message.\n\t */\n\thoverMessage?: IMarkdownString | IMarkdownString[] | null;\n\t/**\n\t * Should the decoration expand to encompass a whole line.\n\t */\n\tisWholeLine?: boolean;\n\t/**\n\t * Always render the decoration (even when the range it encompasses is collapsed).\n\t * @internal\n\t */\n\tshowIfCollapsed?: boolean;\n\t/**\n\t * Collapse the decoration if its entire range is being replaced via an edit.\n\t * @internal\n\t */\n\tcollapseOnReplaceEdit?: boolean;\n\t/**\n\t * Specifies the stack order of a decoration.\n\t * A decoration with greater stack order is always in front of a decoration with\n\t * a lower stack order when the decorations are on the same line.\n\t */\n\tzIndex?: number;\n\t/**\n\t * If set, render this decoration in the overview ruler.\n\t */\n\toverviewRuler?: IModelDecorationOverviewRulerOptions | null;\n\t/**\n\t * If set, render this decoration in the minimap.\n\t */\n\tminimap?: IModelDecorationMinimapOptions | null;\n\t/**\n\t * If set, the decoration will be rendered in the glyph margin with this CSS class name.\n\t */\n\tglyphMarginClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the lines decorations with this CSS class name.\n\t */\n\tlinesDecorationsClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the lines decorations with this CSS class name, but only for the first line in case of line wrapping.\n\t */\n\tfirstLineDecorationClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered in the margin (covering its full width) with this CSS class name.\n\t */\n\tmarginClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered inline with the text with this CSS class name.\n\t * Please use this only for CSS rules that must impact the text. For example, use `className`\n\t * to have a background color decoration.\n\t */\n\tinlineClassName?: string | null;\n\t/**\n\t * If there is an `inlineClassName` which affects letter spacing.\n\t */\n\tinlineClassNameAffectsLetterSpacing?: boolean;\n\t/**\n\t * If set, the decoration will be rendered before the text with this CSS class name.\n\t */\n\tbeforeContentClassName?: string | null;\n\t/**\n\t * If set, the decoration will be rendered after the text with this CSS class name.\n\t */\n\tafterContentClassName?: string | null;\n\t/**\n\t * If set, text will be injected in the view after the range.\n\t */\n\tafter?: InjectedTextOptions | null;\n\n\t/**\n\t * If set, text will be injected in the view before the range.\n\t */\n\tbefore?: InjectedTextOptions | null;\n}\n\n/**\n * Configures text that is injected into the view without changing the underlying document.\n*/\nexport interface InjectedTextOptions {\n\t/**\n\t * Sets the text to inject. Must be a single line.\n\t */\n\treadonly content: string;\n\n\t/**\n\t * If set, the decoration will be rendered inline with the text with this CSS class name.\n\t */\n\treadonly inlineClassName?: string | null;\n\n\t/**\n\t * If there is an `inlineClassName` which affects letter spacing.\n\t */\n\treadonly inlineClassNameAffectsLetterSpacing?: boolean;\n}\n\n/**\n * New model decorations.\n */\nexport interface IModelDeltaDecoration {\n\t/**\n\t * Range that this decoration covers.\n\t */\n\trange: IRange;\n\t/**\n\t * Options associated with this decoration.\n\t */\n\toptions: IModelDecorationOptions;\n}\n\n/**\n * A decoration in the model.\n */\nexport interface IModelDecoration {\n\t/**\n\t * Identifier for a decoration.\n\t */\n\treadonly id: string;\n\t/**\n\t * Identifier for a decoration's owner.\n\t */\n\treadonly ownerId: number;\n\t/**\n\t * Range that this decoration covers.\n\t */\n\treadonly range: Range;\n\t/**\n\t * Options associated with this decoration.\n\t */\n\treadonly options: IModelDecorationOptions;\n}\n\n/**\n * An accessor that can add, change or remove model decorations.\n * @internal\n */\nexport interface IModelDecorationsChangeAccessor {\n\t/**\n\t * Add a new decoration.\n\t * @param range Range that this decoration covers.\n\t * @param options Options associated with this decoration.\n\t * @return An unique identifier associated with this decoration.\n\t */\n\taddDecoration(range: IRange, options: IModelDecorationOptions): string;\n\t/**\n\t * Change the range that an existing decoration covers.\n\t * @param id The unique identifier associated with the decoration.\n\t * @param newRange The new range that this decoration covers.\n\t */\n\tchangeDecoration(id: string, newRange: IRange): void;\n\t/**\n\t * Change the options associated with an existing decoration.\n\t * @param id The unique identifier associated with the decoration.\n\t * @param newOptions The new options associated with this decoration.\n\t */\n\tchangeDecorationOptions(id: string, newOptions: IModelDecorationOptions): void;\n\t/**\n\t * Remove an existing decoration.\n\t * @param id The unique identifier associated with the decoration.\n\t */\n\tremoveDecoration(id: string): void;\n\t/**\n\t * Perform a minimum amount of operations, in order to transform the decorations\n\t * identified by `oldDecorations` to the decorations described by `newDecorations`\n\t * and returns the new identifiers associated with the resulting decorations.\n\t *\n\t * @param oldDecorations Array containing previous decorations identifiers.\n\t * @param newDecorations Array describing what decorations should result after the call.\n\t * @return An array containing the new decorations identifiers.\n\t */\n\tdeltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[]): string[];\n}\n\n/**\n * Word inside a model.\n */\nexport interface IWordAtPosition {\n\t/**\n\t * The word.\n\t */\n\treadonly word: string;\n\t/**\n\t * The column where the word starts.\n\t */\n\treadonly startColumn: number;\n\t/**\n\t * The column where the word ends.\n\t */\n\treadonly endColumn: number;\n}\n\n/**\n * End of line character preference.\n */\nexport const enum EndOfLinePreference {\n\t/**\n\t * Use the end of line character identified in the text buffer.\n\t */\n\tTextDefined = 0,\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * The default end of line to use when instantiating models.\n */\nexport const enum DefaultEndOfLine {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 1,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 2\n}\n\n/**\n * End of line character preference.\n */\nexport const enum EndOfLineSequence {\n\t/**\n\t * Use line feed (\\n) as the end of line character.\n\t */\n\tLF = 0,\n\t/**\n\t * Use carriage return and line feed (\\r\\n) as the end of line character.\n\t */\n\tCRLF = 1\n}\n\n/**\n * An identifier for a single edit operation.\n * @internal\n */\nexport interface ISingleEditOperationIdentifier {\n\t/**\n\t * Identifier major\n\t */\n\tmajor: number;\n\t/**\n\t * Identifier minor\n\t */\n\tminor: number;\n}\n\n/**\n * A single edit operation, that acts as a simple replace.\n * i.e. Replace text at `range` with `text` in model.\n */\nexport interface ISingleEditOperation {\n\t/**\n\t * The range to replace. This can be empty to emulate a simple insert.\n\t */\n\trange: IRange;\n\t/**\n\t * The text to replace with. This can be null to emulate a simple delete.\n\t */\n\ttext: string | null;\n\t/**\n\t * This indicates that this operation has \"insert\" semantics.\n\t * i.e. forceMoveMarkers = true => if `range` is collapsed, all markers at the position will be moved.\n\t */\n\tforceMoveMarkers?: boolean;\n}\n\n/**\n * A single edit operation, that has an identifier.\n */\nexport interface IIdentifiedSingleEditOperation {\n\t/**\n\t * An identifier associated with this single edit operation.\n\t * @internal\n\t */\n\tidentifier?: ISingleEditOperationIdentifier | null;\n\t/**\n\t * The range to replace. This can be empty to emulate a simple insert.\n\t */\n\trange: IRange;\n\t/**\n\t * The text to replace with. This can be null to emulate a simple delete.\n\t */\n\ttext: string | null;\n\t/**\n\t * This indicates that this operation has \"insert\" semantics.\n\t * i.e. forceMoveMarkers = true => if `range` is collapsed, all markers at the position will be moved.\n\t */\n\tforceMoveMarkers?: boolean;\n\t/**\n\t * This indicates that this operation is inserting automatic whitespace\n\t * that can be removed on next model edit operation if `config.trimAutoWhitespace` is true.\n\t * @internal\n\t */\n\tisAutoWhitespaceEdit?: boolean;\n\t/**\n\t * This indicates that this operation is in a set of operations that are tracked and should not be \"simplified\".\n\t * @internal\n\t */\n\t_isTracked?: boolean;\n}\n\nexport interface IValidEditOperation {\n\t/**\n\t * An identifier associated with this single edit operation.\n\t * @internal\n\t */\n\tidentifier: ISingleEditOperationIdentifier | null;\n\t/**\n\t * The range to replace. This can be empty to emulate a simple insert.\n\t */\n\trange: Range;\n\t/**\n\t * The text to replace with. This can be empty to emulate a simple delete.\n\t */\n\ttext: string;\n\t/**\n\t * @internal\n\t */\n\ttextChange: TextChange;\n}\n\n/**\n * A callback that can compute the cursor state after applying a series of edit operations.\n */\nexport interface ICursorStateComputer {\n\t/**\n\t * A callback that can compute the resulting cursors state after some edit operations have been executed.\n\t */\n\t(inverseEditOperations: IValidEditOperation[]): Selection[] | null;\n}\n\nexport class TextModelResolvedOptions {\n\t_textModelResolvedOptionsBrand: void = undefined;\n\n\treadonly tabSize: number;\n\treadonly indentSize: number;\n\treadonly insertSpaces: boolean;\n\treadonly defaultEOL: DefaultEndOfLine;\n\treadonly trimAutoWhitespace: boolean;\n\treadonly bracketPairColorizationOptions: BracketPairColorizationOptions;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(src: {\n\t\ttabSize: number;\n\t\tindentSize: number;\n\t\tinsertSpaces: boolean;\n\t\tdefaultEOL: DefaultEndOfLine;\n\t\ttrimAutoWhitespace: boolean;\n\t\tbracketPairColorizationOptions: BracketPairColorizationOptions;\n\t}) {\n\t\tthis.tabSize = Math.max(1, src.tabSize | 0);\n\t\tthis.indentSize = src.tabSize | 0;\n\t\tthis.insertSpaces = Boolean(src.insertSpaces);\n\t\tthis.defaultEOL = src.defaultEOL | 0;\n\t\tthis.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n\t\tthis.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic equals(other: TextModelResolvedOptions): boolean {\n\t\treturn (\n\t\t\tthis.tabSize === other.tabSize\n\t\t\t&& this.indentSize === other.indentSize\n\t\t\t&& this.insertSpaces === other.insertSpaces\n\t\t\t&& this.defaultEOL === other.defaultEOL\n\t\t\t&& this.trimAutoWhitespace === other.trimAutoWhitespace\n\t\t\t&& equals(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions)\n\t\t);\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tpublic createChangeEvent(newOpts: TextModelResolvedOptions): IModelOptionsChangedEvent {\n\t\treturn {\n\t\t\ttabSize: this.tabSize !== newOpts.tabSize,\n\t\t\tindentSize: this.indentSize !== newOpts.indentSize,\n\t\t\tinsertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n\t\t\ttrimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\n\t\t};\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITextModelCreationOptions {\n\ttabSize: number;\n\tindentSize: number;\n\tinsertSpaces: boolean;\n\tdetectIndentation: boolean;\n\ttrimAutoWhitespace: boolean;\n\tdefaultEOL: DefaultEndOfLine;\n\tisForSimpleWidget: boolean;\n\tlargeFileOptimizations: boolean;\n\tbracketPairColorizationOptions: BracketPairColorizationOptions;\n}\n\nexport interface BracketPairColorizationOptions {\n\tenabled: boolean;\n}\n\nexport interface ITextModelUpdateOptions {\n\ttabSize?: number;\n\tindentSize?: number;\n\tinsertSpaces?: boolean;\n\ttrimAutoWhitespace?: boolean;\n\tbracketColorizationOptions?: BracketPairColorizationOptions;\n}\n\nexport class FindMatch {\n\t_findMatchBrand: void = undefined;\n\n\tpublic readonly range: Range;\n\tpublic readonly matches: string[] | null;\n\n\t/**\n\t * @internal\n\t */\n\tconstructor(range: Range, matches: string[] | null) {\n\t\tthis.range = range;\n\t\tthis.matches = matches;\n\t}\n}\n\n/**\n * @internal\n */\nexport interface IFoundBracket {\n\trange: Range;\n\topen: string[];\n\tclose: string[];\n\tisOpen: boolean;\n}\n\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nexport const enum TrackedRangeStickiness {\n\tAlwaysGrowsWhenTypingAtEdges = 0,\n\tNeverGrowsWhenTypingAtEdges = 1,\n\tGrowsOnlyWhenTypingBefore = 2,\n\tGrowsOnlyWhenTypingAfter = 3,\n}\n\n/**\n * @internal\n */\nexport interface IActiveIndentGuideInfo {\n\tstartLineNumber: number;\n\tendLineNumber: number;\n\tindent: number;\n}\n\n/**\n * Text snapshot that works like an iterator.\n * Will try to return chunks of roughly ~64KB size.\n * Will return null when finished.\n *\n * @internal\n */\nexport interface ITextSnapshot {\n\tread(): string | null;\n}\n\n/**\n * A model.\n */\nexport interface ITextModel {\n\n\t/**\n\t * Gets the resource associated with this editor model.\n\t */\n\treadonly uri: URI;\n\n\t/**\n\t * A unique identifier associated with this model.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * This model is constructed for a simple widget code editor.\n\t * @internal\n\t */\n\treadonly isForSimpleWidget: boolean;\n\n\t/**\n\t * If true, the text model might contain RTL.\n\t * If false, the text model **contains only** contain LTR.\n\t * @internal\n\t */\n\tmightContainRTL(): boolean;\n\n\t/**\n\t * If true, the text model might contain LINE SEPARATOR (LS), PARAGRAPH SEPARATOR (PS).\n\t * If false, the text model definitely does not contain these.\n\t * @internal\n\t */\n\tmightContainUnusualLineTerminators(): boolean;\n\n\t/**\n\t * @internal\n\t */\n\tremoveUnusualLineTerminators(selections?: Selection[]): void;\n\n\t/**\n\t * If true, the text model might contain non basic ASCII.\n\t * If false, the text model **contains only** basic ASCII.\n\t * @internal\n\t */\n\tmightContainNonBasicASCII(): boolean;\n\n\t/**\n\t * Get the resolved options for this model.\n\t */\n\tgetOptions(): TextModelResolvedOptions;\n\n\t/**\n\t * Get the formatting options for this model.\n\t * @internal\n\t */\n\tgetFormattingOptions(): FormattingOptions;\n\n\t/**\n\t * Get the current version id of the model.\n\t * Anytime a change happens to the model (even undo/redo),\n\t * the version id is incremented.\n\t */\n\tgetVersionId(): number;\n\n\t/**\n\t * Get the alternative version id of the model.\n\t * This alternative version id is not always incremented,\n\t * it will return the same values in the case of undo-redo.\n\t */\n\tgetAlternativeVersionId(): number;\n\n\t/**\n\t * Replace the entire text buffer value contained in this model.\n\t */\n\tsetValue(newValue: string): void;\n\n\t/**\n\t * Get the text stored in this model.\n\t * @param eol The end of line character preference. Defaults to `EndOfLinePreference.TextDefined`.\n\t * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.\n\t * @return The text.\n\t */\n\tgetValue(eol?: EndOfLinePreference, preserveBOM?: boolean): string;\n\n\t/**\n\t * Get the text stored in this model.\n\t * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.\n\t * @return The text snapshot (it is safe to consume it asynchronously).\n\t * @internal\n\t */\n\tcreateSnapshot(preserveBOM?: boolean): ITextSnapshot;\n\n\t/**\n\t * Get the length of the text stored in this model.\n\t */\n\tgetValueLength(eol?: EndOfLinePreference, preserveBOM?: boolean): number;\n\n\t/**\n\t * Check if the raw text stored in this model equals another raw text.\n\t * @internal\n\t */\n\tequalsTextBuffer(other: ITextBuffer): boolean;\n\n\t/**\n\t * Get the underling text buffer.\n\t * @internal\n\t */\n\tgetTextBuffer(): ITextBuffer;\n\n\t/**\n\t * Get the text in a certain range.\n\t * @param range The range describing what text to get.\n\t * @param eol The end of line character preference. This will only be used for multiline ranges. Defaults to `EndOfLinePreference.TextDefined`.\n\t * @return The text.\n\t */\n\tgetValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n\n\t/**\n\t * Get the length of text in a certain range.\n\t * @param range The range describing what text length to get.\n\t * @return The text length.\n\t */\n\tgetValueLengthInRange(range: IRange): number;\n\n\t/**\n\t * Get the character count of text in a certain range.\n\t * @param range The range describing what text length to get.\n\t */\n\tgetCharacterCountInRange(range: IRange): number;\n\n\t/**\n\t * Splits characters in two buckets. First bucket (A) is of characters that\n\t * sit in lines with length < `LONG_LINE_BOUNDARY`. Second bucket (B) is of\n\t * characters that sit in lines with length >= `LONG_LINE_BOUNDARY`.\n\t * If count(B) > count(A) return true. Returns false otherwise.\n\t * @internal\n\t */\n\tisDominatedByLongLines(): boolean;\n\n\t/**\n\t * Get the number of lines in the model.\n\t */\n\tgetLineCount(): number;\n\n\t/**\n\t * Get the text for a certain line.\n\t */\n\tgetLineContent(lineNumber: number): string;\n\n\t/**\n\t * Get the text length for a certain line.\n\t */\n\tgetLineLength(lineNumber: number): number;\n\n\t/**\n\t * Get the text for all lines.\n\t */\n\tgetLinesContent(): string[];\n\n\t/**\n\t * Get the end of line sequence predominantly used in the text buffer.\n\t * @return EOL char sequence (e.g.: '\\n' or '\\r\\n').\n\t */\n\tgetEOL(): string;\n\n\t/**\n\t * Get the end of line sequence predominantly used in the text buffer.\n\t */\n\tgetEndOfLineSequence(): EndOfLineSequence;\n\n\t/**\n\t * Get the minimum legal column for line at `lineNumber`\n\t */\n\tgetLineMinColumn(lineNumber: number): number;\n\n\t/**\n\t * Get the maximum legal column for line at `lineNumber`\n\t */\n\tgetLineMaxColumn(lineNumber: number): number;\n\n\t/**\n\t * Returns the column before the first non whitespace character for line at `lineNumber`.\n\t * Returns 0 if line is empty or contains only whitespace.\n\t */\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\n\t/**\n\t * Returns the column after the last non whitespace character for line at `lineNumber`.\n\t * Returns 0 if line is empty or contains only whitespace.\n\t */\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\n\t/**\n\t * Create a valid position,\n\t */\n\tvalidatePosition(position: IPosition): Position;\n\n\t/**\n\t * Advances the given position by the given offset (negative offsets are also accepted)\n\t * and returns it as a new valid position.\n\t *\n\t * If the offset and position are such that their combination goes beyond the beginning or\n\t * end of the model, throws an exception.\n\t *\n\t * If the offset is such that the new position would be in the middle of a multi-byte\n\t * line terminator, throws an exception.\n\t */\n\tmodifyPosition(position: IPosition, offset: number): Position;\n\n\t/**\n\t * Create a valid range.\n\t */\n\tvalidateRange(range: IRange): Range;\n\n\t/**\n\t * Converts the position to a zero-based offset.\n\t *\n\t * The position will be [adjusted](#TextDocument.validatePosition).\n\t *\n\t * @param position A position.\n\t * @return A valid zero-based offset.\n\t */\n\tgetOffsetAt(position: IPosition): number;\n\n\t/**\n\t * Converts a zero-based offset to a position.\n\t *\n\t * @param offset A zero-based offset.\n\t * @return A valid [position](#Position).\n\t */\n\tgetPositionAt(offset: number): Position;\n\n\t/**\n\t * Get a range covering the entire model\n\t */\n\tgetFullModelRange(): Range;\n\n\t/**\n\t * Returns if the model was disposed or not.\n\t */\n\tisDisposed(): boolean;\n\n\t/**\n\t * @internal\n\t */\n\ttokenizeViewport(startLineNumber: number, endLineNumber: number): void;\n\n\t/**\n\t * This model is so large that it would not be a good idea to sync it over\n\t * to web workers or other places.\n\t * @internal\n\t */\n\tisTooLargeForSyncing(): boolean;\n\n\t/**\n\t * The file is so large, that even tokenization is disabled.\n\t * @internal\n\t */\n\tisTooLargeForTokenization(): boolean;\n\n\t/**\n\t * Search the model.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchOnlyEditableRange Limit the searching to only search inside the editable range of the model.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @param limitResultCount Limit the number of results\n\t * @return The ranges where the matches are. It is empty if not matches have been found.\n\t */\n\tfindMatches(searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n\t/**\n\t * Search the model.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchScope Limit the searching to only search inside these ranges.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @param limitResultCount Limit the number of results\n\t * @return The ranges where the matches are. It is empty if no matches have been found.\n\t */\n\tfindMatches(searchString: string, searchScope: IRange | IRange[], isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n\t/**\n\t * Search the model for the next match. Loops to the beginning of the model if needed.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchStart Start the searching at the specified position.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @return The range where the next match is. It is null if no next match has been found.\n\t */\n\tfindNextMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n\t/**\n\t * Search the model for the previous match. Loops to the end of the model if needed.\n\t * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n\t * @param searchStart Start the searching at the specified position.\n\t * @param isRegex Used to indicate that `searchString` is a regular expression.\n\t * @param matchCase Force the matching to match lower/upper case exactly.\n\t * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n\t * @param captureMatches The result will contain the captured groups.\n\t * @return The range where the previous match is. It is null if no previous match has been found.\n\t */\n\tfindPreviousMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n\n\t/**\n\t * @internal\n\t */\n\tsetTokens(tokens: MultilineTokens[]): void;\n\n\t/**\n\t * @internal\n\t */\n\tsetSemanticTokens(tokens: MultilineTokens2[] | null, isComplete: boolean): void;\n\n\t/**\n\t * @internal\n\t */\n\tsetPartialSemanticTokens(range: Range, tokens: MultilineTokens2[] | null): void;\n\n\t/**\n\t * @internal\n\t */\n\thasCompleteSemanticTokens(): boolean;\n\n\t/**\n\t * @internal\n\t */\n\thasSomeSemanticTokens(): boolean;\n\n\t/**\n\t * Flush all tokenization state.\n\t * @internal\n\t */\n\tresetTokenization(): void;\n\n\t/**\n\t * Force tokenization information for `lineNumber` to be accurate.\n\t * @internal\n\t */\n\tforceTokenization(lineNumber: number): void;\n\n\t/**\n\t * If it is cheap, force tokenization information for `lineNumber` to be accurate.\n\t * This is based on a heuristic.\n\t * @internal\n\t */\n\ttokenizeIfCheap(lineNumber: number): void;\n\n\t/**\n\t * Check if calling `forceTokenization` for this `lineNumber` will be cheap (time-wise).\n\t * This is based on a heuristic.\n\t * @internal\n\t */\n\tisCheapToTokenize(lineNumber: number): boolean;\n\n\t/**\n\t * Get the tokens for the line `lineNumber`.\n\t * The tokens might be inaccurate. Use `forceTokenization` to ensure accurate tokens.\n\t * @internal\n\t */\n\tgetLineTokens(lineNumber: number): LineTokens;\n\n\t/**\n\t * Get the language associated with this model.\n\t * @internal\n\t */\n\tgetLanguageIdentifier(): LanguageIdentifier;\n\n\t/**\n\t * Get the language associated with this model.\n\t */\n\tgetModeId(): string;\n\n\t/**\n\t * Set the current language mode associated with the model.\n\t * @internal\n\t */\n\tsetMode(languageIdentifier: LanguageIdentifier): void;\n\n\t/**\n\t * Returns the real (inner-most) language mode at a given position.\n\t * The result might be inaccurate. Use `forceTokenization` to ensure accurate tokens.\n\t * @internal\n\t */\n\tgetLanguageIdAtPosition(lineNumber: number, column: number): LanguageId;\n\n\t/**\n\t * Get the word under or besides `position`.\n\t * @param position The position to look for a word.\n\t * @return The word under or besides `position`. Might be null.\n\t */\n\tgetWordAtPosition(position: IPosition): IWordAtPosition | null;\n\n\t/**\n\t * Get the word under or besides `position` trimmed to `position`.column\n\t * @param position The position to look for a word.\n\t * @return The word under or besides `position`. Will never be null.\n\t */\n\tgetWordUntilPosition(position: IPosition): IWordAtPosition;\n\n\t/**\n\t * Find the matching bracket of `request` up, counting brackets.\n\t * @param request The bracket we're searching for\n\t * @param position The position at which to start the search.\n\t * @return The range of the matching bracket, or null if the bracket match was not found.\n\t * @internal\n\t */\n\tfindMatchingBracketUp(bracket: string, position: IPosition): Range | null;\n\n\t/**\n\t * Find the first bracket in the model before `position`.\n\t * @param position The position at which to start the search.\n\t * @return The info for the first bracket before `position`, or null if there are no more brackets before `positions`.\n\t * @internal\n\t */\n\tfindPrevBracket(position: IPosition): IFoundBracket | null;\n\n\t/**\n\t * Find the first bracket in the model after `position`.\n\t * @param position The position at which to start the search.\n\t * @return The info for the first bracket after `position`, or null if there are no more brackets after `positions`.\n\t * @internal\n\t */\n\tfindNextBracket(position: IPosition): IFoundBracket | null;\n\n\t/**\n\t * Find the enclosing brackets that contain `position`.\n\t * @param position The position at which to start the search.\n\t * @internal\n\t */\n\tfindEnclosingBrackets(position: IPosition, maxDuration?: number): [Range, Range] | null;\n\n\t/**\n\t * Given a `position`, if the position is on top or near a bracket,\n\t * find the matching bracket of that bracket and return the ranges of both brackets.\n\t * @param position The position at which to look for a bracket.\n\t * @internal\n\t */\n\tmatchBracket(position: IPosition): [Range, Range] | null;\n\n\t/**\n\t * @internal\n\t */\n\tgetActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\n\t/**\n\t * @internal\n\t */\n\tgetLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[];\n\n\t/**\n\t * Change the decorations. The callback will be called with a change accessor\n\t * that becomes invalid as soon as the callback finishes executing.\n\t * This allows for all events to be queued up until the change\n\t * is completed. Returns whatever the callback returns.\n\t * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n\t * @internal\n\t */\n\tchangeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T, ownerId?: number): T | null;\n\n\t/**\n\t * Perform a minimum amount of operations, in order to transform the decorations\n\t * identified by `oldDecorations` to the decorations described by `newDecorations`\n\t * and returns the new identifiers associated with the resulting decorations.\n\t *\n\t * @param oldDecorations Array containing previous decorations identifiers.\n\t * @param newDecorations Array describing what decorations should result after the call.\n\t * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n\t * @return An array containing the new decorations identifiers.\n\t */\n\tdeltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[], ownerId?: number): string[];\n\n\t/**\n\t * Remove all decorations that have been added with this specific ownerId.\n\t * @param ownerId The owner id to search for.\n\t * @internal\n\t */\n\tremoveAllDecorationsWithOwnerId(ownerId: number): void;\n\n\t/**\n\t * Get the options associated with a decoration.\n\t * @param id The decoration id.\n\t * @return The decoration options or null if the decoration was not found.\n\t */\n\tgetDecorationOptions(id: string): IModelDecorationOptions | null;\n\n\t/**\n\t * Get the range associated with a decoration.\n\t * @param id The decoration id.\n\t * @return The decoration range or null if the decoration was not found.\n\t */\n\tgetDecorationRange(id: string): Range | null;\n\n\t/**\n\t * Gets all the decorations for the line `lineNumber` as an array.\n\t * @param lineNumber The line number\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @return An array with the decorations\n\t */\n\tgetLineDecorations(lineNumber: number, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations for the lines between `startLineNumber` and `endLineNumber` as an array.\n\t * @param startLineNumber The start line number\n\t * @param endLineNumber The end line number\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @return An array with the decorations\n\t */\n\tgetLinesDecorations(startLineNumber: number, endLineNumber: number, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations in a range as an array. Only `startLineNumber` and `endLineNumber` from `range` are used for filtering.\n\t * So for now it returns all the decorations on the same line as `range`.\n\t * @param range The range to search in\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t * @return An array with the decorations\n\t */\n\tgetDecorationsInRange(range: IRange, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t */\n\tgetAllDecorations(ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations that should be rendered in the overview ruler as an array.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n\t */\n\tgetOverviewRulerDecorations(ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n\n\t/**\n\t * Gets all the decorations that contain injected text.\n\t * @param ownerId If set, it will ignore decorations belonging to other owners.\n\t */\n\tgetInjectedTextDecorations(ownerId?: number): IModelDecoration[];\n\n\t/**\n\t * @internal\n\t */\n\t_getTrackedRange(id: string): Range | null;\n\n\t/**\n\t * @internal\n\t */\n\t_setTrackedRange(id: string | null, newRange: null, newStickiness: TrackedRangeStickiness): null;\n\t/**\n\t * @internal\n\t */\n\t_setTrackedRange(id: string | null, newRange: Range, newStickiness: TrackedRangeStickiness): string;\n\n\t/**\n\t * Normalize a string containing whitespace according to indentation rules (converts to spaces or to tabs).\n\t */\n\tnormalizeIndentation(str: string): string;\n\n\t/**\n\t * Change the options of this model.\n\t */\n\tupdateOptions(newOpts: ITextModelUpdateOptions): void;\n\n\t/**\n\t * Detect the indentation options for this model from its content.\n\t */\n\tdetectIndentation(defaultInsertSpaces: boolean, defaultTabSize: number): void;\n\n\t/**\n\t * Close the current undo-redo element.\n\t * This offers a way to create an undo/redo stop point.\n\t */\n\tpushStackElement(): void;\n\n\t/**\n\t * Open the current undo-redo element.\n\t * This offers a way to remove the current undo/redo stop point.\n\t */\n\tpopStackElement(): void;\n\n\t/**\n\t * Push edit operations, basically editing the model. This is the preferred way\n\t * of editing the model. The edit operations will land on the undo stack.\n\t * @param beforeCursorState The cursor state before the edit operations. This cursor state will be returned when `undo` or `redo` are invoked.\n\t * @param editOperations The edit operations.\n\t * @param cursorStateComputer A callback that can compute the resulting cursors state after the edit operations have been executed.\n\t * @return The cursor state returned by the `cursorStateComputer`.\n\t */\n\tpushEditOperations(beforeCursorState: Selection[] | null, editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): Selection[] | null;\n\n\t/**\n\t * Change the end of line sequence. This is the preferred way of\n\t * changing the eol sequence. This will land on the undo stack.\n\t */\n\tpushEOL(eol: EndOfLineSequence): void;\n\n\t/**\n\t * Edit the model without adding the edits to the undo stack.\n\t * This can have dire consequences on the undo stack! See @pushEditOperations for the preferred way.\n\t * @param operations The edit operations.\n\t * @return If desired, the inverse edit operations, that, when applied, will bring the model back to the previous state.\n\t */\n\tapplyEdits(operations: IIdentifiedSingleEditOperation[]): void;\n\tapplyEdits(operations: IIdentifiedSingleEditOperation[], computeUndoEdits: false): void;\n\tapplyEdits(operations: IIdentifiedSingleEditOperation[], computeUndoEdits: true): IValidEditOperation[];\n\n\t/**\n\t * Change the end of line sequence without recording in the undo stack.\n\t * This can have dire consequences on the undo stack! See @pushEOL for the preferred way.\n\t */\n\tsetEOL(eol: EndOfLineSequence): void;\n\n\t/**\n\t * @internal\n\t */\n\t_applyUndo(changes: TextChange[], eol: EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void;\n\n\t/**\n\t * @internal\n\t */\n\t_applyRedo(changes: TextChange[], eol: EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void;\n\n\t/**\n\t * Undo edit operations until the previous undo/redo point.\n\t * The inverse edit operations will be pushed on the redo stack.\n\t * @internal\n\t */\n\tundo(): void | Promise<void>;\n\n\t/**\n\t * Is there anything in the undo stack?\n\t * @internal\n\t */\n\tcanUndo(): boolean;\n\n\t/**\n\t * Redo edit operations until the next undo/redo point.\n\t * The inverse edit operations will be pushed on the undo stack.\n\t * @internal\n\t */\n\tredo(): void | Promise<void>;\n\n\t/**\n\t * Is there anything in the redo stack?\n\t * @internal\n\t */\n\tcanRedo(): boolean;\n\n\t/**\n\t * @deprecated Please use `onDidChangeContent` instead.\n\t * An event emitted when the contents of the model have changed.\n\t * @internal\n\t * @event\n\t */\n\tonDidChangeContentOrInjectedText(listener: (e: ModelRawContentChangedEvent | ModelInjectedTextChangedEvent) => void): IDisposable;\n\t/**\n\t * @deprecated Please use `onDidChangeContent` instead.\n\t * An event emitted when the contents of the model have changed.\n\t * @internal\n\t * @event\n\t */\n\tonDidChangeRawContent(listener: (e: ModelRawContentChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when the contents of the model have changed.\n\t * @event\n\t */\n\tonDidChangeContent(listener: (e: IModelContentChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when decorations of the model have changed.\n\t * @event\n\t */\n\tonDidChangeDecorations(listener: (e: IModelDecorationsChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when the model options have changed.\n\t * @event\n\t */\n\tonDidChangeOptions(listener: (e: IModelOptionsChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when the language associated with the model has changed.\n\t * @event\n\t */\n\tonDidChangeLanguage(listener: (e: IModelLanguageChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when the language configuration associated with the model has changed.\n\t * @event\n\t */\n\tonDidChangeLanguageConfiguration(listener: (e: IModelLanguageConfigurationChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when the tokens associated with the model have changed.\n\t * @event\n\t * @internal\n\t */\n\tonDidChangeTokens(listener: (e: IModelTokensChangedEvent) => void): IDisposable;\n\t/**\n\t * An event emitted when the model has been attached to the first editor or detached from the last editor.\n\t * @event\n\t */\n\tonDidChangeAttached(listener: () => void): IDisposable;\n\t/**\n\t * An event emitted right before disposing the model.\n\t * @event\n\t */\n\tonWillDispose(listener: () => void): IDisposable;\n\n\t/**\n\t * Destroy this model. This will unbind the model from the mode\n\t * and make all necessary clean-up to release this object to the GC.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * @internal\n\t */\n\tonBeforeAttached(): void;\n\n\t/**\n\t * @internal\n\t */\n\tonBeforeDetached(): void;\n\n\t/**\n\t * Returns if this model is attached to an editor or not.\n\t */\n\tisAttachedToEditor(): boolean;\n\n\t/**\n\t * Returns the count of editors this model is attached to.\n\t * @internal\n\t */\n\tgetAttachedEditorCount(): number;\n\n\t/**\n\t * Among all positions that are projected to the same position in the underlying text model as\n\t * the given position, select a unique position as indicated by the affinity.\n\t *\n\t * PositionAffinity.Left:\n\t * The normalized position must be equal or left to the requested position.\n\t *\n\t * PositionAffinity.Right:\n\t * The normalized position must be equal or right to the requested position.\n\t *\n\t * @internal\n\t */\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\n/**\n * @internal\n */\nexport const enum PositionAffinity {\n\t/**\n\t * Prefers the left most position.\n\t*/\n\tLeft = 0,\n\n\t/**\n\t * Prefers the right most position.\n\t*/\n\tRight = 1,\n\n\t/**\n\t * No preference.\n\t*/\n\tNone = 2,\n}\n\n/**\n * @internal\n */\nexport interface ITextBufferBuilder {\n\tacceptChunk(chunk: string): void;\n\tfinish(): ITextBufferFactory;\n}\n\n/**\n * @internal\n */\nexport interface ITextBufferFactory {\n\tcreate(defaultEOL: DefaultEndOfLine): { textBuffer: ITextBuffer; disposable: IDisposable; };\n\tgetFirstLineText(lengthLimit: number): string;\n}\n\n/**\n * @internal\n */\nexport const enum ModelConstants {\n\tFIRST_LINE_DETECTION_LENGTH_LIMIT = 1000\n}\n\n/**\n * @internal\n */\nexport class ValidAnnotatedEditOperation implements IIdentifiedSingleEditOperation {\n\tconstructor(\n\t\tpublic readonly identifier: ISingleEditOperationIdentifier | null,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly text: string | null,\n\t\tpublic readonly forceMoveMarkers: boolean,\n\t\tpublic readonly isAutoWhitespaceEdit: boolean,\n\t\tpublic readonly _isTracked: boolean,\n\t) { }\n}\n\n/**\n * @internal\n */\nexport interface IReadonlyTextBuffer {\n\tonDidChangeContent: Event<void>;\n\tequals(other: ITextBuffer): boolean;\n\tmightContainRTL(): boolean;\n\tmightContainUnusualLineTerminators(): boolean;\n\tresetMightContainUnusualLineTerminators(): void;\n\tmightContainNonBasicASCII(): boolean;\n\tgetBOM(): string;\n\tgetEOL(): string;\n\n\tgetOffsetAt(lineNumber: number, column: number): number;\n\tgetPositionAt(offset: number): Position;\n\tgetRangeAt(offset: number, length: number): Range;\n\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\tcreateSnapshot(preserveBOM: boolean): ITextSnapshot;\n\tgetValueLengthInRange(range: Range, eol: EndOfLinePreference): number;\n\tgetCharacterCountInRange(range: Range, eol: EndOfLinePreference): number;\n\tgetLength(): number;\n\tgetLineCount(): number;\n\tgetLinesContent(): string[];\n\tgetLineContent(lineNumber: number): string;\n\tgetLineCharCode(lineNumber: number, index: number): number;\n\tgetCharCode(offset: number): number;\n\tgetLineLength(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tfindMatchesLineByLine(searchRange: Range, searchData: SearchData, captureMatches: boolean, limitResultCount: number): FindMatch[];\n}\n\n/**\n * @internal\n */\nexport interface ITextBuffer extends IReadonlyTextBuffer {\n\tsetEOL(newEOL: '\\r\\n' | '\\n'): void;\n\tapplyEdits(rawOperations: ValidAnnotatedEditOperation[], recordTrimAutoWhitespace: boolean, computeUndoEdits: boolean): ApplyEditsResult;\n}\n\n/**\n * @internal\n */\nexport class ApplyEditsResult {\n\n\tconstructor(\n\t\tpublic readonly reverseEdits: IValidEditOperation[] | null,\n\t\tpublic readonly changes: IInternalModelContentChange[],\n\t\tpublic readonly trimAutoWhitespaceLineNumbers: number[] | null\n\t) { }\n\n}\n\n/**\n * @internal\n */\nexport interface IInternalModelContentChange extends IModelContentChange {\n\trange: Range;\n\tforceMoveMarkers: boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Piece, PieceTreeBase } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase';\n\nexport class TreeNode {\n\tparent: TreeNode;\n\tleft: TreeNode;\n\tright: TreeNode;\n\tcolor: NodeColor;\n\n\t// Piece\n\tpiece: Piece;\n\tsize_left: number; // size of the left subtree (not inorder)\n\tlf_left: number; // line feeds cnt in the left subtree (not in order)\n\n\tconstructor(piece: Piece, color: NodeColor) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.size_left = 0;\n\t\tthis.lf_left = 0;\n\t\tthis.parent = this;\n\t\tthis.left = this;\n\t\tthis.right = this;\n\t}\n\n\tpublic next(): TreeNode {\n\t\tif (this.right !== SENTINEL) {\n\t\t\treturn leftest(this.right);\n\t\t}\n\n\t\tlet node: TreeNode = this;\n\n\t\twhile (node.parent !== SENTINEL) {\n\t\t\tif (node.parent.left === node) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tif (node.parent === SENTINEL) {\n\t\t\treturn SENTINEL;\n\t\t} else {\n\t\t\treturn node.parent;\n\t\t}\n\t}\n\n\tpublic prev(): TreeNode {\n\t\tif (this.left !== SENTINEL) {\n\t\t\treturn righttest(this.left);\n\t\t}\n\n\t\tlet node: TreeNode = this;\n\n\t\twhile (node.parent !== SENTINEL) {\n\t\t\tif (node.parent.right === node) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tif (node.parent === SENTINEL) {\n\t\t\treturn SENTINEL;\n\t\t} else {\n\t\t\treturn node.parent;\n\t\t}\n\t}\n\n\tpublic detach(): void {\n\t\tthis.parent = null!;\n\t\tthis.left = null!;\n\t\tthis.right = null!;\n\t}\n}\n\nexport const enum NodeColor {\n\tBlack = 0,\n\tRed = 1,\n}\n\nexport const SENTINEL: TreeNode = new TreeNode(null!, NodeColor.Black);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = NodeColor.Black;\n\nexport function leftest(node: TreeNode): TreeNode {\n\twhile (node.left !== SENTINEL) {\n\t\tnode = node.left;\n\t}\n\treturn node;\n}\n\nexport function righttest(node: TreeNode): TreeNode {\n\twhile (node.right !== SENTINEL) {\n\t\tnode = node.right;\n\t}\n\treturn node;\n}\n\nexport function calculateSize(node: TreeNode): number {\n\tif (node === SENTINEL) {\n\t\treturn 0;\n\t}\n\n\treturn node.size_left + node.piece.length + calculateSize(node.right);\n}\n\nexport function calculateLF(node: TreeNode): number {\n\tif (node === SENTINEL) {\n\t\treturn 0;\n\t}\n\n\treturn node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\n\nexport function resetSentinel(): void {\n\tSENTINEL.parent = SENTINEL;\n}\n\nexport function leftRotate(tree: PieceTreeBase, x: TreeNode) {\n\tlet y = x.right;\n\n\t// fix size_left\n\ty.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n\ty.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\tx.right = y.left;\n\n\tif (y.left !== SENTINEL) {\n\t\ty.left.parent = x;\n\t}\n\ty.parent = x.parent;\n\tif (x.parent === SENTINEL) {\n\t\ttree.root = y;\n\t} else if (x.parent.left === x) {\n\t\tx.parent.left = y;\n\t} else {\n\t\tx.parent.right = y;\n\t}\n\ty.left = x;\n\tx.parent = y;\n}\n\nexport function rightRotate(tree: PieceTreeBase, y: TreeNode) {\n\tlet x = y.left;\n\ty.left = x.right;\n\tif (x.right !== SENTINEL) {\n\t\tx.right.parent = y;\n\t}\n\tx.parent = y.parent;\n\n\t// fix size_left\n\ty.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n\ty.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\n\tif (y.parent === SENTINEL) {\n\t\ttree.root = x;\n\t} else if (y === y.parent.right) {\n\t\ty.parent.right = x;\n\t} else {\n\t\ty.parent.left = x;\n\t}\n\n\tx.right = y;\n\ty.parent = x;\n}\n\nexport function rbDelete(tree: PieceTreeBase, z: TreeNode) {\n\tlet x: TreeNode;\n\tlet y: TreeNode;\n\n\tif (z.left === SENTINEL) {\n\t\ty = z;\n\t\tx = y.right;\n\t} else if (z.right === SENTINEL) {\n\t\ty = z;\n\t\tx = y.left;\n\t} else {\n\t\ty = leftest(z.right);\n\t\tx = y.right;\n\t}\n\n\tif (y === tree.root) {\n\t\ttree.root = x;\n\n\t\t// if x is null, we are removing the only node\n\t\tx.color = NodeColor.Black;\n\t\tz.detach();\n\t\tresetSentinel();\n\t\ttree.root.parent = SENTINEL;\n\n\t\treturn;\n\t}\n\n\tlet yWasRed = (y.color === NodeColor.Red);\n\n\tif (y === y.parent.left) {\n\t\ty.parent.left = x;\n\t} else {\n\t\ty.parent.right = x;\n\t}\n\n\tif (y === z) {\n\t\tx.parent = y.parent;\n\t\trecomputeTreeMetadata(tree, x);\n\t} else {\n\t\tif (y.parent === z) {\n\t\t\tx.parent = y;\n\t\t} else {\n\t\t\tx.parent = y.parent;\n\t\t}\n\n\t\t// as we make changes to x's hierarchy, update size_left of subtree first\n\t\trecomputeTreeMetadata(tree, x);\n\n\t\ty.left = z.left;\n\t\ty.right = z.right;\n\t\ty.parent = z.parent;\n\t\ty.color = z.color;\n\n\t\tif (z === tree.root) {\n\t\t\ttree.root = y;\n\t\t} else {\n\t\t\tif (z === z.parent.left) {\n\t\t\t\tz.parent.left = y;\n\t\t\t} else {\n\t\t\t\tz.parent.right = y;\n\t\t\t}\n\t\t}\n\n\t\tif (y.left !== SENTINEL) {\n\t\t\ty.left.parent = y;\n\t\t}\n\t\tif (y.right !== SENTINEL) {\n\t\t\ty.right.parent = y;\n\t\t}\n\t\t// update metadata\n\t\t// we replace z with y, so in this sub tree, the length change is z.item.length\n\t\ty.size_left = z.size_left;\n\t\ty.lf_left = z.lf_left;\n\t\trecomputeTreeMetadata(tree, y);\n\t}\n\n\tz.detach();\n\n\tif (x.parent.left === x) {\n\t\tlet newSizeLeft = calculateSize(x);\n\t\tlet newLFLeft = calculateLF(x);\n\t\tif (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n\t\t\tlet delta = newSizeLeft - x.parent.size_left;\n\t\t\tlet lf_delta = newLFLeft - x.parent.lf_left;\n\t\t\tx.parent.size_left = newSizeLeft;\n\t\t\tx.parent.lf_left = newLFLeft;\n\t\t\tupdateTreeMetadata(tree, x.parent, delta, lf_delta);\n\t\t}\n\t}\n\n\trecomputeTreeMetadata(tree, x.parent);\n\n\tif (yWasRed) {\n\t\tresetSentinel();\n\t\treturn;\n\t}\n\n\t// RB-DELETE-FIXUP\n\tlet w: TreeNode;\n\twhile (x !== tree.root && x.color === NodeColor.Black) {\n\t\tif (x === x.parent.left) {\n\t\t\tw = x.parent.right;\n\n\t\t\tif (w.color === NodeColor.Red) {\n\t\t\t\tw.color = NodeColor.Black;\n\t\t\t\tx.parent.color = NodeColor.Red;\n\t\t\t\tleftRotate(tree, x.parent);\n\t\t\t\tw = x.parent.right;\n\t\t\t}\n\n\t\t\tif (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {\n\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\tx = x.parent;\n\t\t\t} else {\n\t\t\t\tif (w.right.color === NodeColor.Black) {\n\t\t\t\t\tw.left.color = NodeColor.Black;\n\t\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\t\trightRotate(tree, w);\n\t\t\t\t\tw = x.parent.right;\n\t\t\t\t}\n\n\t\t\t\tw.color = x.parent.color;\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tw.right.color = NodeColor.Black;\n\t\t\t\tleftRotate(tree, x.parent);\n\t\t\t\tx = tree.root;\n\t\t\t}\n\t\t} else {\n\t\t\tw = x.parent.left;\n\n\t\t\tif (w.color === NodeColor.Red) {\n\t\t\t\tw.color = NodeColor.Black;\n\t\t\t\tx.parent.color = NodeColor.Red;\n\t\t\t\trightRotate(tree, x.parent);\n\t\t\t\tw = x.parent.left;\n\t\t\t}\n\n\t\t\tif (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {\n\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\tx = x.parent;\n\n\t\t\t} else {\n\t\t\t\tif (w.left.color === NodeColor.Black) {\n\t\t\t\t\tw.right.color = NodeColor.Black;\n\t\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\t\tleftRotate(tree, w);\n\t\t\t\t\tw = x.parent.left;\n\t\t\t\t}\n\n\t\t\t\tw.color = x.parent.color;\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tw.left.color = NodeColor.Black;\n\t\t\t\trightRotate(tree, x.parent);\n\t\t\t\tx = tree.root;\n\t\t\t}\n\t\t}\n\t}\n\tx.color = NodeColor.Black;\n\tresetSentinel();\n}\n\nexport function fixInsert(tree: PieceTreeBase, x: TreeNode) {\n\trecomputeTreeMetadata(tree, x);\n\n\twhile (x !== tree.root && x.parent.color === NodeColor.Red) {\n\t\tif (x.parent === x.parent.parent.left) {\n\t\t\tconst y = x.parent.parent.right;\n\n\t\t\tif (y.color === NodeColor.Red) {\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\ty.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.right) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\tleftRotate(tree, x);\n\t\t\t\t}\n\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\trightRotate(tree, x.parent.parent);\n\t\t\t}\n\t\t} else {\n\t\t\tconst y = x.parent.parent.left;\n\n\t\t\tif (y.color === NodeColor.Red) {\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\ty.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.left) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\trightRotate(tree, x);\n\t\t\t\t}\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tleftRotate(tree, x.parent.parent);\n\t\t\t}\n\t\t}\n\t}\n\n\ttree.root.color = NodeColor.Black;\n}\n\nexport function updateTreeMetadata(tree: PieceTreeBase, x: TreeNode, delta: number, lineFeedCntDelta: number): void {\n\t// node length change or line feed count change\n\twhile (x !== tree.root && x !== SENTINEL) {\n\t\tif (x.parent.left === x) {\n\t\t\tx.parent.size_left += delta;\n\t\t\tx.parent.lf_left += lineFeedCntDelta;\n\t\t}\n\n\t\tx = x.parent;\n\t}\n}\n\nexport function recomputeTreeMetadata(tree: PieceTreeBase, x: TreeNode) {\n\tlet delta = 0;\n\tlet lf_delta = 0;\n\tif (x === tree.root) {\n\t\treturn;\n\t}\n\n\tif (delta === 0) {\n\t\t// go upwards till the node whose left subtree is changed.\n\t\twhile (x !== tree.root && x === x.parent.right) {\n\t\t\tx = x.parent;\n\t\t}\n\n\t\tif (x === tree.root) {\n\t\t\t// well, it means we add a node to the end (inorder)\n\t\t\treturn;\n\t\t}\n\n\t\t// x is the node whose right subtree is changed.\n\t\tx = x.parent;\n\n\t\tdelta = calculateSize(x.left) - x.size_left;\n\t\tlf_delta = calculateLF(x.left) - x.lf_left;\n\t\tx.size_left += delta;\n\t\tx.lf_left += lf_delta;\n\t}\n\n\t// go upwards till root. O(logN)\n\twhile (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n\t\tif (x.parent.left === x) {\n\t\t\tx.parent.size_left += delta;\n\t\t\tx.parent.lf_left += lf_delta;\n\t\t}\n\n\t\tx = x.parent;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as buffer from 'vs/base/common/buffer';\nimport { decodeUTF16LE } from 'vs/editor/common/core/stringBuilder';\n\nfunction escapeNewLine(str: string): string {\n\treturn (\n\t\tstr\n\t\t\t.replace(/\\n/g, '\\\\n')\n\t\t\t.replace(/\\r/g, '\\\\r')\n\t);\n}\n\nexport class TextChange {\n\n\tpublic get oldLength(): number {\n\t\treturn this.oldText.length;\n\t}\n\n\tpublic get oldEnd(): number {\n\t\treturn this.oldPosition + this.oldText.length;\n\t}\n\n\tpublic get newLength(): number {\n\t\treturn this.newText.length;\n\t}\n\n\tpublic get newEnd(): number {\n\t\treturn this.newPosition + this.newText.length;\n\t}\n\n\tconstructor(\n\t\tpublic readonly oldPosition: number,\n\t\tpublic readonly oldText: string,\n\t\tpublic readonly newPosition: number,\n\t\tpublic readonly newText: string\n\t) { }\n\n\tpublic toString(): string {\n\t\tif (this.oldText.length === 0) {\n\t\t\treturn `(insert@${this.oldPosition} \"${escapeNewLine(this.newText)}\")`;\n\t\t}\n\t\tif (this.newText.length === 0) {\n\t\t\treturn `(delete@${this.oldPosition} \"${escapeNewLine(this.oldText)}\")`;\n\t\t}\n\t\treturn `(replace@${this.oldPosition} \"${escapeNewLine(this.oldText)}\" with \"${escapeNewLine(this.newText)}\")`;\n\t}\n\n\tprivate static _writeStringSize(str: string): number {\n\t\treturn (\n\t\t\t4 + 2 * str.length\n\t\t);\n\t}\n\n\tprivate static _writeString(b: Uint8Array, str: string, offset: number): number {\n\t\tconst len = str.length;\n\t\tbuffer.writeUInt32BE(b, len, offset); offset += 4;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tbuffer.writeUInt16LE(b, str.charCodeAt(i), offset); offset += 2;\n\t\t}\n\t\treturn offset;\n\t}\n\n\tprivate static _readString(b: Uint8Array, offset: number): string {\n\t\tconst len = buffer.readUInt32BE(b, offset); offset += 4;\n\t\treturn decodeUTF16LE(b, offset, len);\n\t}\n\n\tpublic writeSize(): number {\n\t\treturn (\n\t\t\t+ 4 // oldPosition\n\t\t\t+ 4 // newPosition\n\t\t\t+ TextChange._writeStringSize(this.oldText)\n\t\t\t+ TextChange._writeStringSize(this.newText)\n\t\t);\n\t}\n\n\tpublic write(b: Uint8Array, offset: number): number {\n\t\tbuffer.writeUInt32BE(b, this.oldPosition, offset); offset += 4;\n\t\tbuffer.writeUInt32BE(b, this.newPosition, offset); offset += 4;\n\t\toffset = TextChange._writeString(b, this.oldText, offset);\n\t\toffset = TextChange._writeString(b, this.newText, offset);\n\t\treturn offset;\n\t}\n\n\tpublic static read(b: Uint8Array, offset: number, dest: TextChange[]): number {\n\t\tconst oldPosition = buffer.readUInt32BE(b, offset); offset += 4;\n\t\tconst newPosition = buffer.readUInt32BE(b, offset); offset += 4;\n\t\tconst oldText = TextChange._readString(b, offset); offset += TextChange._writeStringSize(oldText);\n\t\tconst newText = TextChange._readString(b, offset); offset += TextChange._writeStringSize(newText);\n\t\tdest.push(new TextChange(oldPosition, oldText, newPosition, newText));\n\t\treturn offset;\n\t}\n}\n\nexport function compressConsecutiveTextChanges(prevEdits: TextChange[] | null, currEdits: TextChange[]): TextChange[] {\n\tif (prevEdits === null || prevEdits.length === 0) {\n\t\treturn currEdits;\n\t}\n\tconst compressor = new TextChangeCompressor(prevEdits, currEdits);\n\treturn compressor.compress();\n}\n\nclass TextChangeCompressor {\n\n\tprivate _prevEdits: TextChange[];\n\tprivate _currEdits: TextChange[];\n\n\tprivate _result: TextChange[];\n\tprivate _resultLen: number;\n\n\tprivate _prevLen: number;\n\tprivate _prevDeltaOffset: number;\n\n\tprivate _currLen: number;\n\tprivate _currDeltaOffset: number;\n\n\tconstructor(prevEdits: TextChange[], currEdits: TextChange[]) {\n\t\tthis._prevEdits = prevEdits;\n\t\tthis._currEdits = currEdits;\n\n\t\tthis._result = [];\n\t\tthis._resultLen = 0;\n\n\t\tthis._prevLen = this._prevEdits.length;\n\t\tthis._prevDeltaOffset = 0;\n\n\t\tthis._currLen = this._currEdits.length;\n\t\tthis._currDeltaOffset = 0;\n\t}\n\n\tpublic compress(): TextChange[] {\n\t\tlet prevIndex = 0;\n\t\tlet currIndex = 0;\n\n\t\tlet prevEdit = this._getPrev(prevIndex);\n\t\tlet currEdit = this._getCurr(currIndex);\n\n\t\twhile (prevIndex < this._prevLen || currIndex < this._currLen) {\n\n\t\t\tif (prevEdit === null) {\n\t\t\t\tthis._acceptCurr(currEdit!);\n\t\t\t\tcurrEdit = this._getCurr(++currIndex);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (currEdit === null) {\n\t\t\t\tthis._acceptPrev(prevEdit);\n\t\t\t\tprevEdit = this._getPrev(++prevIndex);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (currEdit.oldEnd <= prevEdit.newPosition) {\n\t\t\t\tthis._acceptCurr(currEdit);\n\t\t\t\tcurrEdit = this._getCurr(++currIndex);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (prevEdit.newEnd <= currEdit.oldPosition) {\n\t\t\t\tthis._acceptPrev(prevEdit);\n\t\t\t\tprevEdit = this._getPrev(++prevIndex);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (currEdit.oldPosition < prevEdit.newPosition) {\n\t\t\t\tconst [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newPosition - currEdit.oldPosition);\n\t\t\t\tthis._acceptCurr(e1);\n\t\t\t\tcurrEdit = e2;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (prevEdit.newPosition < currEdit.oldPosition) {\n\t\t\t\tconst [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldPosition - prevEdit.newPosition);\n\t\t\t\tthis._acceptPrev(e1);\n\t\t\t\tprevEdit = e2;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// At this point, currEdit.oldPosition === prevEdit.newPosition\n\n\t\t\tlet mergePrev: TextChange;\n\t\t\tlet mergeCurr: TextChange;\n\n\t\t\tif (currEdit.oldEnd === prevEdit.newEnd) {\n\t\t\t\tmergePrev = prevEdit;\n\t\t\t\tmergeCurr = currEdit;\n\t\t\t\tprevEdit = this._getPrev(++prevIndex);\n\t\t\t\tcurrEdit = this._getCurr(++currIndex);\n\t\t\t} else if (currEdit.oldEnd < prevEdit.newEnd) {\n\t\t\t\tconst [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldLength);\n\t\t\t\tmergePrev = e1;\n\t\t\t\tmergeCurr = currEdit;\n\t\t\t\tprevEdit = e2;\n\t\t\t\tcurrEdit = this._getCurr(++currIndex);\n\t\t\t} else {\n\t\t\t\tconst [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newLength);\n\t\t\t\tmergePrev = prevEdit;\n\t\t\t\tmergeCurr = e1;\n\t\t\t\tprevEdit = this._getPrev(++prevIndex);\n\t\t\t\tcurrEdit = e2;\n\t\t\t}\n\n\t\t\tthis._result[this._resultLen++] = new TextChange(\n\t\t\t\tmergePrev.oldPosition,\n\t\t\t\tmergePrev.oldText,\n\t\t\t\tmergeCurr.newPosition,\n\t\t\t\tmergeCurr.newText\n\t\t\t);\n\t\t\tthis._prevDeltaOffset += mergePrev.newLength - mergePrev.oldLength;\n\t\t\tthis._currDeltaOffset += mergeCurr.newLength - mergeCurr.oldLength;\n\t\t}\n\n\t\tconst merged = TextChangeCompressor._merge(this._result);\n\t\tconst cleaned = TextChangeCompressor._removeNoOps(merged);\n\t\treturn cleaned;\n\t}\n\n\tprivate _acceptCurr(currEdit: TextChange): void {\n\t\tthis._result[this._resultLen++] = TextChangeCompressor._rebaseCurr(this._prevDeltaOffset, currEdit);\n\t\tthis._currDeltaOffset += currEdit.newLength - currEdit.oldLength;\n\t}\n\n\tprivate _getCurr(currIndex: number): TextChange | null {\n\t\treturn (currIndex < this._currLen ? this._currEdits[currIndex] : null);\n\t}\n\n\tprivate _acceptPrev(prevEdit: TextChange): void {\n\t\tthis._result[this._resultLen++] = TextChangeCompressor._rebasePrev(this._currDeltaOffset, prevEdit);\n\t\tthis._prevDeltaOffset += prevEdit.newLength - prevEdit.oldLength;\n\t}\n\n\tprivate _getPrev(prevIndex: number): TextChange | null {\n\t\treturn (prevIndex < this._prevLen ? this._prevEdits[prevIndex] : null);\n\t}\n\n\tprivate static _rebaseCurr(prevDeltaOffset: number, currEdit: TextChange): TextChange {\n\t\treturn new TextChange(\n\t\t\tcurrEdit.oldPosition - prevDeltaOffset,\n\t\t\tcurrEdit.oldText,\n\t\t\tcurrEdit.newPosition,\n\t\t\tcurrEdit.newText\n\t\t);\n\t}\n\n\tprivate static _rebasePrev(currDeltaOffset: number, prevEdit: TextChange): TextChange {\n\t\treturn new TextChange(\n\t\t\tprevEdit.oldPosition,\n\t\t\tprevEdit.oldText,\n\t\t\tprevEdit.newPosition + currDeltaOffset,\n\t\t\tprevEdit.newText\n\t\t);\n\t}\n\n\tprivate static _splitPrev(edit: TextChange, offset: number): [TextChange, TextChange] {\n\t\tconst preText = edit.newText.substr(0, offset);\n\t\tconst postText = edit.newText.substr(offset);\n\n\t\treturn [\n\t\t\tnew TextChange(\n\t\t\t\tedit.oldPosition,\n\t\t\t\tedit.oldText,\n\t\t\t\tedit.newPosition,\n\t\t\t\tpreText\n\t\t\t),\n\t\t\tnew TextChange(\n\t\t\t\tedit.oldEnd,\n\t\t\t\t'',\n\t\t\t\tedit.newPosition + offset,\n\t\t\t\tpostText\n\t\t\t)\n\t\t];\n\t}\n\n\tprivate static _splitCurr(edit: TextChange, offset: number): [TextChange, TextChange] {\n\t\tconst preText = edit.oldText.substr(0, offset);\n\t\tconst postText = edit.oldText.substr(offset);\n\n\t\treturn [\n\t\t\tnew TextChange(\n\t\t\t\tedit.oldPosition,\n\t\t\t\tpreText,\n\t\t\t\tedit.newPosition,\n\t\t\t\tedit.newText\n\t\t\t),\n\t\t\tnew TextChange(\n\t\t\t\tedit.oldPosition + offset,\n\t\t\t\tpostText,\n\t\t\t\tedit.newEnd,\n\t\t\t\t''\n\t\t\t)\n\t\t];\n\t}\n\n\tprivate static _merge(edits: TextChange[]): TextChange[] {\n\t\tif (edits.length === 0) {\n\t\t\treturn edits;\n\t\t}\n\n\t\tlet result: TextChange[] = [], resultLen = 0;\n\n\t\tlet prev = edits[0];\n\t\tfor (let i = 1; i < edits.length; i++) {\n\t\t\tconst curr = edits[i];\n\n\t\t\tif (prev.oldEnd === curr.oldPosition) {\n\t\t\t\t// Merge into `prev`\n\t\t\t\tprev = new TextChange(\n\t\t\t\t\tprev.oldPosition,\n\t\t\t\t\tprev.oldText + curr.oldText,\n\t\t\t\t\tprev.newPosition,\n\t\t\t\t\tprev.newText + curr.newText\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = prev;\n\t\t\t\tprev = curr;\n\t\t\t}\n\t\t}\n\t\tresult[resultLen++] = prev;\n\n\t\treturn result;\n\t}\n\n\tprivate static _removeNoOps(edits: TextChange[]): TextChange[] {\n\t\tif (edits.length === 0) {\n\t\t\treturn edits;\n\t\t}\n\n\t\tlet result: TextChange[] = [], resultLen = 0;\n\n\t\tfor (let i = 0; i < edits.length; i++) {\n\t\t\tconst edit = edits[i];\n\n\t\t\tif (edit.oldText === edit.newText) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult[resultLen++] = edit;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as strings from 'vs/base/common/strings';\nimport { WordCharacterClass, WordCharacterClassifier, getMapForWordSeparators } from 'vs/editor/common/controller/wordCharacterClassifier';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { EndOfLinePreference, FindMatch } from 'vs/editor/common/model';\nimport { TextModel } from 'vs/editor/common/model/textModel';\n\nconst LIMIT_FIND_COUNT = 999;\n\nexport class SearchParams {\n\tpublic readonly searchString: string;\n\tpublic readonly isRegex: boolean;\n\tpublic readonly matchCase: boolean;\n\tpublic readonly wordSeparators: string | null;\n\n\tconstructor(searchString: string, isRegex: boolean, matchCase: boolean, wordSeparators: string | null) {\n\t\tthis.searchString = searchString;\n\t\tthis.isRegex = isRegex;\n\t\tthis.matchCase = matchCase;\n\t\tthis.wordSeparators = wordSeparators;\n\t}\n\n\tpublic parseSearchRequest(): SearchData | null {\n\t\tif (this.searchString === '') {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Try to create a RegExp out of the params\n\t\tlet multiline: boolean;\n\t\tif (this.isRegex) {\n\t\t\tmultiline = isMultilineRegexSource(this.searchString);\n\t\t} else {\n\t\t\tmultiline = (this.searchString.indexOf('\\n') >= 0);\n\t\t}\n\n\t\tlet regex: RegExp | null = null;\n\t\ttry {\n\t\t\tregex = strings.createRegExp(this.searchString, this.isRegex, {\n\t\t\t\tmatchCase: this.matchCase,\n\t\t\t\twholeWord: false,\n\t\t\t\tmultiline: multiline,\n\t\t\t\tglobal: true,\n\t\t\t\tunicode: true\n\t\t\t});\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!regex) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet canUseSimpleSearch = (!this.isRegex && !multiline);\n\t\tif (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {\n\t\t\t// casing might make a difference\n\t\t\tcanUseSimpleSearch = this.matchCase;\n\t\t}\n\n\t\treturn new SearchData(regex, this.wordSeparators ? getMapForWordSeparators(this.wordSeparators) : null, canUseSimpleSearch ? this.searchString : null);\n\t}\n}\n\nexport function isMultilineRegexSource(searchString: string): boolean {\n\tif (!searchString || searchString.length === 0) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0, len = searchString.length; i < len; i++) {\n\t\tconst chCode = searchString.charCodeAt(i);\n\n\t\tif (chCode === CharCode.Backslash) {\n\n\t\t\t// move to next char\n\t\t\ti++;\n\n\t\t\tif (i >= len) {\n\t\t\t\t// string ends with a \\\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst nextChCode = searchString.charCodeAt(i);\n\t\t\tif (nextChCode === CharCode.n || nextChCode === CharCode.r || nextChCode === CharCode.W || nextChCode === CharCode.w) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport class SearchData {\n\n\t/**\n\t * The regex to search for. Always defined.\n\t */\n\tpublic readonly regex: RegExp;\n\t/**\n\t * The word separator classifier.\n\t */\n\tpublic readonly wordSeparators: WordCharacterClassifier | null;\n\t/**\n\t * The simple string to search for (if possible).\n\t */\n\tpublic readonly simpleSearch: string | null;\n\n\tconstructor(regex: RegExp, wordSeparators: WordCharacterClassifier | null, simpleSearch: string | null) {\n\t\tthis.regex = regex;\n\t\tthis.wordSeparators = wordSeparators;\n\t\tthis.simpleSearch = simpleSearch;\n\t}\n}\n\nexport function createFindMatch(range: Range, rawMatches: RegExpExecArray, captureMatches: boolean): FindMatch {\n\tif (!captureMatches) {\n\t\treturn new FindMatch(range, null);\n\t}\n\tlet matches: string[] = [];\n\tfor (let i = 0, len = rawMatches.length; i < len; i++) {\n\t\tmatches[i] = rawMatches[i];\n\t}\n\treturn new FindMatch(range, matches);\n}\n\nclass LineFeedCounter {\n\n\tprivate readonly _lineFeedsOffsets: number[];\n\n\tconstructor(text: string) {\n\t\tlet lineFeedsOffsets: number[] = [];\n\t\tlet lineFeedsOffsetsLen = 0;\n\t\tfor (let i = 0, textLen = text.length; i < textLen; i++) {\n\t\t\tif (text.charCodeAt(i) === CharCode.LineFeed) {\n\t\t\t\tlineFeedsOffsets[lineFeedsOffsetsLen++] = i;\n\t\t\t}\n\t\t}\n\t\tthis._lineFeedsOffsets = lineFeedsOffsets;\n\t}\n\n\tpublic findLineFeedCountBeforeOffset(offset: number): number {\n\t\tconst lineFeedsOffsets = this._lineFeedsOffsets;\n\t\tlet min = 0;\n\t\tlet max = lineFeedsOffsets.length - 1;\n\n\t\tif (max === -1) {\n\t\t\t// no line feeds\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (offset <= lineFeedsOffsets[0]) {\n\t\t\t// before first line feed\n\t\t\treturn 0;\n\t\t}\n\n\t\twhile (min < max) {\n\t\t\tconst mid = min + ((max - min) / 2 >> 0);\n\n\t\t\tif (lineFeedsOffsets[mid] >= offset) {\n\t\t\t\tmax = mid - 1;\n\t\t\t} else {\n\t\t\t\tif (lineFeedsOffsets[mid + 1] >= offset) {\n\t\t\t\t\t// bingo!\n\t\t\t\t\tmin = mid;\n\t\t\t\t\tmax = mid;\n\t\t\t\t} else {\n\t\t\t\t\tmin = mid + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn min + 1;\n\t}\n}\n\nexport class TextModelSearch {\n\n\tpublic static findMatches(model: TextModel, searchParams: SearchParams, searchRange: Range, captureMatches: boolean, limitResultCount: number): FindMatch[] {\n\t\tconst searchData = searchParams.parseSearchRequest();\n\t\tif (!searchData) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (searchData.regex.multiline) {\n\t\t\treturn this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);\n\t\t}\n\t\treturn this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);\n\t}\n\n\t/**\n\t * Multiline search always executes on the lines concatenated with \\n.\n\t * We must therefore compensate for the count of \\n in case the model is CRLF\n\t */\n\tprivate static _getMultilineMatchRange(model: TextModel, deltaOffset: number, text: string, lfCounter: LineFeedCounter | null, matchIndex: number, match0: string): Range {\n\t\tlet startOffset: number;\n\t\tlet lineFeedCountBeforeMatch = 0;\n\t\tif (lfCounter) {\n\t\t\tlineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);\n\t\t\tstartOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \\r as there were \\n */;\n\t\t} else {\n\t\t\tstartOffset = deltaOffset + matchIndex;\n\t\t}\n\n\t\tlet endOffset: number;\n\t\tif (lfCounter) {\n\t\t\tlet lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);\n\t\t\tlet lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;\n\t\t\tendOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \\r as there were \\n */;\n\t\t} else {\n\t\t\tendOffset = startOffset + match0.length;\n\t\t}\n\n\t\tconst startPosition = model.getPositionAt(startOffset);\n\t\tconst endPosition = model.getPositionAt(endOffset);\n\t\treturn new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t}\n\n\tprivate static _doFindMatchesMultiline(model: TextModel, searchRange: Range, searcher: Searcher, captureMatches: boolean, limitResultCount: number): FindMatch[] {\n\t\tconst deltaOffset = model.getOffsetAt(searchRange.getStartPosition());\n\t\t// We always execute multiline search over the lines joined with \\n\n\t\t// This makes it that \\n will match the EOL for both CRLF and LF models\n\t\t// We compensate for offset errors in `_getMultilineMatchRange`\n\t\tconst text = model.getValueInRange(searchRange, EndOfLinePreference.LF);\n\t\tconst lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n\n\t\tconst result: FindMatch[] = [];\n\t\tlet counter = 0;\n\n\t\tlet m: RegExpExecArray | null;\n\t\tsearcher.reset(0);\n\t\twhile ((m = searcher.next(text))) {\n\t\t\tresult[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n\t\t\tif (counter >= limitResultCount) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _doFindMatchesLineByLine(model: TextModel, searchRange: Range, searchData: SearchData, captureMatches: boolean, limitResultCount: number): FindMatch[] {\n\t\tconst result: FindMatch[] = [];\n\t\tlet resultLen = 0;\n\n\t\t// Early case for a search range that starts & stops on the same line number\n\t\tif (searchRange.startLineNumber === searchRange.endLineNumber) {\n\t\t\tconst text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\n\t\t\tresultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n\t\t\treturn result;\n\t\t}\n\n\t\t// Collect results from first line\n\t\tconst text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);\n\t\tresultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n\n\t\t// Collect results from middle lines\n\t\tfor (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {\n\t\t\tresultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n\t\t}\n\n\t\t// Collect results from last line\n\t\tif (resultLen < limitResultCount) {\n\t\t\tconst text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);\n\t\t\tresultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _findMatchesInLine(searchData: SearchData, text: string, lineNumber: number, deltaOffset: number, resultLen: number, result: FindMatch[], captureMatches: boolean, limitResultCount: number): number {\n\t\tconst wordSeparators = searchData.wordSeparators;\n\t\tif (!captureMatches && searchData.simpleSearch) {\n\t\t\tconst searchString = searchData.simpleSearch;\n\t\t\tconst searchStringLen = searchString.length;\n\t\t\tconst textLength = text.length;\n\n\t\t\tlet lastMatchIndex = -searchStringLen;\n\t\t\twhile ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n\t\t\t\tif (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n\t\t\t\t\tresult[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n\t\t\t\t\tif (resultLen >= limitResultCount) {\n\t\t\t\t\t\treturn resultLen;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resultLen;\n\t\t}\n\n\t\tconst searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n\t\tlet m: RegExpExecArray | null;\n\t\t// Reset regex to search from the beginning\n\t\tsearcher.reset(0);\n\t\tdo {\n\t\t\tm = searcher.next(text);\n\t\t\tif (m) {\n\t\t\t\tresult[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n\t\t\t\tif (resultLen >= limitResultCount) {\n\t\t\t\t\treturn resultLen;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (m);\n\t\treturn resultLen;\n\t}\n\n\tpublic static findNextMatch(model: TextModel, searchParams: SearchParams, searchStart: Position, captureMatches: boolean): FindMatch | null {\n\t\tconst searchData = searchParams.parseSearchRequest();\n\t\tif (!searchData) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n\n\t\tif (searchData.regex.multiline) {\n\t\t\treturn this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);\n\t\t}\n\t\treturn this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);\n\t}\n\n\tprivate static _doFindNextMatchMultiline(model: TextModel, searchStart: Position, searcher: Searcher, captureMatches: boolean): FindMatch | null {\n\t\tconst searchTextStart = new Position(searchStart.lineNumber, 1);\n\t\tconst deltaOffset = model.getOffsetAt(searchTextStart);\n\t\tconst lineCount = model.getLineCount();\n\t\t// We always execute multiline search over the lines joined with \\n\n\t\t// This makes it that \\n will match the EOL for both CRLF and LF models\n\t\t// We compensate for offset errors in `_getMultilineMatchRange`\n\t\tconst text = model.getValueInRange(new Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), EndOfLinePreference.LF);\n\t\tconst lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n\t\tsearcher.reset(searchStart.column - 1);\n\t\tlet m = searcher.next(text);\n\t\tif (m) {\n\t\t\treturn createFindMatch(\n\t\t\t\tthis._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]),\n\t\t\t\tm,\n\t\t\t\tcaptureMatches\n\t\t\t);\n\t\t}\n\n\t\tif (searchStart.lineNumber !== 1 || searchStart.column !== 1) {\n\t\t\t// Try again from the top\n\t\t\treturn this._doFindNextMatchMultiline(model, new Position(1, 1), searcher, captureMatches);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _doFindNextMatchLineByLine(model: TextModel, searchStart: Position, searcher: Searcher, captureMatches: boolean): FindMatch | null {\n\t\tconst lineCount = model.getLineCount();\n\t\tconst startLineNumber = searchStart.lineNumber;\n\n\t\t// Look in first line\n\t\tconst text = model.getLineContent(startLineNumber);\n\t\tconst r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\n\t\tfor (let i = 1; i <= lineCount; i++) {\n\t\t\tconst lineIndex = (startLineNumber + i - 1) % lineCount;\n\t\t\tconst text = model.getLineContent(lineIndex + 1);\n\t\t\tconst r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);\n\t\t\tif (r) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _findFirstMatchInLine(searcher: Searcher, text: string, lineNumber: number, fromColumn: number, captureMatches: boolean): FindMatch | null {\n\t\t// Set regex to search from column\n\t\tsearcher.reset(fromColumn - 1);\n\t\tconst m: RegExpExecArray | null = searcher.next(text);\n\t\tif (m) {\n\t\t\treturn createFindMatch(\n\t\t\t\tnew Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length),\n\t\t\t\tm,\n\t\t\t\tcaptureMatches\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static findPreviousMatch(model: TextModel, searchParams: SearchParams, searchStart: Position, captureMatches: boolean): FindMatch | null {\n\t\tconst searchData = searchParams.parseSearchRequest();\n\t\tif (!searchData) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n\n\t\tif (searchData.regex.multiline) {\n\t\t\treturn this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);\n\t\t}\n\t\treturn this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);\n\t}\n\n\tprivate static _doFindPreviousMatchMultiline(model: TextModel, searchStart: Position, searcher: Searcher, captureMatches: boolean): FindMatch | null {\n\t\tconst matches = this._doFindMatchesMultiline(model, new Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);\n\t\tif (matches.length > 0) {\n\t\t\treturn matches[matches.length - 1];\n\t\t}\n\n\t\tconst lineCount = model.getLineCount();\n\t\tif (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {\n\t\t\t// Try again with all content\n\t\t\treturn this._doFindPreviousMatchMultiline(model, new Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _doFindPreviousMatchLineByLine(model: TextModel, searchStart: Position, searcher: Searcher, captureMatches: boolean): FindMatch | null {\n\t\tconst lineCount = model.getLineCount();\n\t\tconst startLineNumber = searchStart.lineNumber;\n\n\t\t// Look in first line\n\t\tconst text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);\n\t\tconst r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\n\t\tfor (let i = 1; i <= lineCount; i++) {\n\t\t\tconst lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\n\t\t\tconst text = model.getLineContent(lineIndex + 1);\n\t\t\tconst r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);\n\t\t\tif (r) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _findLastMatchInLine(searcher: Searcher, text: string, lineNumber: number, captureMatches: boolean): FindMatch | null {\n\t\tlet bestResult: FindMatch | null = null;\n\t\tlet m: RegExpExecArray | null;\n\t\tsearcher.reset(0);\n\t\twhile ((m = searcher.next(text))) {\n\t\t\tbestResult = createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n\t\t}\n\t\treturn bestResult;\n\t}\n}\n\nfunction leftIsWordBounday(wordSeparators: WordCharacterClassifier, text: string, textLength: number, matchStartIndex: number, matchLength: number): boolean {\n\tif (matchStartIndex === 0) {\n\t\t// Match starts at start of string\n\t\treturn true;\n\t}\n\n\tconst charBefore = text.charCodeAt(matchStartIndex - 1);\n\tif (wordSeparators.get(charBefore) !== WordCharacterClass.Regular) {\n\t\t// The character before the match is a word separator\n\t\treturn true;\n\t}\n\n\tif (charBefore === CharCode.CarriageReturn || charBefore === CharCode.LineFeed) {\n\t\t// The character before the match is line break or carriage return.\n\t\treturn true;\n\t}\n\n\tif (matchLength > 0) {\n\t\tconst firstCharInMatch = text.charCodeAt(matchStartIndex);\n\t\tif (wordSeparators.get(firstCharInMatch) !== WordCharacterClass.Regular) {\n\t\t\t// The first character inside the match is a word separator\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction rightIsWordBounday(wordSeparators: WordCharacterClassifier, text: string, textLength: number, matchStartIndex: number, matchLength: number): boolean {\n\tif (matchStartIndex + matchLength === textLength) {\n\t\t// Match ends at end of string\n\t\treturn true;\n\t}\n\n\tconst charAfter = text.charCodeAt(matchStartIndex + matchLength);\n\tif (wordSeparators.get(charAfter) !== WordCharacterClass.Regular) {\n\t\t// The character after the match is a word separator\n\t\treturn true;\n\t}\n\n\tif (charAfter === CharCode.CarriageReturn || charAfter === CharCode.LineFeed) {\n\t\t// The character after the match is line break or carriage return.\n\t\treturn true;\n\t}\n\n\tif (matchLength > 0) {\n\t\tconst lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);\n\t\tif (wordSeparators.get(lastCharInMatch) !== WordCharacterClass.Regular) {\n\t\t\t// The last character in the match is a word separator\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport function isValidMatch(wordSeparators: WordCharacterClassifier, text: string, textLength: number, matchStartIndex: number, matchLength: number): boolean {\n\treturn (\n\t\tleftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)\n\t\t&& rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)\n\t);\n}\n\nexport class Searcher {\n\tpublic readonly _wordSeparators: WordCharacterClassifier | null;\n\tprivate readonly _searchRegex: RegExp;\n\tprivate _prevMatchStartIndex: number;\n\tprivate _prevMatchLength: number;\n\n\tconstructor(wordSeparators: WordCharacterClassifier | null, searchRegex: RegExp,) {\n\t\tthis._wordSeparators = wordSeparators;\n\t\tthis._searchRegex = searchRegex;\n\t\tthis._prevMatchStartIndex = -1;\n\t\tthis._prevMatchLength = 0;\n\t}\n\n\tpublic reset(lastIndex: number): void {\n\t\tthis._searchRegex.lastIndex = lastIndex;\n\t\tthis._prevMatchStartIndex = -1;\n\t\tthis._prevMatchLength = 0;\n\t}\n\n\tpublic next(text: string): RegExpExecArray | null {\n\t\tconst textLength = text.length;\n\n\t\tlet m: RegExpExecArray | null;\n\t\tdo {\n\t\t\tif (this._prevMatchStartIndex + this._prevMatchLength === textLength) {\n\t\t\t\t// Reached the end of the line\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tm = this._searchRegex.exec(text);\n\t\t\tif (!m) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst matchStartIndex = m.index;\n\t\t\tconst matchLength = m[0].length;\n\t\t\tif (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {\n\t\t\t\tif (matchLength === 0) {\n\t\t\t\t\t// the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here\n\t\t\t\t\t// we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise\n\t\t\t\t\tif (strings.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {\n\t\t\t\t\t\tthis._searchRegex.lastIndex += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._searchRegex.lastIndex += 1;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Exit early if the regex matches the same range twice\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthis._prevMatchStartIndex = matchStartIndex;\n\t\t\tthis._prevMatchLength = matchLength;\n\n\t\t\tif (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {\n\t\t\t\treturn m;\n\t\t\t}\n\n\t\t} while (m);\n\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { FindMatch, ITextSnapshot } from 'vs/editor/common/model';\nimport { NodeColor, SENTINEL, TreeNode, fixInsert, leftest, rbDelete, righttest, updateTreeMetadata } from 'vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase';\nimport { SearchData, Searcher, createFindMatch, isValidMatch } from 'vs/editor/common/model/textModelSearch';\n\n// const lfRegex = new RegExp(/\\r\\n|\\r|\\n/g);\nexport const AverageBufferSize = 65535;\n\nexport function createUintArray(arr: number[]): Uint32Array | Uint16Array {\n\tlet r;\n\tif (arr[arr.length - 1] < 65536) {\n\t\tr = new Uint16Array(arr.length);\n\t} else {\n\t\tr = new Uint32Array(arr.length);\n\t}\n\tr.set(arr, 0);\n\treturn r;\n}\n\nexport class LineStarts {\n\tconstructor(\n\t\tpublic readonly lineStarts: Uint32Array | Uint16Array | number[],\n\t\tpublic readonly cr: number,\n\t\tpublic readonly lf: number,\n\t\tpublic readonly crlf: number,\n\t\tpublic readonly isBasicASCII: boolean\n\t) { }\n}\n\nexport function createLineStartsFast(str: string, readonly: boolean = true): Uint32Array | Uint16Array | number[] {\n\tlet r: number[] = [0], rLength = 1;\n\n\tfor (let i = 0, len = str.length; i < len; i++) {\n\t\tconst chr = str.charCodeAt(i);\n\n\t\tif (chr === CharCode.CarriageReturn) {\n\t\t\tif (i + 1 < len && str.charCodeAt(i + 1) === CharCode.LineFeed) {\n\t\t\t\t// \\r\\n... case\n\t\t\t\tr[rLength++] = i + 2;\n\t\t\t\ti++; // skip \\n\n\t\t\t} else {\n\t\t\t\t// \\r... case\n\t\t\t\tr[rLength++] = i + 1;\n\t\t\t}\n\t\t} else if (chr === CharCode.LineFeed) {\n\t\t\tr[rLength++] = i + 1;\n\t\t}\n\t}\n\tif (readonly) {\n\t\treturn createUintArray(r);\n\t} else {\n\t\treturn r;\n\t}\n}\n\nexport function createLineStarts(r: number[], str: string): LineStarts {\n\tr.length = 0;\n\tr[0] = 0;\n\tlet rLength = 1;\n\tlet cr = 0, lf = 0, crlf = 0;\n\tlet isBasicASCII = true;\n\tfor (let i = 0, len = str.length; i < len; i++) {\n\t\tconst chr = str.charCodeAt(i);\n\n\t\tif (chr === CharCode.CarriageReturn) {\n\t\t\tif (i + 1 < len && str.charCodeAt(i + 1) === CharCode.LineFeed) {\n\t\t\t\t// \\r\\n... case\n\t\t\t\tcrlf++;\n\t\t\t\tr[rLength++] = i + 2;\n\t\t\t\ti++; // skip \\n\n\t\t\t} else {\n\t\t\t\tcr++;\n\t\t\t\t// \\r... case\n\t\t\t\tr[rLength++] = i + 1;\n\t\t\t}\n\t\t} else if (chr === CharCode.LineFeed) {\n\t\t\tlf++;\n\t\t\tr[rLength++] = i + 1;\n\t\t} else {\n\t\t\tif (isBasicASCII) {\n\t\t\t\tif (chr !== CharCode.Tab && (chr < 32 || chr > 126)) {\n\t\t\t\t\tisBasicASCII = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tconst result = new LineStarts(createUintArray(r), cr, lf, crlf, isBasicASCII);\n\tr.length = 0;\n\n\treturn result;\n}\n\nexport interface NodePosition {\n\t/**\n\t * Piece Index\n\t */\n\tnode: TreeNode;\n\t/**\n\t * remainer in current piece.\n\t*/\n\tremainder: number;\n\t/**\n\t * node start offset in document.\n\t */\n\tnodeStartOffset: number;\n}\n\nexport interface BufferCursor {\n\t/**\n\t * Line number in current buffer\n\t */\n\tline: number;\n\t/**\n\t * Column number in current buffer\n\t */\n\tcolumn: number;\n}\n\nexport class Piece {\n\treadonly bufferIndex: number;\n\treadonly start: BufferCursor;\n\treadonly end: BufferCursor;\n\treadonly length: number;\n\treadonly lineFeedCnt: number;\n\n\tconstructor(bufferIndex: number, start: BufferCursor, end: BufferCursor, lineFeedCnt: number, length: number) {\n\t\tthis.bufferIndex = bufferIndex;\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.lineFeedCnt = lineFeedCnt;\n\t\tthis.length = length;\n\t}\n}\n\nexport class StringBuffer {\n\tbuffer: string;\n\tlineStarts: Uint32Array | Uint16Array | number[];\n\n\tconstructor(buffer: string, lineStarts: Uint32Array | Uint16Array | number[]) {\n\t\tthis.buffer = buffer;\n\t\tthis.lineStarts = lineStarts;\n\t}\n}\n\n/**\n * Readonly snapshot for piece tree.\n * In a real multiple thread environment, to make snapshot reading always work correctly, we need to\n * 1. Make TreeNode.piece immutable, then reading and writing can run in parallel.\n * 2. TreeNode/Buffers normalization should not happen during snapshot reading.\n */\nclass PieceTreeSnapshot implements ITextSnapshot {\n\tprivate readonly _pieces: Piece[];\n\tprivate _index: number;\n\tprivate readonly _tree: PieceTreeBase;\n\tprivate readonly _BOM: string;\n\n\tconstructor(tree: PieceTreeBase, BOM: string) {\n\t\tthis._pieces = [];\n\t\tthis._tree = tree;\n\t\tthis._BOM = BOM;\n\t\tthis._index = 0;\n\t\tif (tree.root !== SENTINEL) {\n\t\t\ttree.iterate(tree.root, node => {\n\t\t\t\tif (node !== SENTINEL) {\n\t\t\t\t\tthis._pieces.push(node.piece);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\t}\n\n\tread(): string | null {\n\t\tif (this._pieces.length === 0) {\n\t\t\tif (this._index === 0) {\n\t\t\t\tthis._index++;\n\t\t\t\treturn this._BOM;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tif (this._index > this._pieces.length - 1) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this._index === 0) {\n\t\t\treturn this._BOM + this._tree.getPieceContent(this._pieces[this._index++]);\n\t\t}\n\t\treturn this._tree.getPieceContent(this._pieces[this._index++]);\n\t}\n}\n\ninterface CacheEntry {\n\tnode: TreeNode;\n\tnodeStartOffset: number;\n\tnodeStartLineNumber?: number;\n}\n\nclass PieceTreeSearchCache {\n\tprivate readonly _limit: number;\n\tprivate _cache: CacheEntry[];\n\n\tconstructor(limit: number) {\n\t\tthis._limit = limit;\n\t\tthis._cache = [];\n\t}\n\n\tpublic get(offset: number): CacheEntry | null {\n\t\tfor (let i = this._cache.length - 1; i >= 0; i--) {\n\t\t\tlet nodePos = this._cache[i];\n\t\t\tif (nodePos.nodeStartOffset <= offset && nodePos.nodeStartOffset + nodePos.node.piece.length >= offset) {\n\t\t\t\treturn nodePos;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic get2(lineNumber: number): { node: TreeNode, nodeStartOffset: number, nodeStartLineNumber: number } | null {\n\t\tfor (let i = this._cache.length - 1; i >= 0; i--) {\n\t\t\tlet nodePos = this._cache[i];\n\t\t\tif (nodePos.nodeStartLineNumber && nodePos.nodeStartLineNumber < lineNumber && nodePos.nodeStartLineNumber + nodePos.node.piece.lineFeedCnt >= lineNumber) {\n\t\t\t\treturn <{ node: TreeNode, nodeStartOffset: number, nodeStartLineNumber: number }>nodePos;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic set(nodePosition: CacheEntry) {\n\t\tif (this._cache.length >= this._limit) {\n\t\t\tthis._cache.shift();\n\t\t}\n\t\tthis._cache.push(nodePosition);\n\t}\n\n\tpublic validate(offset: number) {\n\t\tlet hasInvalidVal = false;\n\t\tlet tmp: Array<CacheEntry | null> = this._cache;\n\t\tfor (let i = 0; i < tmp.length; i++) {\n\t\t\tlet nodePos = tmp[i]!;\n\t\t\tif (nodePos.node.parent === null || nodePos.nodeStartOffset >= offset) {\n\t\t\t\ttmp[i] = null;\n\t\t\t\thasInvalidVal = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (hasInvalidVal) {\n\t\t\tlet newArr: CacheEntry[] = [];\n\t\t\tfor (const entry of tmp) {\n\t\t\t\tif (entry !== null) {\n\t\t\t\t\tnewArr.push(entry);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._cache = newArr;\n\t\t}\n\t}\n}\n\nexport class PieceTreeBase {\n\troot!: TreeNode;\n\tprotected _buffers!: StringBuffer[]; // 0 is change buffer, others are readonly original buffer.\n\tprotected _lineCnt!: number;\n\tprotected _length!: number;\n\tprotected _EOL!: '\\r\\n' | '\\n';\n\tprotected _EOLLength!: number;\n\tprotected _EOLNormalized!: boolean;\n\tprivate _lastChangeBufferPos!: BufferCursor;\n\tprivate _searchCache!: PieceTreeSearchCache;\n\tprivate _lastVisitedLine!: { lineNumber: number; value: string; };\n\n\tconstructor(chunks: StringBuffer[], eol: '\\r\\n' | '\\n', eolNormalized: boolean) {\n\t\tthis.create(chunks, eol, eolNormalized);\n\t}\n\n\tcreate(chunks: StringBuffer[], eol: '\\r\\n' | '\\n', eolNormalized: boolean) {\n\t\tthis._buffers = [\n\t\t\tnew StringBuffer('', [0])\n\t\t];\n\t\tthis._lastChangeBufferPos = { line: 0, column: 0 };\n\t\tthis.root = SENTINEL;\n\t\tthis._lineCnt = 1;\n\t\tthis._length = 0;\n\t\tthis._EOL = eol;\n\t\tthis._EOLLength = eol.length;\n\t\tthis._EOLNormalized = eolNormalized;\n\n\t\tlet lastNode: TreeNode | null = null;\n\t\tfor (let i = 0, len = chunks.length; i < len; i++) {\n\t\t\tif (chunks[i].buffer.length > 0) {\n\t\t\t\tif (!chunks[i].lineStarts) {\n\t\t\t\t\tchunks[i].lineStarts = createLineStartsFast(chunks[i].buffer);\n\t\t\t\t}\n\n\t\t\t\tlet piece = new Piece(\n\t\t\t\t\ti + 1,\n\t\t\t\t\t{ line: 0, column: 0 },\n\t\t\t\t\t{ line: chunks[i].lineStarts.length - 1, column: chunks[i].buffer.length - chunks[i].lineStarts[chunks[i].lineStarts.length - 1] },\n\t\t\t\t\tchunks[i].lineStarts.length - 1,\n\t\t\t\t\tchunks[i].buffer.length\n\t\t\t\t);\n\t\t\t\tthis._buffers.push(chunks[i]);\n\t\t\t\tlastNode = this.rbInsertRight(lastNode, piece);\n\t\t\t}\n\t\t}\n\n\t\tthis._searchCache = new PieceTreeSearchCache(1);\n\t\tthis._lastVisitedLine = { lineNumber: 0, value: '' };\n\t\tthis.computeBufferMetadata();\n\t}\n\n\tnormalizeEOL(eol: '\\r\\n' | '\\n') {\n\t\tlet averageBufferSize = AverageBufferSize;\n\t\tlet min = averageBufferSize - Math.floor(averageBufferSize / 3);\n\t\tlet max = min * 2;\n\n\t\tlet tempChunk = '';\n\t\tlet tempChunkLen = 0;\n\t\tlet chunks: StringBuffer[] = [];\n\n\t\tthis.iterate(this.root, node => {\n\t\t\tlet str = this.getNodeContent(node);\n\t\t\tlet len = str.length;\n\t\t\tif (tempChunkLen <= min || tempChunkLen + len < max) {\n\t\t\t\ttempChunk += str;\n\t\t\t\ttempChunkLen += len;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// flush anyways\n\t\t\tlet text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n\t\t\tchunks.push(new StringBuffer(text, createLineStartsFast(text)));\n\t\t\ttempChunk = str;\n\t\t\ttempChunkLen = len;\n\t\t\treturn true;\n\t\t});\n\n\t\tif (tempChunkLen > 0) {\n\t\t\tlet text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n\t\t\tchunks.push(new StringBuffer(text, createLineStartsFast(text)));\n\t\t}\n\n\t\tthis.create(chunks, eol, true);\n\t}\n\n\t// #region Buffer API\n\tpublic getEOL(): '\\r\\n' | '\\n' {\n\t\treturn this._EOL;\n\t}\n\n\tpublic setEOL(newEOL: '\\r\\n' | '\\n'): void {\n\t\tthis._EOL = newEOL;\n\t\tthis._EOLLength = this._EOL.length;\n\t\tthis.normalizeEOL(newEOL);\n\t}\n\n\tpublic createSnapshot(BOM: string): ITextSnapshot {\n\t\treturn new PieceTreeSnapshot(this, BOM);\n\t}\n\n\tpublic equal(other: PieceTreeBase): boolean {\n\t\tif (this.getLength() !== other.getLength()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.getLineCount() !== other.getLineCount()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet offset = 0;\n\t\tlet ret = this.iterate(this.root, node => {\n\t\t\tif (node === SENTINEL) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tlet str = this.getNodeContent(node);\n\t\t\tlet len = str.length;\n\t\t\tlet startPosition = other.nodeAt(offset);\n\t\t\tlet endPosition = other.nodeAt(offset + len);\n\t\t\tlet val = other.getValueInRange2(startPosition, endPosition);\n\n\t\t\treturn str === val;\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\tpublic getOffsetAt(lineNumber: number, column: number): number {\n\t\tlet leftLen = 0; // inorder\n\n\t\tlet x = this.root;\n\n\t\twhile (x !== SENTINEL) {\n\t\t\tif (x.left !== SENTINEL && x.lf_left + 1 >= lineNumber) {\n\t\t\t\tx = x.left;\n\t\t\t} else if (x.lf_left + x.piece.lineFeedCnt + 1 >= lineNumber) {\n\t\t\t\tleftLen += x.size_left;\n\t\t\t\t// lineNumber >= 2\n\t\t\t\tlet accumualtedValInCurrentIndex = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n\t\t\t\treturn leftLen += accumualtedValInCurrentIndex + column - 1;\n\t\t\t} else {\n\t\t\t\tlineNumber -= x.lf_left + x.piece.lineFeedCnt;\n\t\t\t\tleftLen += x.size_left + x.piece.length;\n\t\t\t\tx = x.right;\n\t\t\t}\n\t\t}\n\n\t\treturn leftLen;\n\t}\n\n\tpublic getPositionAt(offset: number): Position {\n\t\toffset = Math.floor(offset);\n\t\toffset = Math.max(0, offset);\n\n\t\tlet x = this.root;\n\t\tlet lfCnt = 0;\n\t\tlet originalOffset = offset;\n\n\t\twhile (x !== SENTINEL) {\n\t\t\tif (x.size_left !== 0 && x.size_left >= offset) {\n\t\t\t\tx = x.left;\n\t\t\t} else if (x.size_left + x.piece.length >= offset) {\n\t\t\t\tlet out = this.getIndexOf(x, offset - x.size_left);\n\n\t\t\t\tlfCnt += x.lf_left + out.index;\n\n\t\t\t\tif (out.index === 0) {\n\t\t\t\t\tlet lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n\t\t\t\t\tlet column = originalOffset - lineStartOffset;\n\t\t\t\t\treturn new Position(lfCnt + 1, column + 1);\n\t\t\t\t}\n\n\t\t\t\treturn new Position(lfCnt + 1, out.remainder + 1);\n\t\t\t} else {\n\t\t\t\toffset -= x.size_left + x.piece.length;\n\t\t\t\tlfCnt += x.lf_left + x.piece.lineFeedCnt;\n\n\t\t\t\tif (x.right === SENTINEL) {\n\t\t\t\t\t// last node\n\t\t\t\t\tlet lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n\t\t\t\t\tlet column = originalOffset - offset - lineStartOffset;\n\t\t\t\t\treturn new Position(lfCnt + 1, column + 1);\n\t\t\t\t} else {\n\t\t\t\t\tx = x.right;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Position(1, 1);\n\t}\n\n\tpublic getValueInRange(range: Range, eol?: string): string {\n\t\tif (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\treturn '';\n\t\t}\n\n\t\tlet startPosition = this.nodeAt2(range.startLineNumber, range.startColumn);\n\t\tlet endPosition = this.nodeAt2(range.endLineNumber, range.endColumn);\n\n\t\tlet value = this.getValueInRange2(startPosition, endPosition);\n\t\tif (eol) {\n\t\t\tif (eol !== this._EOL || !this._EOLNormalized) {\n\t\t\t\treturn value.replace(/\\r\\n|\\r|\\n/g, eol);\n\t\t\t}\n\n\t\t\tif (eol === this.getEOL() && this._EOLNormalized) {\n\t\t\t\tif (eol === '\\r\\n') {\n\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\treturn value.replace(/\\r\\n|\\r|\\n/g, eol);\n\t\t}\n\t\treturn value;\n\t}\n\n\tpublic getValueInRange2(startPosition: NodePosition, endPosition: NodePosition): string {\n\t\tif (startPosition.node === endPosition.node) {\n\t\t\tlet node = startPosition.node;\n\t\t\tlet buffer = this._buffers[node.piece.bufferIndex].buffer;\n\t\t\tlet startOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n\t\t\treturn buffer.substring(startOffset + startPosition.remainder, startOffset + endPosition.remainder);\n\t\t}\n\n\t\tlet x = startPosition.node;\n\t\tlet buffer = this._buffers[x.piece.bufferIndex].buffer;\n\t\tlet startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n\t\tlet ret = buffer.substring(startOffset + startPosition.remainder, startOffset + x.piece.length);\n\n\t\tx = x.next();\n\t\twhile (x !== SENTINEL) {\n\t\t\tlet buffer = this._buffers[x.piece.bufferIndex].buffer;\n\t\t\tlet startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n\n\t\t\tif (x === endPosition.node) {\n\t\t\t\tret += buffer.substring(startOffset, startOffset + endPosition.remainder);\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tret += buffer.substr(startOffset, x.piece.length);\n\t\t\t}\n\n\t\t\tx = x.next();\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\tlet lines: string[] = [];\n\t\tlet linesLength = 0;\n\t\tlet currentLine = '';\n\t\tlet danglingCR = false;\n\n\t\tthis.iterate(this.root, node => {\n\t\t\tif (node === SENTINEL) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst piece = node.piece;\n\t\t\tlet pieceLength = piece.length;\n\t\t\tif (pieceLength === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst buffer = this._buffers[piece.bufferIndex].buffer;\n\t\t\tconst lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n\n\t\t\tconst pieceStartLine = piece.start.line;\n\t\t\tconst pieceEndLine = piece.end.line;\n\t\t\tlet pieceStartOffset = lineStarts[pieceStartLine] + piece.start.column;\n\n\t\t\tif (danglingCR) {\n\t\t\t\tif (buffer.charCodeAt(pieceStartOffset) === CharCode.LineFeed) {\n\t\t\t\t\t// pretend the \\n was in the previous piece..\n\t\t\t\t\tpieceStartOffset++;\n\t\t\t\t\tpieceLength--;\n\t\t\t\t}\n\t\t\t\tlines[linesLength++] = currentLine;\n\t\t\t\tcurrentLine = '';\n\t\t\t\tdanglingCR = false;\n\t\t\t\tif (pieceLength === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (pieceStartLine === pieceEndLine) {\n\t\t\t\t// this piece has no new lines\n\t\t\t\tif (!this._EOLNormalized && buffer.charCodeAt(pieceStartOffset + pieceLength - 1) === CharCode.CarriageReturn) {\n\t\t\t\t\tdanglingCR = true;\n\t\t\t\t\tcurrentLine += buffer.substr(pieceStartOffset, pieceLength - 1);\n\t\t\t\t} else {\n\t\t\t\t\tcurrentLine += buffer.substr(pieceStartOffset, pieceLength);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// add the text before the first line start in this piece\n\t\t\tcurrentLine += (\n\t\t\t\tthis._EOLNormalized\n\t\t\t\t\t? buffer.substring(pieceStartOffset, Math.max(pieceStartOffset, lineStarts[pieceStartLine + 1] - this._EOLLength))\n\t\t\t\t\t: buffer.substring(pieceStartOffset, lineStarts[pieceStartLine + 1]).replace(/(\\r\\n|\\r|\\n)$/, '')\n\t\t\t);\n\t\t\tlines[linesLength++] = currentLine;\n\n\t\t\tfor (let line = pieceStartLine + 1; line < pieceEndLine; line++) {\n\t\t\t\tcurrentLine = (\n\t\t\t\t\tthis._EOLNormalized\n\t\t\t\t\t\t? buffer.substring(lineStarts[line], lineStarts[line + 1] - this._EOLLength)\n\t\t\t\t\t\t: buffer.substring(lineStarts[line], lineStarts[line + 1]).replace(/(\\r\\n|\\r|\\n)$/, '')\n\t\t\t\t);\n\t\t\t\tlines[linesLength++] = currentLine;\n\t\t\t}\n\n\t\t\tif (!this._EOLNormalized && buffer.charCodeAt(lineStarts[pieceEndLine] + piece.end.column - 1) === CharCode.CarriageReturn) {\n\t\t\t\tdanglingCR = true;\n\t\t\t\tif (piece.end.column === 0) {\n\t\t\t\t\t// The last line ended with a \\r, let's undo the push, it will be pushed by next iteration\n\t\t\t\t\tlinesLength--;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tif (danglingCR) {\n\t\t\tlines[linesLength++] = currentLine;\n\t\t\tcurrentLine = '';\n\t\t}\n\n\t\tlines[linesLength++] = currentLine;\n\t\treturn lines;\n\t}\n\n\tpublic getLength(): number {\n\t\treturn this._length;\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._lineCnt;\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\tif (this._lastVisitedLine.lineNumber === lineNumber) {\n\t\t\treturn this._lastVisitedLine.value;\n\t\t}\n\n\t\tthis._lastVisitedLine.lineNumber = lineNumber;\n\n\t\tif (lineNumber === this._lineCnt) {\n\t\t\tthis._lastVisitedLine.value = this.getLineRawContent(lineNumber);\n\t\t} else if (this._EOLNormalized) {\n\t\t\tthis._lastVisitedLine.value = this.getLineRawContent(lineNumber, this._EOLLength);\n\t\t} else {\n\t\t\tthis._lastVisitedLine.value = this.getLineRawContent(lineNumber).replace(/(\\r\\n|\\r|\\n)$/, '');\n\t\t}\n\n\t\treturn this._lastVisitedLine.value;\n\t}\n\n\tprivate _getCharCode(nodePos: NodePosition): number {\n\t\tif (nodePos.remainder === nodePos.node.piece.length) {\n\t\t\t// the char we want to fetch is at the head of next node.\n\t\t\tlet matchingNode = nodePos.node.next();\n\t\t\tif (!matchingNode) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tlet buffer = this._buffers[matchingNode.piece.bufferIndex];\n\t\t\tlet startOffset = this.offsetInBuffer(matchingNode.piece.bufferIndex, matchingNode.piece.start);\n\t\t\treturn buffer.buffer.charCodeAt(startOffset);\n\t\t} else {\n\t\t\tlet buffer = this._buffers[nodePos.node.piece.bufferIndex];\n\t\t\tlet startOffset = this.offsetInBuffer(nodePos.node.piece.bufferIndex, nodePos.node.piece.start);\n\t\t\tlet targetOffset = startOffset + nodePos.remainder;\n\n\t\t\treturn buffer.buffer.charCodeAt(targetOffset);\n\t\t}\n\t}\n\n\tpublic getLineCharCode(lineNumber: number, index: number): number {\n\t\tlet nodePos = this.nodeAt2(lineNumber, index + 1);\n\t\treturn this._getCharCode(nodePos);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\tif (lineNumber === this.getLineCount()) {\n\t\t\tlet startOffset = this.getOffsetAt(lineNumber, 1);\n\t\t\treturn this.getLength() - startOffset;\n\t\t}\n\t\treturn this.getOffsetAt(lineNumber + 1, 1) - this.getOffsetAt(lineNumber, 1) - this._EOLLength;\n\t}\n\n\tpublic getCharCode(offset: number): number {\n\t\tlet nodePos = this.nodeAt(offset);\n\t\treturn this._getCharCode(nodePos);\n\t}\n\n\tpublic findMatchesInNode(node: TreeNode, searcher: Searcher, startLineNumber: number, startColumn: number, startCursor: BufferCursor, endCursor: BufferCursor, searchData: SearchData, captureMatches: boolean, limitResultCount: number, resultLen: number, result: FindMatch[]) {\n\t\tlet buffer = this._buffers[node.piece.bufferIndex];\n\t\tlet startOffsetInBuffer = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n\t\tlet start = this.offsetInBuffer(node.piece.bufferIndex, startCursor);\n\t\tlet end = this.offsetInBuffer(node.piece.bufferIndex, endCursor);\n\n\t\tlet m: RegExpExecArray | null;\n\t\t// Reset regex to search from the beginning\n\t\tlet ret: BufferCursor = { line: 0, column: 0 };\n\t\tlet searchText: string;\n\t\tlet offsetInBuffer: (offset: number) => number;\n\n\t\tif (searcher._wordSeparators) {\n\t\t\tsearchText = buffer.buffer.substring(start, end);\n\t\t\toffsetInBuffer = (offset: number) => offset + start;\n\t\t\tsearcher.reset(0);\n\t\t} else {\n\t\t\tsearchText = buffer.buffer;\n\t\t\toffsetInBuffer = (offset: number) => offset;\n\t\t\tsearcher.reset(start);\n\t\t}\n\n\t\tdo {\n\t\t\tm = searcher.next(searchText);\n\n\t\t\tif (m) {\n\t\t\t\tif (offsetInBuffer(m.index) >= end) {\n\t\t\t\t\treturn resultLen;\n\t\t\t\t}\n\t\t\t\tthis.positionInBuffer(node, offsetInBuffer(m.index) - startOffsetInBuffer, ret);\n\t\t\t\tlet lineFeedCnt = this.getLineFeedCnt(node.piece.bufferIndex, startCursor, ret);\n\t\t\t\tlet retStartColumn = ret.line === startCursor.line ? ret.column - startCursor.column + startColumn : ret.column + 1;\n\t\t\t\tlet retEndColumn = retStartColumn + m[0].length;\n\t\t\t\tresult[resultLen++] = createFindMatch(new Range(startLineNumber + lineFeedCnt, retStartColumn, startLineNumber + lineFeedCnt, retEndColumn), m, captureMatches);\n\n\t\t\t\tif (offsetInBuffer(m.index) + m[0].length >= end) {\n\t\t\t\t\treturn resultLen;\n\t\t\t\t}\n\t\t\t\tif (resultLen >= limitResultCount) {\n\t\t\t\t\treturn resultLen;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} while (m);\n\n\t\treturn resultLen;\n\t}\n\n\tpublic findMatchesLineByLine(searchRange: Range, searchData: SearchData, captureMatches: boolean, limitResultCount: number): FindMatch[] {\n\t\tconst result: FindMatch[] = [];\n\t\tlet resultLen = 0;\n\t\tconst searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n\n\t\tlet startPosition = this.nodeAt2(searchRange.startLineNumber, searchRange.startColumn);\n\t\tif (startPosition === null) {\n\t\t\treturn [];\n\t\t}\n\t\tlet endPosition = this.nodeAt2(searchRange.endLineNumber, searchRange.endColumn);\n\t\tif (endPosition === null) {\n\t\t\treturn [];\n\t\t}\n\t\tlet start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n\t\tlet end = this.positionInBuffer(endPosition.node, endPosition.remainder);\n\n\t\tif (startPosition.node === endPosition.node) {\n\t\t\tthis.findMatchesInNode(startPosition.node, searcher, searchRange.startLineNumber, searchRange.startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n\t\t\treturn result;\n\t\t}\n\n\t\tlet startLineNumber = searchRange.startLineNumber;\n\n\t\tlet currentNode = startPosition.node;\n\t\twhile (currentNode !== endPosition.node) {\n\t\t\tlet lineBreakCnt = this.getLineFeedCnt(currentNode.piece.bufferIndex, start, currentNode.piece.end);\n\n\t\t\tif (lineBreakCnt >= 1) {\n\t\t\t\t// last line break position\n\t\t\t\tlet lineStarts = this._buffers[currentNode.piece.bufferIndex].lineStarts;\n\t\t\t\tlet startOffsetInBuffer = this.offsetInBuffer(currentNode.piece.bufferIndex, currentNode.piece.start);\n\t\t\t\tlet nextLineStartOffset = lineStarts[start.line + lineBreakCnt];\n\t\t\t\tlet startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n\t\t\t\tresultLen = this.findMatchesInNode(currentNode, searcher, startLineNumber, startColumn, start, this.positionInBuffer(currentNode, nextLineStartOffset - startOffsetInBuffer), searchData, captureMatches, limitResultCount, resultLen, result);\n\n\t\t\t\tif (resultLen >= limitResultCount) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tstartLineNumber += lineBreakCnt;\n\t\t\t}\n\n\t\t\tlet startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n\t\t\t// search for the remaining content\n\t\t\tif (startLineNumber === searchRange.endLineNumber) {\n\t\t\t\tconst text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n\t\t\t\tresultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tresultLen = this._findMatchesInLine(searchData, searcher, this.getLineContent(startLineNumber).substr(startColumn), startLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n\n\t\t\tif (resultLen >= limitResultCount) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tstartLineNumber++;\n\t\t\tstartPosition = this.nodeAt2(startLineNumber, 1);\n\t\t\tcurrentNode = startPosition.node;\n\t\t\tstart = this.positionInBuffer(startPosition.node, startPosition.remainder);\n\t\t}\n\n\t\tif (startLineNumber === searchRange.endLineNumber) {\n\t\t\tlet startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n\t\t\tconst text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n\t\t\tresultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n\t\t\treturn result;\n\t\t}\n\n\t\tlet startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n\t\tresultLen = this.findMatchesInNode(endPosition.node, searcher, startLineNumber, startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n\t\treturn result;\n\t}\n\n\tprivate _findMatchesInLine(searchData: SearchData, searcher: Searcher, text: string, lineNumber: number, deltaOffset: number, resultLen: number, result: FindMatch[], captureMatches: boolean, limitResultCount: number): number {\n\t\tconst wordSeparators = searchData.wordSeparators;\n\t\tif (!captureMatches && searchData.simpleSearch) {\n\t\t\tconst searchString = searchData.simpleSearch;\n\t\t\tconst searchStringLen = searchString.length;\n\t\t\tconst textLength = text.length;\n\n\t\t\tlet lastMatchIndex = -searchStringLen;\n\t\t\twhile ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n\t\t\t\tif (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n\t\t\t\t\tresult[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n\t\t\t\t\tif (resultLen >= limitResultCount) {\n\t\t\t\t\t\treturn resultLen;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resultLen;\n\t\t}\n\n\t\tlet m: RegExpExecArray | null;\n\t\t// Reset regex to search from the beginning\n\t\tsearcher.reset(0);\n\t\tdo {\n\t\t\tm = searcher.next(text);\n\t\t\tif (m) {\n\t\t\t\tresult[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n\t\t\t\tif (resultLen >= limitResultCount) {\n\t\t\t\t\treturn resultLen;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (m);\n\t\treturn resultLen;\n\t}\n\n\t// #endregion\n\n\t// #region Piece Table\n\tpublic insert(offset: number, value: string, eolNormalized: boolean = false): void {\n\t\tthis._EOLNormalized = this._EOLNormalized && eolNormalized;\n\t\tthis._lastVisitedLine.lineNumber = 0;\n\t\tthis._lastVisitedLine.value = '';\n\n\t\tif (this.root !== SENTINEL) {\n\t\t\tlet { node, remainder, nodeStartOffset } = this.nodeAt(offset);\n\t\t\tlet piece = node.piece;\n\t\t\tlet bufferIndex = piece.bufferIndex;\n\t\t\tlet insertPosInBuffer = this.positionInBuffer(node, remainder);\n\t\t\tif (node.piece.bufferIndex === 0 &&\n\t\t\t\tpiece.end.line === this._lastChangeBufferPos.line &&\n\t\t\t\tpiece.end.column === this._lastChangeBufferPos.column &&\n\t\t\t\t(nodeStartOffset + piece.length === offset) &&\n\t\t\t\tvalue.length < AverageBufferSize\n\t\t\t) {\n\t\t\t\t// changed buffer\n\t\t\t\tthis.appendToNode(node, value);\n\t\t\t\tthis.computeBufferMetadata();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (nodeStartOffset === offset) {\n\t\t\t\tthis.insertContentToNodeLeft(value, node);\n\t\t\t\tthis._searchCache.validate(offset);\n\t\t\t} else if (nodeStartOffset + node.piece.length > offset) {\n\t\t\t\t// we are inserting into the middle of a node.\n\t\t\t\tlet nodesToDel: TreeNode[] = [];\n\t\t\t\tlet newRightPiece = new Piece(\n\t\t\t\t\tpiece.bufferIndex,\n\t\t\t\t\tinsertPosInBuffer,\n\t\t\t\t\tpiece.end,\n\t\t\t\t\tthis.getLineFeedCnt(piece.bufferIndex, insertPosInBuffer, piece.end),\n\t\t\t\t\tthis.offsetInBuffer(bufferIndex, piece.end) - this.offsetInBuffer(bufferIndex, insertPosInBuffer)\n\t\t\t\t);\n\n\t\t\t\tif (this.shouldCheckCRLF() && this.endWithCR(value)) {\n\t\t\t\t\tlet headOfRight = this.nodeCharCodeAt(node, remainder);\n\n\t\t\t\t\tif (headOfRight === 10 /** \\n */) {\n\t\t\t\t\t\tlet newStart: BufferCursor = { line: newRightPiece.start.line + 1, column: 0 };\n\t\t\t\t\t\tnewRightPiece = new Piece(\n\t\t\t\t\t\t\tnewRightPiece.bufferIndex,\n\t\t\t\t\t\t\tnewStart,\n\t\t\t\t\t\t\tnewRightPiece.end,\n\t\t\t\t\t\t\tthis.getLineFeedCnt(newRightPiece.bufferIndex, newStart, newRightPiece.end),\n\t\t\t\t\t\t\tnewRightPiece.length - 1\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tvalue += '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// reuse node for content before insertion point.\n\t\t\t\tif (this.shouldCheckCRLF() && this.startWithLF(value)) {\n\t\t\t\t\tlet tailOfLeft = this.nodeCharCodeAt(node, remainder - 1);\n\t\t\t\t\tif (tailOfLeft === 13 /** \\r */) {\n\t\t\t\t\t\tlet previousPos = this.positionInBuffer(node, remainder - 1);\n\t\t\t\t\t\tthis.deleteNodeTail(node, previousPos);\n\t\t\t\t\t\tvalue = '\\r' + value;\n\n\t\t\t\t\t\tif (node.piece.length === 0) {\n\t\t\t\t\t\t\tnodesToDel.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.deleteNodeTail(node, insertPosInBuffer);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.deleteNodeTail(node, insertPosInBuffer);\n\t\t\t\t}\n\n\t\t\t\tlet newPieces = this.createNewPieces(value);\n\t\t\t\tif (newRightPiece.length > 0) {\n\t\t\t\t\tthis.rbInsertRight(node, newRightPiece);\n\t\t\t\t}\n\n\t\t\t\tlet tmpNode = node;\n\t\t\t\tfor (let k = 0; k < newPieces.length; k++) {\n\t\t\t\t\ttmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n\t\t\t\t}\n\t\t\t\tthis.deleteNodes(nodesToDel);\n\t\t\t} else {\n\t\t\t\tthis.insertContentToNodeRight(value, node);\n\t\t\t}\n\t\t} else {\n\t\t\t// insert new node\n\t\t\tlet pieces = this.createNewPieces(value);\n\t\t\tlet node = this.rbInsertLeft(null, pieces[0]);\n\n\t\t\tfor (let k = 1; k < pieces.length; k++) {\n\t\t\t\tnode = this.rbInsertRight(node, pieces[k]);\n\t\t\t}\n\t\t}\n\n\t\t// todo, this is too brutal. Total line feed count should be updated the same way as lf_left.\n\t\tthis.computeBufferMetadata();\n\t}\n\n\tpublic delete(offset: number, cnt: number): void {\n\t\tthis._lastVisitedLine.lineNumber = 0;\n\t\tthis._lastVisitedLine.value = '';\n\n\t\tif (cnt <= 0 || this.root === SENTINEL) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet startPosition = this.nodeAt(offset);\n\t\tlet endPosition = this.nodeAt(offset + cnt);\n\t\tlet startNode = startPosition.node;\n\t\tlet endNode = endPosition.node;\n\n\t\tif (startNode === endNode) {\n\t\t\tlet startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n\t\t\tlet endSplitPosInBuffer = this.positionInBuffer(startNode, endPosition.remainder);\n\n\t\t\tif (startPosition.nodeStartOffset === offset) {\n\t\t\t\tif (cnt === startNode.piece.length) { // delete node\n\t\t\t\t\tlet next = startNode.next();\n\t\t\t\t\trbDelete(this, startNode);\n\t\t\t\t\tthis.validateCRLFWithPrevNode(next);\n\t\t\t\t\tthis.computeBufferMetadata();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.deleteNodeHead(startNode, endSplitPosInBuffer);\n\t\t\t\tthis._searchCache.validate(offset);\n\t\t\t\tthis.validateCRLFWithPrevNode(startNode);\n\t\t\t\tthis.computeBufferMetadata();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (startPosition.nodeStartOffset + startNode.piece.length === offset + cnt) {\n\t\t\t\tthis.deleteNodeTail(startNode, startSplitPosInBuffer);\n\t\t\t\tthis.validateCRLFWithNextNode(startNode);\n\t\t\t\tthis.computeBufferMetadata();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// delete content in the middle, this node will be splitted to nodes\n\t\t\tthis.shrinkNode(startNode, startSplitPosInBuffer, endSplitPosInBuffer);\n\t\t\tthis.computeBufferMetadata();\n\t\t\treturn;\n\t\t}\n\n\t\tlet nodesToDel: TreeNode[] = [];\n\n\t\tlet startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n\t\tthis.deleteNodeTail(startNode, startSplitPosInBuffer);\n\t\tthis._searchCache.validate(offset);\n\t\tif (startNode.piece.length === 0) {\n\t\t\tnodesToDel.push(startNode);\n\t\t}\n\n\t\t// update last touched node\n\t\tlet endSplitPosInBuffer = this.positionInBuffer(endNode, endPosition.remainder);\n\t\tthis.deleteNodeHead(endNode, endSplitPosInBuffer);\n\t\tif (endNode.piece.length === 0) {\n\t\t\tnodesToDel.push(endNode);\n\t\t}\n\n\t\t// delete nodes in between\n\t\tlet secondNode = startNode.next();\n\t\tfor (let node = secondNode; node !== SENTINEL && node !== endNode; node = node.next()) {\n\t\t\tnodesToDel.push(node);\n\t\t}\n\n\t\tlet prev = startNode.piece.length === 0 ? startNode.prev() : startNode;\n\t\tthis.deleteNodes(nodesToDel);\n\t\tthis.validateCRLFWithNextNode(prev);\n\t\tthis.computeBufferMetadata();\n\t}\n\n\tprivate insertContentToNodeLeft(value: string, node: TreeNode) {\n\t\t// we are inserting content to the beginning of node\n\t\tlet nodesToDel: TreeNode[] = [];\n\t\tif (this.shouldCheckCRLF() && this.endWithCR(value) && this.startWithLF(node)) {\n\t\t\t// move `\\n` to new node.\n\n\t\t\tlet piece = node.piece;\n\t\t\tlet newStart: BufferCursor = { line: piece.start.line + 1, column: 0 };\n\t\t\tlet nPiece = new Piece(\n\t\t\t\tpiece.bufferIndex,\n\t\t\t\tnewStart,\n\t\t\t\tpiece.end,\n\t\t\t\tthis.getLineFeedCnt(piece.bufferIndex, newStart, piece.end),\n\t\t\t\tpiece.length - 1\n\t\t\t);\n\n\t\t\tnode.piece = nPiece;\n\n\t\t\tvalue += '\\n';\n\t\t\tupdateTreeMetadata(this, node, -1, -1);\n\n\t\t\tif (node.piece.length === 0) {\n\t\t\t\tnodesToDel.push(node);\n\t\t\t}\n\t\t}\n\n\t\tlet newPieces = this.createNewPieces(value);\n\t\tlet newNode = this.rbInsertLeft(node, newPieces[newPieces.length - 1]);\n\t\tfor (let k = newPieces.length - 2; k >= 0; k--) {\n\t\t\tnewNode = this.rbInsertLeft(newNode, newPieces[k]);\n\t\t}\n\t\tthis.validateCRLFWithPrevNode(newNode);\n\t\tthis.deleteNodes(nodesToDel);\n\t}\n\n\tprivate insertContentToNodeRight(value: string, node: TreeNode) {\n\t\t// we are inserting to the right of this node.\n\t\tif (this.adjustCarriageReturnFromNext(value, node)) {\n\t\t\t// move \\n to the new node.\n\t\t\tvalue += '\\n';\n\t\t}\n\n\t\tlet newPieces = this.createNewPieces(value);\n\t\tlet newNode = this.rbInsertRight(node, newPieces[0]);\n\t\tlet tmpNode = newNode;\n\n\t\tfor (let k = 1; k < newPieces.length; k++) {\n\t\t\ttmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n\t\t}\n\n\t\tthis.validateCRLFWithPrevNode(newNode);\n\t}\n\n\tprivate positionInBuffer(node: TreeNode, remainder: number): BufferCursor;\n\tprivate positionInBuffer(node: TreeNode, remainder: number, ret: BufferCursor): null;\n\tprivate positionInBuffer(node: TreeNode, remainder: number, ret?: BufferCursor): BufferCursor | null {\n\t\tlet piece = node.piece;\n\t\tlet bufferIndex = node.piece.bufferIndex;\n\t\tlet lineStarts = this._buffers[bufferIndex].lineStarts;\n\n\t\tlet startOffset = lineStarts[piece.start.line] + piece.start.column;\n\n\t\tlet offset = startOffset + remainder;\n\n\t\t// binary search offset between startOffset and endOffset\n\t\tlet low = piece.start.line;\n\t\tlet high = piece.end.line;\n\n\t\tlet mid: number = 0;\n\t\tlet midStop: number = 0;\n\t\tlet midStart: number = 0;\n\n\t\twhile (low <= high) {\n\t\t\tmid = low + ((high - low) / 2) | 0;\n\t\t\tmidStart = lineStarts[mid];\n\n\t\t\tif (mid === high) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tmidStop = lineStarts[mid + 1];\n\n\t\t\tif (offset < midStart) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else if (offset >= midStop) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (ret) {\n\t\t\tret.line = mid;\n\t\t\tret.column = offset - midStart;\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\tline: mid,\n\t\t\tcolumn: offset - midStart\n\t\t};\n\t}\n\n\tprivate getLineFeedCnt(bufferIndex: number, start: BufferCursor, end: BufferCursor): number {\n\t\t// we don't need to worry about start: abc\\r|\\n, or abc|\\r, or abc|\\n, or abc|\\r\\n doesn't change the fact that, there is one line break after start.\n\t\t// now let's take care of end: abc\\r|\\n, if end is in between \\r and \\n, we need to add line feed count by 1\n\t\tif (end.column === 0) {\n\t\t\treturn end.line - start.line;\n\t\t}\n\n\t\tlet lineStarts = this._buffers[bufferIndex].lineStarts;\n\t\tif (end.line === lineStarts.length - 1) { // it means, there is no \\n after end, otherwise, there will be one more lineStart.\n\t\t\treturn end.line - start.line;\n\t\t}\n\n\t\tlet nextLineStartOffset = lineStarts[end.line + 1];\n\t\tlet endOffset = lineStarts[end.line] + end.column;\n\t\tif (nextLineStartOffset > endOffset + 1) { // there are more than 1 character after end, which means it can't be \\n\n\t\t\treturn end.line - start.line;\n\t\t}\n\t\t// endOffset + 1 === nextLineStartOffset\n\t\t// character at endOffset is \\n, so we check the character before first\n\t\t// if character at endOffset is \\r, end.column is 0 and we can't get here.\n\t\tlet previousCharOffset = endOffset - 1; // end.column > 0 so it's okay.\n\t\tlet buffer = this._buffers[bufferIndex].buffer;\n\n\t\tif (buffer.charCodeAt(previousCharOffset) === 13) {\n\t\t\treturn end.line - start.line + 1;\n\t\t} else {\n\t\t\treturn end.line - start.line;\n\t\t}\n\t}\n\n\tprivate offsetInBuffer(bufferIndex: number, cursor: BufferCursor): number {\n\t\tlet lineStarts = this._buffers[bufferIndex].lineStarts;\n\t\treturn lineStarts[cursor.line] + cursor.column;\n\t}\n\n\tprivate deleteNodes(nodes: TreeNode[]): void {\n\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\trbDelete(this, nodes[i]);\n\t\t}\n\t}\n\n\tprivate createNewPieces(text: string): Piece[] {\n\t\tif (text.length > AverageBufferSize) {\n\t\t\t// the content is large, operations like substring, charCode becomes slow\n\t\t\t// so here we split it into smaller chunks, just like what we did for CR/LF normalization\n\t\t\tlet newPieces: Piece[] = [];\n\t\t\twhile (text.length > AverageBufferSize) {\n\t\t\t\tconst lastChar = text.charCodeAt(AverageBufferSize - 1);\n\t\t\t\tlet splitText;\n\t\t\t\tif (lastChar === CharCode.CarriageReturn || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n\t\t\t\t\t// last character is \\r or a high surrogate => keep it back\n\t\t\t\t\tsplitText = text.substring(0, AverageBufferSize - 1);\n\t\t\t\t\ttext = text.substring(AverageBufferSize - 1);\n\t\t\t\t} else {\n\t\t\t\t\tsplitText = text.substring(0, AverageBufferSize);\n\t\t\t\t\ttext = text.substring(AverageBufferSize);\n\t\t\t\t}\n\n\t\t\t\tlet lineStarts = createLineStartsFast(splitText);\n\t\t\t\tnewPieces.push(new Piece(\n\t\t\t\t\tthis._buffers.length, /* buffer index */\n\t\t\t\t\t{ line: 0, column: 0 },\n\t\t\t\t\t{ line: lineStarts.length - 1, column: splitText.length - lineStarts[lineStarts.length - 1] },\n\t\t\t\t\tlineStarts.length - 1,\n\t\t\t\t\tsplitText.length\n\t\t\t\t));\n\t\t\t\tthis._buffers.push(new StringBuffer(splitText, lineStarts));\n\t\t\t}\n\n\t\t\tlet lineStarts = createLineStartsFast(text);\n\t\t\tnewPieces.push(new Piece(\n\t\t\t\tthis._buffers.length, /* buffer index */\n\t\t\t\t{ line: 0, column: 0 },\n\t\t\t\t{ line: lineStarts.length - 1, column: text.length - lineStarts[lineStarts.length - 1] },\n\t\t\t\tlineStarts.length - 1,\n\t\t\t\ttext.length\n\t\t\t));\n\t\t\tthis._buffers.push(new StringBuffer(text, lineStarts));\n\n\t\t\treturn newPieces;\n\t\t}\n\n\t\tlet startOffset = this._buffers[0].buffer.length;\n\t\tconst lineStarts = createLineStartsFast(text, false);\n\n\t\tlet start = this._lastChangeBufferPos;\n\t\tif (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === startOffset\n\t\t\t&& startOffset !== 0\n\t\t\t&& this.startWithLF(text)\n\t\t\t&& this.endWithCR(this._buffers[0].buffer) // todo, we can check this._lastChangeBufferPos's column as it's the last one\n\t\t) {\n\t\t\tthis._lastChangeBufferPos = { line: this._lastChangeBufferPos.line, column: this._lastChangeBufferPos.column + 1 };\n\t\t\tstart = this._lastChangeBufferPos;\n\n\t\t\tfor (let i = 0; i < lineStarts.length; i++) {\n\t\t\t\tlineStarts[i] += startOffset + 1;\n\t\t\t}\n\n\t\t\tthis._buffers[0].lineStarts = (<number[]>this._buffers[0].lineStarts).concat(<number[]>lineStarts.slice(1));\n\t\t\tthis._buffers[0].buffer += '_' + text;\n\t\t\tstartOffset += 1;\n\t\t} else {\n\t\t\tif (startOffset !== 0) {\n\t\t\t\tfor (let i = 0; i < lineStarts.length; i++) {\n\t\t\t\t\tlineStarts[i] += startOffset;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._buffers[0].lineStarts = (<number[]>this._buffers[0].lineStarts).concat(<number[]>lineStarts.slice(1));\n\t\t\tthis._buffers[0].buffer += text;\n\t\t}\n\n\t\tconst endOffset = this._buffers[0].buffer.length;\n\t\tlet endIndex = this._buffers[0].lineStarts.length - 1;\n\t\tlet endColumn = endOffset - this._buffers[0].lineStarts[endIndex];\n\t\tlet endPos = { line: endIndex, column: endColumn };\n\t\tlet newPiece = new Piece(\n\t\t\t0, /** todo@peng */\n\t\t\tstart,\n\t\t\tendPos,\n\t\t\tthis.getLineFeedCnt(0, start, endPos),\n\t\t\tendOffset - startOffset\n\t\t);\n\t\tthis._lastChangeBufferPos = endPos;\n\t\treturn [newPiece];\n\t}\n\n\tpublic getLinesRawContent(): string {\n\t\treturn this.getContentOfSubTree(this.root);\n\t}\n\n\tpublic getLineRawContent(lineNumber: number, endOffset: number = 0): string {\n\t\tlet x = this.root;\n\n\t\tlet ret = '';\n\t\tlet cache = this._searchCache.get2(lineNumber);\n\t\tif (cache) {\n\t\t\tx = cache.node;\n\t\t\tlet prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber - 1);\n\t\t\tlet buffer = this._buffers[x.piece.bufferIndex].buffer;\n\t\t\tlet startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n\t\t\tif (cache.nodeStartLineNumber + x.piece.lineFeedCnt === lineNumber) {\n\t\t\t\tret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n\t\t\t} else {\n\t\t\t\tlet accumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber);\n\t\t\t\treturn buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n\t\t\t}\n\t\t} else {\n\t\t\tlet nodeStartOffset = 0;\n\t\t\tconst originalLineNumber = lineNumber;\n\t\t\twhile (x !== SENTINEL) {\n\t\t\t\tif (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n\t\t\t\t\tx = x.left;\n\t\t\t\t} else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n\t\t\t\t\tlet prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n\t\t\t\t\tlet accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n\t\t\t\t\tlet buffer = this._buffers[x.piece.bufferIndex].buffer;\n\t\t\t\t\tlet startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n\t\t\t\t\tnodeStartOffset += x.size_left;\n\t\t\t\t\tthis._searchCache.set({\n\t\t\t\t\t\tnode: x,\n\t\t\t\t\t\tnodeStartOffset,\n\t\t\t\t\t\tnodeStartLineNumber: originalLineNumber - (lineNumber - 1 - x.lf_left)\n\t\t\t\t\t});\n\n\t\t\t\t\treturn buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n\t\t\t\t} else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n\t\t\t\t\tlet prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n\t\t\t\t\tlet buffer = this._buffers[x.piece.bufferIndex].buffer;\n\t\t\t\t\tlet startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n\n\t\t\t\t\tret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tlineNumber -= x.lf_left + x.piece.lineFeedCnt;\n\t\t\t\t\tnodeStartOffset += x.size_left + x.piece.length;\n\t\t\t\t\tx = x.right;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// search in order, to find the node contains end column\n\t\tx = x.next();\n\t\twhile (x !== SENTINEL) {\n\t\t\tlet buffer = this._buffers[x.piece.bufferIndex].buffer;\n\n\t\t\tif (x.piece.lineFeedCnt > 0) {\n\t\t\t\tlet accumulatedValue = this.getAccumulatedValue(x, 0);\n\t\t\t\tlet startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n\n\t\t\t\tret += buffer.substring(startOffset, startOffset + accumulatedValue - endOffset);\n\t\t\t\treturn ret;\n\t\t\t} else {\n\t\t\t\tlet startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n\t\t\t\tret += buffer.substr(startOffset, x.piece.length);\n\t\t\t}\n\n\t\t\tx = x.next();\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tprivate computeBufferMetadata() {\n\t\tlet x = this.root;\n\n\t\tlet lfCnt = 1;\n\t\tlet len = 0;\n\n\t\twhile (x !== SENTINEL) {\n\t\t\tlfCnt += x.lf_left + x.piece.lineFeedCnt;\n\t\t\tlen += x.size_left + x.piece.length;\n\t\t\tx = x.right;\n\t\t}\n\n\t\tthis._lineCnt = lfCnt;\n\t\tthis._length = len;\n\t\tthis._searchCache.validate(this._length);\n\t}\n\n\t// #region node operations\n\tprivate getIndexOf(node: TreeNode, accumulatedValue: number): { index: number, remainder: number } {\n\t\tlet piece = node.piece;\n\t\tlet pos = this.positionInBuffer(node, accumulatedValue);\n\t\tlet lineCnt = pos.line - piece.start.line;\n\n\t\tif (this.offsetInBuffer(piece.bufferIndex, piece.end) - this.offsetInBuffer(piece.bufferIndex, piece.start) === accumulatedValue) {\n\t\t\t// we are checking the end of this node, so a CRLF check is necessary.\n\t\t\tlet realLineCnt = this.getLineFeedCnt(node.piece.bufferIndex, piece.start, pos);\n\t\t\tif (realLineCnt !== lineCnt) {\n\t\t\t\t// aha yes, CRLF\n\t\t\t\treturn { index: realLineCnt, remainder: 0 };\n\t\t\t}\n\t\t}\n\n\t\treturn { index: lineCnt, remainder: pos.column };\n\t}\n\n\tprivate getAccumulatedValue(node: TreeNode, index: number) {\n\t\tif (index < 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tlet piece = node.piece;\n\t\tlet lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n\t\tlet expectedLineStartIndex = piece.start.line + index + 1;\n\t\tif (expectedLineStartIndex > piece.end.line) {\n\t\t\treturn lineStarts[piece.end.line] + piece.end.column - lineStarts[piece.start.line] - piece.start.column;\n\t\t} else {\n\t\t\treturn lineStarts[expectedLineStartIndex] - lineStarts[piece.start.line] - piece.start.column;\n\t\t}\n\t}\n\n\tprivate deleteNodeTail(node: TreeNode, pos: BufferCursor) {\n\t\tconst piece = node.piece;\n\t\tconst originalLFCnt = piece.lineFeedCnt;\n\t\tconst originalEndOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n\n\t\tconst newEnd = pos;\n\t\tconst newEndOffset = this.offsetInBuffer(piece.bufferIndex, newEnd);\n\t\tconst newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n\n\t\tconst lf_delta = newLineFeedCnt - originalLFCnt;\n\t\tconst size_delta = newEndOffset - originalEndOffset;\n\t\tconst newLength = piece.length + size_delta;\n\n\t\tnode.piece = new Piece(\n\t\t\tpiece.bufferIndex,\n\t\t\tpiece.start,\n\t\t\tnewEnd,\n\t\t\tnewLineFeedCnt,\n\t\t\tnewLength\n\t\t);\n\n\t\tupdateTreeMetadata(this, node, size_delta, lf_delta);\n\t}\n\n\tprivate deleteNodeHead(node: TreeNode, pos: BufferCursor) {\n\t\tconst piece = node.piece;\n\t\tconst originalLFCnt = piece.lineFeedCnt;\n\t\tconst originalStartOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n\n\t\tconst newStart = pos;\n\t\tconst newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n\t\tconst newStartOffset = this.offsetInBuffer(piece.bufferIndex, newStart);\n\t\tconst lf_delta = newLineFeedCnt - originalLFCnt;\n\t\tconst size_delta = originalStartOffset - newStartOffset;\n\t\tconst newLength = piece.length + size_delta;\n\t\tnode.piece = new Piece(\n\t\t\tpiece.bufferIndex,\n\t\t\tnewStart,\n\t\t\tpiece.end,\n\t\t\tnewLineFeedCnt,\n\t\t\tnewLength\n\t\t);\n\n\t\tupdateTreeMetadata(this, node, size_delta, lf_delta);\n\t}\n\n\tprivate shrinkNode(node: TreeNode, start: BufferCursor, end: BufferCursor) {\n\t\tconst piece = node.piece;\n\t\tconst originalStartPos = piece.start;\n\t\tconst originalEndPos = piece.end;\n\n\t\t// old piece, originalStartPos, start\n\t\tconst oldLength = piece.length;\n\t\tconst oldLFCnt = piece.lineFeedCnt;\n\t\tconst newEnd = start;\n\t\tconst newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n\t\tconst newLength = this.offsetInBuffer(piece.bufferIndex, start) - this.offsetInBuffer(piece.bufferIndex, originalStartPos);\n\n\t\tnode.piece = new Piece(\n\t\t\tpiece.bufferIndex,\n\t\t\tpiece.start,\n\t\t\tnewEnd,\n\t\t\tnewLineFeedCnt,\n\t\t\tnewLength\n\t\t);\n\n\t\tupdateTreeMetadata(this, node, newLength - oldLength, newLineFeedCnt - oldLFCnt);\n\n\t\t// new right piece, end, originalEndPos\n\t\tlet newPiece = new Piece(\n\t\t\tpiece.bufferIndex,\n\t\t\tend,\n\t\t\toriginalEndPos,\n\t\t\tthis.getLineFeedCnt(piece.bufferIndex, end, originalEndPos),\n\t\t\tthis.offsetInBuffer(piece.bufferIndex, originalEndPos) - this.offsetInBuffer(piece.bufferIndex, end)\n\t\t);\n\n\t\tlet newNode = this.rbInsertRight(node, newPiece);\n\t\tthis.validateCRLFWithPrevNode(newNode);\n\t}\n\n\tprivate appendToNode(node: TreeNode, value: string): void {\n\t\tif (this.adjustCarriageReturnFromNext(value, node)) {\n\t\t\tvalue += '\\n';\n\t\t}\n\n\t\tconst hitCRLF = this.shouldCheckCRLF() && this.startWithLF(value) && this.endWithCR(node);\n\t\tconst startOffset = this._buffers[0].buffer.length;\n\t\tthis._buffers[0].buffer += value;\n\t\tconst lineStarts = createLineStartsFast(value, false);\n\t\tfor (let i = 0; i < lineStarts.length; i++) {\n\t\t\tlineStarts[i] += startOffset;\n\t\t}\n\t\tif (hitCRLF) {\n\t\t\tlet prevStartOffset = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];\n\t\t\t(<number[]>this._buffers[0].lineStarts).pop();\n\t\t\t// _lastChangeBufferPos is already wrong\n\t\t\tthis._lastChangeBufferPos = { line: this._lastChangeBufferPos.line - 1, column: startOffset - prevStartOffset };\n\t\t}\n\n\t\tthis._buffers[0].lineStarts = (<number[]>this._buffers[0].lineStarts).concat(<number[]>lineStarts.slice(1));\n\t\tconst endIndex = this._buffers[0].lineStarts.length - 1;\n\t\tconst endColumn = this._buffers[0].buffer.length - this._buffers[0].lineStarts[endIndex];\n\t\tconst newEnd = { line: endIndex, column: endColumn };\n\t\tconst newLength = node.piece.length + value.length;\n\t\tconst oldLineFeedCnt = node.piece.lineFeedCnt;\n\t\tconst newLineFeedCnt = this.getLineFeedCnt(0, node.piece.start, newEnd);\n\t\tconst lf_delta = newLineFeedCnt - oldLineFeedCnt;\n\n\t\tnode.piece = new Piece(\n\t\t\tnode.piece.bufferIndex,\n\t\t\tnode.piece.start,\n\t\t\tnewEnd,\n\t\t\tnewLineFeedCnt,\n\t\t\tnewLength\n\t\t);\n\n\t\tthis._lastChangeBufferPos = newEnd;\n\t\tupdateTreeMetadata(this, node, value.length, lf_delta);\n\t}\n\n\tprivate nodeAt(offset: number): NodePosition {\n\t\tlet x = this.root;\n\t\tlet cache = this._searchCache.get(offset);\n\t\tif (cache) {\n\t\t\treturn {\n\t\t\t\tnode: cache.node,\n\t\t\t\tnodeStartOffset: cache.nodeStartOffset,\n\t\t\t\tremainder: offset - cache.nodeStartOffset\n\t\t\t};\n\t\t}\n\n\t\tlet nodeStartOffset = 0;\n\n\t\twhile (x !== SENTINEL) {\n\t\t\tif (x.size_left > offset) {\n\t\t\t\tx = x.left;\n\t\t\t} else if (x.size_left + x.piece.length >= offset) {\n\t\t\t\tnodeStartOffset += x.size_left;\n\t\t\t\tlet ret = {\n\t\t\t\t\tnode: x,\n\t\t\t\t\tremainder: offset - x.size_left,\n\t\t\t\t\tnodeStartOffset\n\t\t\t\t};\n\t\t\t\tthis._searchCache.set(ret);\n\t\t\t\treturn ret;\n\t\t\t} else {\n\t\t\t\toffset -= x.size_left + x.piece.length;\n\t\t\t\tnodeStartOffset += x.size_left + x.piece.length;\n\t\t\t\tx = x.right;\n\t\t\t}\n\t\t}\n\n\t\treturn null!;\n\t}\n\n\tprivate nodeAt2(lineNumber: number, column: number): NodePosition {\n\t\tlet x = this.root;\n\t\tlet nodeStartOffset = 0;\n\n\t\twhile (x !== SENTINEL) {\n\t\t\tif (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n\t\t\t\tx = x.left;\n\t\t\t} else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n\t\t\t\tlet prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n\t\t\t\tlet accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n\t\t\t\tnodeStartOffset += x.size_left;\n\n\t\t\t\treturn {\n\t\t\t\t\tnode: x,\n\t\t\t\t\tremainder: Math.min(prevAccumualtedValue + column - 1, accumulatedValue),\n\t\t\t\t\tnodeStartOffset\n\t\t\t\t};\n\t\t\t} else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n\t\t\t\tlet prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n\t\t\t\tif (prevAccumualtedValue + column - 1 <= x.piece.length) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tnode: x,\n\t\t\t\t\t\tremainder: prevAccumualtedValue + column - 1,\n\t\t\t\t\t\tnodeStartOffset\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tcolumn -= x.piece.length - prevAccumualtedValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlineNumber -= x.lf_left + x.piece.lineFeedCnt;\n\t\t\t\tnodeStartOffset += x.size_left + x.piece.length;\n\t\t\t\tx = x.right;\n\t\t\t}\n\t\t}\n\n\t\t// search in order, to find the node contains position.column\n\t\tx = x.next();\n\t\twhile (x !== SENTINEL) {\n\n\t\t\tif (x.piece.lineFeedCnt > 0) {\n\t\t\t\tlet accumulatedValue = this.getAccumulatedValue(x, 0);\n\t\t\t\tlet nodeStartOffset = this.offsetOfNode(x);\n\t\t\t\treturn {\n\t\t\t\t\tnode: x,\n\t\t\t\t\tremainder: Math.min(column - 1, accumulatedValue),\n\t\t\t\t\tnodeStartOffset\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (x.piece.length >= column - 1) {\n\t\t\t\t\tlet nodeStartOffset = this.offsetOfNode(x);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tnode: x,\n\t\t\t\t\t\tremainder: column - 1,\n\t\t\t\t\t\tnodeStartOffset\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tcolumn -= x.piece.length;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tx = x.next();\n\t\t}\n\n\t\treturn null!;\n\t}\n\n\tprivate nodeCharCodeAt(node: TreeNode, offset: number): number {\n\t\tif (node.piece.lineFeedCnt < 1) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet buffer = this._buffers[node.piece.bufferIndex];\n\t\tlet newOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start) + offset;\n\t\treturn buffer.buffer.charCodeAt(newOffset);\n\t}\n\n\tprivate offsetOfNode(node: TreeNode): number {\n\t\tif (!node) {\n\t\t\treturn 0;\n\t\t}\n\t\tlet pos = node.size_left;\n\t\twhile (node !== this.root) {\n\t\t\tif (node.parent.right === node) {\n\t\t\t\tpos += node.parent.size_left + node.parent.piece.length;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t// #endregion\n\n\t// #region CRLF\n\tprivate shouldCheckCRLF() {\n\t\treturn !(this._EOLNormalized && this._EOL === '\\n');\n\t}\n\n\tprivate startWithLF(val: string | TreeNode): boolean {\n\t\tif (typeof val === 'string') {\n\t\t\treturn val.charCodeAt(0) === 10;\n\t\t}\n\n\t\tif (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet piece = val.piece;\n\t\tlet lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n\t\tlet line = piece.start.line;\n\t\tlet startOffset = lineStarts[line] + piece.start.column;\n\t\tif (line === lineStarts.length - 1) {\n\t\t\t// last line, so there is no line feed at the end of this line\n\t\t\treturn false;\n\t\t}\n\t\tlet nextLineOffset = lineStarts[line + 1];\n\t\tif (nextLineOffset > startOffset + 1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._buffers[piece.bufferIndex].buffer.charCodeAt(startOffset) === 10;\n\t}\n\n\tprivate endWithCR(val: string | TreeNode): boolean {\n\t\tif (typeof val === 'string') {\n\t\t\treturn val.charCodeAt(val.length - 1) === 13;\n\t\t}\n\n\t\tif (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.nodeCharCodeAt(val, val.piece.length - 1) === 13;\n\t}\n\n\tprivate validateCRLFWithPrevNode(nextNode: TreeNode) {\n\t\tif (this.shouldCheckCRLF() && this.startWithLF(nextNode)) {\n\t\t\tlet node = nextNode.prev();\n\t\t\tif (this.endWithCR(node)) {\n\t\t\t\tthis.fixCRLF(node, nextNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate validateCRLFWithNextNode(node: TreeNode) {\n\t\tif (this.shouldCheckCRLF() && this.endWithCR(node)) {\n\t\t\tlet nextNode = node.next();\n\t\t\tif (this.startWithLF(nextNode)) {\n\t\t\t\tthis.fixCRLF(node, nextNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate fixCRLF(prev: TreeNode, next: TreeNode) {\n\t\tlet nodesToDel: TreeNode[] = [];\n\t\t// update node\n\t\tlet lineStarts = this._buffers[prev.piece.bufferIndex].lineStarts;\n\t\tlet newEnd: BufferCursor;\n\t\tif (prev.piece.end.column === 0) {\n\t\t\t// it means, last line ends with \\r, not \\r\\n\n\t\t\tnewEnd = { line: prev.piece.end.line - 1, column: lineStarts[prev.piece.end.line] - lineStarts[prev.piece.end.line - 1] - 1 };\n\t\t} else {\n\t\t\t// \\r\\n\n\t\t\tnewEnd = { line: prev.piece.end.line, column: prev.piece.end.column - 1 };\n\t\t}\n\n\t\tconst prevNewLength = prev.piece.length - 1;\n\t\tconst prevNewLFCnt = prev.piece.lineFeedCnt - 1;\n\t\tprev.piece = new Piece(\n\t\t\tprev.piece.bufferIndex,\n\t\t\tprev.piece.start,\n\t\t\tnewEnd,\n\t\t\tprevNewLFCnt,\n\t\t\tprevNewLength\n\t\t);\n\n\t\tupdateTreeMetadata(this, prev, - 1, -1);\n\t\tif (prev.piece.length === 0) {\n\t\t\tnodesToDel.push(prev);\n\t\t}\n\n\t\t// update nextNode\n\t\tlet newStart: BufferCursor = { line: next.piece.start.line + 1, column: 0 };\n\t\tconst newLength = next.piece.length - 1;\n\t\tconst newLineFeedCnt = this.getLineFeedCnt(next.piece.bufferIndex, newStart, next.piece.end);\n\t\tnext.piece = new Piece(\n\t\t\tnext.piece.bufferIndex,\n\t\t\tnewStart,\n\t\t\tnext.piece.end,\n\t\t\tnewLineFeedCnt,\n\t\t\tnewLength\n\t\t);\n\n\t\tupdateTreeMetadata(this, next, - 1, -1);\n\t\tif (next.piece.length === 0) {\n\t\t\tnodesToDel.push(next);\n\t\t}\n\n\t\t// create new piece which contains \\r\\n\n\t\tlet pieces = this.createNewPieces('\\r\\n');\n\t\tthis.rbInsertRight(prev, pieces[0]);\n\t\t// delete empty nodes\n\n\t\tfor (let i = 0; i < nodesToDel.length; i++) {\n\t\t\trbDelete(this, nodesToDel[i]);\n\t\t}\n\t}\n\n\tprivate adjustCarriageReturnFromNext(value: string, node: TreeNode): boolean {\n\t\tif (this.shouldCheckCRLF() && this.endWithCR(value)) {\n\t\t\tlet nextNode = node.next();\n\t\t\tif (this.startWithLF(nextNode)) {\n\t\t\t\t// move `\\n` forward\n\t\t\t\tvalue += '\\n';\n\n\t\t\t\tif (nextNode.piece.length === 1) {\n\t\t\t\t\trbDelete(this, nextNode);\n\t\t\t\t} else {\n\n\t\t\t\t\tconst piece = nextNode.piece;\n\t\t\t\t\tconst newStart: BufferCursor = { line: piece.start.line + 1, column: 0 };\n\t\t\t\t\tconst newLength = piece.length - 1;\n\t\t\t\t\tconst newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n\t\t\t\t\tnextNode.piece = new Piece(\n\t\t\t\t\t\tpiece.bufferIndex,\n\t\t\t\t\t\tnewStart,\n\t\t\t\t\t\tpiece.end,\n\t\t\t\t\t\tnewLineFeedCnt,\n\t\t\t\t\t\tnewLength\n\t\t\t\t\t);\n\n\t\t\t\t\tupdateTreeMetadata(this, nextNode, -1, -1);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// #endregion\n\n\t// #endregion\n\n\t// #region Tree operations\n\titerate(node: TreeNode, callback: (node: TreeNode) => boolean): boolean {\n\t\tif (node === SENTINEL) {\n\t\t\treturn callback(SENTINEL);\n\t\t}\n\n\t\tlet leftRet = this.iterate(node.left, callback);\n\t\tif (!leftRet) {\n\t\t\treturn leftRet;\n\t\t}\n\n\t\treturn callback(node) && this.iterate(node.right, callback);\n\t}\n\n\tprivate getNodeContent(node: TreeNode) {\n\t\tif (node === SENTINEL) {\n\t\t\treturn '';\n\t\t}\n\t\tlet buffer = this._buffers[node.piece.bufferIndex];\n\t\tlet currentContent;\n\t\tlet piece = node.piece;\n\t\tlet startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n\t\tlet endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n\t\tcurrentContent = buffer.buffer.substring(startOffset, endOffset);\n\t\treturn currentContent;\n\t}\n\n\tgetPieceContent(piece: Piece) {\n\t\tlet buffer = this._buffers[piece.bufferIndex];\n\t\tlet startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n\t\tlet endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n\t\tlet currentContent = buffer.buffer.substring(startOffset, endOffset);\n\t\treturn currentContent;\n\t}\n\n\t/**\n\t *      node              node\n\t *     /  \\              /  \\\n\t *    a   b    <----   a    b\n\t *                         /\n\t *                        z\n\t */\n\tprivate rbInsertRight(node: TreeNode | null, p: Piece): TreeNode {\n\t\tlet z = new TreeNode(p, NodeColor.Red);\n\t\tz.left = SENTINEL;\n\t\tz.right = SENTINEL;\n\t\tz.parent = SENTINEL;\n\t\tz.size_left = 0;\n\t\tz.lf_left = 0;\n\n\t\tlet x = this.root;\n\t\tif (x === SENTINEL) {\n\t\t\tthis.root = z;\n\t\t\tz.color = NodeColor.Black;\n\t\t} else if (node!.right === SENTINEL) {\n\t\t\tnode!.right = z;\n\t\t\tz.parent = node!;\n\t\t} else {\n\t\t\tlet nextNode = leftest(node!.right);\n\t\t\tnextNode.left = z;\n\t\t\tz.parent = nextNode;\n\t\t}\n\n\t\tfixInsert(this, z);\n\t\treturn z;\n\t}\n\n\t/**\n\t *      node              node\n\t *     /  \\              /  \\\n\t *    a   b     ---->   a    b\n\t *                       \\\n\t *                        z\n\t */\n\tprivate rbInsertLeft(node: TreeNode | null, p: Piece): TreeNode {\n\t\tlet z = new TreeNode(p, NodeColor.Red);\n\t\tz.left = SENTINEL;\n\t\tz.right = SENTINEL;\n\t\tz.parent = SENTINEL;\n\t\tz.size_left = 0;\n\t\tz.lf_left = 0;\n\n\t\tif (this.root === SENTINEL) {\n\t\t\tthis.root = z;\n\t\t\tz.color = NodeColor.Black;\n\t\t} else if (node!.left === SENTINEL) {\n\t\t\tnode!.left = z;\n\t\t\tz.parent = node!;\n\t\t} else {\n\t\t\tlet prevNode = righttest(node!.left); // a\n\t\t\tprevNode.right = z;\n\t\t\tz.parent = prevNode;\n\t\t}\n\n\t\tfixInsert(this, z);\n\t\treturn z;\n\t}\n\n\tprivate getContentOfSubTree(node: TreeNode): string {\n\t\tlet str = '';\n\n\t\tthis.iterate(node, node => {\n\t\t\tstr += this.getNodeContent(node);\n\t\t\treturn true;\n\t\t});\n\n\t\treturn str;\n\t}\n\t// #endregion\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRelativePattern, match as matchGlobPattern } from 'vs/base/common/glob';\nimport { URI } from 'vs/base/common/uri'; // TODO@Alex\nimport { normalize } from 'vs/base/common/path';\n\nexport interface LanguageFilter {\n\treadonly language?: string;\n\treadonly scheme?: string;\n\treadonly pattern?: string | IRelativePattern;\n\t/**\n\t * This provider is implemented in the UI thread.\n\t */\n\treadonly hasAccessToAllModels?: boolean;\n\treadonly exclusive?: boolean;\n}\n\nexport type LanguageSelector = string | LanguageFilter | ReadonlyArray<string | LanguageFilter>;\n\nexport function score(selector: LanguageSelector | undefined, candidateUri: URI, candidateLanguage: string, candidateIsSynchronized: boolean): number {\n\n\tif (Array.isArray(selector)) {\n\t\t// array -> take max individual value\n\t\tlet ret = 0;\n\t\tfor (const filter of selector) {\n\t\t\tconst value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\n\t\t\tif (value === 10) {\n\t\t\t\treturn value; // already at the highest\n\t\t\t}\n\t\t\tif (value > ret) {\n\t\t\t\tret = value;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\n\t} else if (typeof selector === 'string') {\n\n\t\tif (!candidateIsSynchronized) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// short-hand notion, desugars to\n\t\t// 'fooLang' -> { language: 'fooLang'}\n\t\t// '*' -> { language: '*' }\n\t\tif (selector === '*') {\n\t\t\treturn 5;\n\t\t} else if (selector === candidateLanguage) {\n\t\t\treturn 10;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t} else if (selector) {\n\t\t// filter -> select accordingly, use defaults for scheme\n\t\tconst { language, pattern, scheme, hasAccessToAllModels } = selector as LanguageFilter; // TODO: microsoft/TypeScript#42768\n\n\t\tif (!candidateIsSynchronized && !hasAccessToAllModels) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet ret = 0;\n\n\t\tif (scheme) {\n\t\t\tif (scheme === candidateUri.scheme) {\n\t\t\t\tret = 10;\n\t\t\t} else if (scheme === '*') {\n\t\t\t\tret = 5;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (language) {\n\t\t\tif (language === candidateLanguage) {\n\t\t\t\tret = 10;\n\t\t\t} else if (language === '*') {\n\t\t\t\tret = Math.max(ret, 5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (pattern) {\n\t\t\tlet normalizedPattern: string | IRelativePattern;\n\t\t\tif (typeof pattern === 'string') {\n\t\t\t\tnormalizedPattern = pattern;\n\t\t\t} else {\n\t\t\t\t// Since this pattern has a `base` property, we need\n\t\t\t\t// to normalize this path first before passing it on\n\t\t\t\t// because we will compare it against `Uri.fsPath`\n\t\t\t\t// which uses platform specific separators.\n\t\t\t\t// Refs: https://github.com/microsoft/vscode/issues/99938\n\t\t\t\tnormalizedPattern = { ...pattern, base: normalize(pattern.base) };\n\t\t\t}\n\n\t\t\tif (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n\t\t\t\tret = 10;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\n\t} else {\n\t\treturn 0;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from 'vs/base/common/color';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ColorId, ITokenizationRegistry, ITokenizationSupport, ITokenizationSupportChangedEvent } from 'vs/editor/common/modes';\n\nexport class TokenizationRegistryImpl implements ITokenizationRegistry {\n\n\tprivate readonly _map = new Map<string, ITokenizationSupport>();\n\tprivate readonly _promises = new Map<string, Thenable<void>>();\n\n\tprivate readonly _onDidChange = new Emitter<ITokenizationSupportChangedEvent>();\n\tpublic readonly onDidChange: Event<ITokenizationSupportChangedEvent> = this._onDidChange.event;\n\n\tprivate _colorMap: Color[] | null;\n\n\tconstructor() {\n\t\tthis._colorMap = null;\n\t}\n\n\tpublic fire(languages: string[]): void {\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: languages,\n\t\t\tchangedColorMap: false\n\t\t});\n\t}\n\n\tpublic register(language: string, support: ITokenizationSupport) {\n\t\tthis._map.set(language, support);\n\t\tthis.fire([language]);\n\t\treturn toDisposable(() => {\n\t\t\tif (this._map.get(language) !== support) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._map.delete(language);\n\t\t\tthis.fire([language]);\n\t\t});\n\t}\n\n\tpublic registerPromise(language: string, supportPromise: Thenable<ITokenizationSupport | null>): IDisposable {\n\n\t\tlet registration: IDisposable | null = null;\n\t\tlet isDisposed: boolean = false;\n\n\t\tthis._promises.set(language, supportPromise.then(support => {\n\t\t\tthis._promises.delete(language);\n\t\t\tif (isDisposed || !support) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tregistration = this.register(language, support);\n\t\t}));\n\n\t\treturn toDisposable(() => {\n\t\t\tisDisposed = true;\n\t\t\tif (registration) {\n\t\t\t\tregistration.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getPromise(language: string): Thenable<ITokenizationSupport> | null {\n\t\tconst support = this.get(language);\n\t\tif (support) {\n\t\t\treturn Promise.resolve(support);\n\t\t}\n\t\tconst promise = this._promises.get(language);\n\t\tif (promise) {\n\t\t\treturn promise.then(_ => this.get(language)!);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic get(language: string): ITokenizationSupport | null {\n\t\treturn (this._map.get(language) || null);\n\t}\n\n\tpublic setColorMap(colorMap: Color[]): void {\n\t\tthis._colorMap = colorMap;\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: Array.from(this._map.keys()),\n\t\t\tchangedColorMap: true\n\t\t});\n\t}\n\n\tpublic getColorMap(): Color[] | null {\n\t\treturn this._colorMap;\n\t}\n\n\tpublic getDefaultBackground(): Color | null {\n\t\tif (this._colorMap && this._colorMap.length > ColorId.DefaultBackground) {\n\t\t\treturn this._colorMap[ColorId.DefaultBackground];\n\t\t}\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as descriptors from './descriptors';\nimport { ServiceCollection } from './serviceCollection';\n\n// ------ internal util\n\nexport namespace _util {\n\n\texport const serviceIds = new Map<string, ServiceIdentifier<any>>();\n\n\texport const DI_TARGET = '$di$target';\n\texport const DI_DEPENDENCIES = '$di$dependencies';\n\n\texport function getServiceDependencies(ctor: any): { id: ServiceIdentifier<any>, index: number, optional: boolean }[] {\n\t\treturn ctor[DI_DEPENDENCIES] || [];\n\t}\n}\n\n// --- interfaces ------\n\nexport type BrandedService = { _serviceBrand: undefined };\n\nexport interface IConstructorSignature0<T> {\n\tnew(...services: BrandedService[]): T;\n}\n\nexport interface IConstructorSignature1<A1, T> {\n\tnew <Services extends BrandedService[]>(first: A1, ...services: Services): T;\n}\n\nexport interface IConstructorSignature2<A1, A2, T> {\n\tnew(first: A1, second: A2, ...services: BrandedService[]): T;\n}\n\nexport interface IConstructorSignature3<A1, A2, A3, T> {\n\tnew(first: A1, second: A2, third: A3, ...services: BrandedService[]): T;\n}\n\nexport interface IConstructorSignature4<A1, A2, A3, A4, T> {\n\tnew(first: A1, second: A2, third: A3, fourth: A4, ...services: BrandedService[]): T;\n}\n\nexport interface IConstructorSignature5<A1, A2, A3, A4, A5, T> {\n\tnew(first: A1, second: A2, third: A3, fourth: A4, fifth: A5, ...services: BrandedService[]): T;\n}\n\nexport interface IConstructorSignature6<A1, A2, A3, A4, A5, A6, T> {\n\tnew(first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, ...services: BrandedService[]): T;\n}\n\nexport interface IConstructorSignature7<A1, A2, A3, A4, A5, A6, A7, T> {\n\tnew(first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7, ...services: BrandedService[]): T;\n}\n\nexport interface IConstructorSignature8<A1, A2, A3, A4, A5, A6, A7, A8, T> {\n\tnew(first: A1, second: A2, third: A3, fourth: A4, fifth: A5, sixth: A6, seventh: A7, eigth: A8, ...services: BrandedService[]): T;\n}\n\nexport interface ServicesAccessor {\n\tget<T>(id: ServiceIdentifier<T>): T;\n\tget<T>(id: ServiceIdentifier<T>, isOptional: typeof optional): T | undefined;\n}\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('instantiationService');\n\n/**\n * Given a list of arguments as a tuple, attempt to extract the leading, non-service arguments\n * to their own tuple.\n */\ntype GetLeadingNonServiceArgs<Args> =\n\tArgs extends [...BrandedService[]] ? []\n\t: Args extends [infer A1, ...BrandedService[]] ? [A1]\n\t: Args extends [infer A1, infer A2, ...BrandedService[]] ? [A1, A2]\n\t: Args extends [infer A1, infer A2, infer A3, ...BrandedService[]] ? [A1, A2, A3]\n\t: Args extends [infer A1, infer A2, infer A3, infer A4, ...BrandedService[]] ? [A1, A2, A3, A4]\n\t: Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...BrandedService[]] ? [A1, A2, A3, A4, A5]\n\t: Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...BrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n\t: Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...BrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n\t: Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...BrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n\t: never;\n\nexport interface IInstantiationService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Synchronously creates an instance that is denoted by\n\t * the descriptor\n\t */\n\tcreateInstance<T>(descriptor: descriptors.SyncDescriptor0<T>): T;\n\tcreateInstance<A1, T>(descriptor: descriptors.SyncDescriptor1<A1, T>, a1: A1): T;\n\tcreateInstance<A1, A2, T>(descriptor: descriptors.SyncDescriptor2<A1, A2, T>, a1: A1, a2: A2): T;\n\tcreateInstance<A1, A2, A3, T>(descriptor: descriptors.SyncDescriptor3<A1, A2, A3, T>, a1: A1, a2: A2, a3: A3): T;\n\tcreateInstance<A1, A2, A3, A4, T>(descriptor: descriptors.SyncDescriptor4<A1, A2, A3, A4, T>, a1: A1, a2: A2, a3: A3, a4: A4): T;\n\tcreateInstance<A1, A2, A3, A4, A5, T>(descriptor: descriptors.SyncDescriptor5<A1, A2, A3, A4, A5, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, T>(descriptor: descriptors.SyncDescriptor6<A1, A2, A3, A4, A5, A6, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, T>(descriptor: descriptors.SyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): T;\n\tcreateInstance<A1, A2, A3, A4, A5, A6, A7, A8, T>(descriptor: descriptors.SyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): T;\n\n\tcreateInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n\n\t/**\n\t *\n\t */\n\tinvokeFunction<R, TS extends any[] = []>(fn: (accessor: ServicesAccessor, ...args: TS) => R, ...args: TS): R;\n\n\t/**\n\t * Creates a child of this service which inherts all current services\n\t * and adds/overwrites the given services\n\t */\n\tcreateChild(services: ServiceCollection): IInstantiationService;\n}\n\n\n/**\n * Identifies a service of type T\n */\nexport interface ServiceIdentifier<T> {\n\t(...args: any[]): void;\n\ttype: T;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number, optional: boolean): void {\n\tif ((target as any)[_util.DI_TARGET] === target) {\n\t\t(target as any)[_util.DI_DEPENDENCIES].push({ id, index, optional });\n\t} else {\n\t\t(target as any)[_util.DI_DEPENDENCIES] = [{ id, index, optional }];\n\t\t(target as any)[_util.DI_TARGET] = target;\n\t}\n}\n\n/**\n * The *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator<T>(serviceId: string): ServiceIdentifier<T> {\n\n\tif (_util.serviceIds.has(serviceId)) {\n\t\treturn _util.serviceIds.get(serviceId)!;\n\t}\n\n\tconst id = <any>function (target: Function, key: string, index: number): any {\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@IServiceName-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(id, target, index, false);\n\t};\n\n\tid.toString = () => serviceId;\n\n\t_util.serviceIds.set(serviceId, id);\n\treturn id;\n}\n\nexport function refineServiceDecorator<T1, T extends T1>(serviceIdentifier: ServiceIdentifier<T1>): ServiceIdentifier<T> {\n\treturn <ServiceIdentifier<T>>serviceIdentifier;\n}\n\n/**\n * Mark a service dependency as optional.\n */\nexport function optional<T>(serviceIdentifier: ServiceIdentifier<T>) {\n\n\treturn function (target: Function, key: string, index: number) {\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@optional-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(serviceIdentifier, target, index, true);\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextBufferFactory, ITextModel, ITextModelCreationOptions } from 'vs/editor/common/model';\nimport { ILanguageSelection } from 'vs/editor/common/services/modeService';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { DocumentSemanticTokensProvider, DocumentRangeSemanticTokensProvider } from 'vs/editor/common/modes';\nimport { SemanticTokensProviderStyling } from 'vs/editor/common/services/semanticTokensProviderStyling';\n\nexport const IModelService = createDecorator<IModelService>('modelService');\n\nexport type DocumentTokensProvider = DocumentSemanticTokensProvider | DocumentRangeSemanticTokensProvider;\n\nexport interface IModelService {\n\treadonly _serviceBrand: undefined;\n\n\tcreateModel(value: string | ITextBufferFactory, languageSelection: ILanguageSelection | null, resource?: URI, isForSimpleWidget?: boolean): ITextModel;\n\n\tupdateModel(model: ITextModel, value: string | ITextBufferFactory): void;\n\n\tsetMode(model: ITextModel, languageSelection: ILanguageSelection): void;\n\n\tdestroyModel(resource: URI): void;\n\n\tgetModels(): ITextModel[];\n\n\tgetCreationOptions(language: string, resource: URI, isForSimpleWidget: boolean): ITextModelCreationOptions;\n\n\tgetModel(resource: URI): ITextModel | null;\n\n\tgetSemanticTokensProviderStyling(provider: DocumentTokensProvider): SemanticTokensProviderStyling;\n\n\tonModelAdded: Event<ITextModel>;\n\n\tonModelRemoved: Event<ITextModel>;\n\n\tonModelModeChanged: Event<{ model: ITextModel; oldModeId: string; }>;\n}\n\nexport function shouldSynchronizeModel(model: ITextModel): boolean {\n\treturn (\n\t\t!model.isTooLargeForSyncing() && !model.isForSimpleWidget\n\t);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { doHash } from 'vs/base/common/hash';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { LRUCache } from 'vs/base/common/map';\nimport { MovingAverage } from 'vs/base/common/numbers';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { LanguageFilter, LanguageSelector, score } from 'vs/editor/common/modes/languageSelector';\nimport { shouldSynchronizeModel } from 'vs/editor/common/services/modelService';\n\ninterface Entry<T> {\n\tselector: LanguageSelector;\n\tprovider: T;\n\t_score: number;\n\t_time: number;\n}\n\nfunction isExclusive(selector: LanguageSelector): boolean {\n\tif (typeof selector === 'string') {\n\t\treturn false;\n\t} else if (Array.isArray(selector)) {\n\t\treturn selector.every(isExclusive);\n\t} else {\n\t\treturn !!(selector as LanguageFilter).exclusive; // TODO: microsoft/TypeScript#42768\n\t}\n}\n\nexport class LanguageFeatureRegistry<T> {\n\n\tprivate _clock: number = 0;\n\tprivate readonly _entries: Entry<T>[] = [];\n\tprivate readonly _onDidChange = new Emitter<number>();\n\n\tget onDidChange(): Event<number> {\n\t\treturn this._onDidChange.event;\n\t}\n\n\tregister(selector: LanguageSelector, provider: T): IDisposable {\n\n\t\tlet entry: Entry<T> | undefined = {\n\t\t\tselector,\n\t\t\tprovider,\n\t\t\t_score: -1,\n\t\t\t_time: this._clock++\n\t\t};\n\n\t\tthis._entries.push(entry);\n\t\tthis._lastCandidate = undefined;\n\t\tthis._onDidChange.fire(this._entries.length);\n\n\t\treturn toDisposable(() => {\n\t\t\tif (entry) {\n\t\t\t\tlet idx = this._entries.indexOf(entry);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tthis._entries.splice(idx, 1);\n\t\t\t\t\tthis._lastCandidate = undefined;\n\t\t\t\t\tthis._onDidChange.fire(this._entries.length);\n\t\t\t\t\tentry = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\thas(model: ITextModel): boolean {\n\t\treturn this.all(model).length > 0;\n\t}\n\n\tall(model: ITextModel): T[] {\n\t\tif (!model) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._updateScores(model);\n\t\tconst result: T[] = [];\n\n\t\t// from registry\n\t\tfor (let entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tresult.push(entry.provider);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tordered(model: ITextModel): T[] {\n\t\tconst result: T[] = [];\n\t\tthis._orderedForEach(model, entry => result.push(entry.provider));\n\t\treturn result;\n\t}\n\n\torderedGroups(model: ITextModel): T[][] {\n\t\tconst result: T[][] = [];\n\t\tlet lastBucket: T[];\n\t\tlet lastBucketScore: number;\n\n\t\tthis._orderedForEach(model, entry => {\n\t\t\tif (lastBucket && lastBucketScore === entry._score) {\n\t\t\t\tlastBucket.push(entry.provider);\n\t\t\t} else {\n\t\t\t\tlastBucketScore = entry._score;\n\t\t\t\tlastBucket = [entry.provider];\n\t\t\t\tresult.push(lastBucket);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate _orderedForEach(model: ITextModel, callback: (provider: Entry<T>) => any): void {\n\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._updateScores(model);\n\n\t\tfor (const entry of this._entries) {\n\t\t\tif (entry._score > 0) {\n\t\t\t\tcallback(entry);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _lastCandidate: { uri: string; language: string; } | undefined;\n\n\tprivate _updateScores(model: ITextModel): void {\n\n\t\tlet candidate = {\n\t\t\turi: model.uri.toString(),\n\t\t\tlanguage: model.getLanguageIdentifier().language\n\t\t};\n\n\t\tif (this._lastCandidate\n\t\t\t&& this._lastCandidate.language === candidate.language\n\t\t\t&& this._lastCandidate.uri === candidate.uri) {\n\n\t\t\t// nothing has changed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lastCandidate = candidate;\n\n\t\tfor (let entry of this._entries) {\n\t\t\tentry._score = score(entry.selector, model.uri, model.getLanguageIdentifier().language, shouldSynchronizeModel(model));\n\n\t\t\tif (isExclusive(entry.selector) && entry._score > 0) {\n\t\t\t\t// support for one exclusive selector that overwrites\n\t\t\t\t// any other selector\n\t\t\t\tfor (let entry of this._entries) {\n\t\t\t\t\tentry._score = 0;\n\t\t\t\t}\n\t\t\t\tentry._score = 1000;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// needs sorting\n\t\tthis._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n\t}\n\n\tprivate static _compareByScoreAndTime(a: Entry<any>, b: Entry<any>): number {\n\t\tif (a._score < b._score) {\n\t\t\treturn 1;\n\t\t} else if (a._score > b._score) {\n\t\t\treturn -1;\n\t\t} else if (a._time < b._time) {\n\t\t\treturn 1;\n\t\t} else if (a._time > b._time) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\n\nconst _hashes = new WeakMap<object, number>();\nlet pool = 0;\nfunction weakHash(obj: object): number {\n\tlet value = _hashes.get(obj);\n\tif (value === undefined) {\n\t\tvalue = ++pool;\n\t\t_hashes.set(obj, value);\n\t}\n\treturn value;\n}\n\n\n/**\n * Keeps moving average per model and set of providers so that requests\n * can be debounce according to the provider performance\n */\nexport class LanguageFeatureRequestDelays {\n\n\tprivate readonly _cache = new LRUCache<string, MovingAverage>(50, 0.7);\n\n\n\tconstructor(\n\t\tprivate readonly _registry: LanguageFeatureRegistry<object>,\n\t\treadonly min: number,\n\t\treadonly max: number = Number.MAX_SAFE_INTEGER,\n\t) { }\n\n\tprivate _key(model: ITextModel): string {\n\t\treturn model.id + this._registry.all(model).reduce((hashVal, obj) => doHash(weakHash(obj), hashVal), 0);\n\t}\n\n\tprivate _clamp(value: number | undefined): number {\n\t\tif (value === undefined) {\n\t\t\treturn this.min;\n\t\t} else {\n\t\t\treturn Math.min(this.max, Math.max(this.min, Math.floor(value * 1.3)));\n\t\t}\n\t}\n\n\tget(model: ITextModel): number {\n\t\tconst key = this._key(model);\n\t\tconst avg = this._cache.get(key);\n\t\treturn this._clamp(avg?.value);\n\t}\n\n\tupdate(model: ITextModel, value: number): number {\n\t\tconst key = this._key(model);\n\t\tlet avg = this._cache.get(key);\n\t\tif (!avg) {\n\t\t\tavg = new MovingAverage();\n\t\t\tthis._cache.set(key, avg);\n\t\t}\n\t\tavg.update(value);\n\t\treturn this.get(model);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Color } from 'vs/base/common/color';\nimport { Event } from 'vs/base/common/event';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { TokenizationResult, TokenizationResult2 } from 'vs/editor/common/core/token';\nimport * as model from 'vs/editor/common/model';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/modes/languageFeatureRegistry';\nimport { TokenizationRegistryImpl } from 'vs/editor/common/modes/tokenizationRegistry';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IMarkerData } from 'vs/platform/markers/common/markers';\nimport { iconRegistry, Codicon } from 'vs/base/common/codicons';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\n/**\n * Open ended enum at runtime\n * @internal\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * @internal\n */\nexport class LanguageIdentifier {\n\n\t/**\n\t * A string identifier. Unique across languages. e.g. 'javascript'.\n\t */\n\tpublic readonly language: string;\n\n\t/**\n\t * A numeric identifier. Unique across languages. e.g. 5\n\t * Will vary at runtime based on registration order, etc.\n\t */\n\tpublic readonly id: LanguageId;\n\n\tconstructor(language: string, id: LanguageId) {\n\t\tthis.language = language;\n\t\tthis.id = id;\n\t}\n}\n\n/**\n * A mode. Will soon be obsolete.\n * @internal\n */\nexport interface IMode {\n\n\tgetId(): string;\n\n\tgetLanguageIdentifier(): LanguageIdentifier;\n\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n * @internal\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4\n}\n\n/**\n * Open ended enum at runtime\n * @internal\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type. Values are 2^x such that a bit mask can be used.\n * @internal\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 4\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (3 bits)\n *  - F = FontStyle (3 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n *\n * @internal\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK = 0b00000000000000000000000011111111,\n\tTOKEN_TYPE_MASK = 0b00000000000000000000011100000000,\n\tFONT_STYLE_MASK = 0b00000000000000000011100000000000,\n\tFOREGROUND_MASK = 0b00000000011111111100000000000000,\n\tBACKGROUND_MASK = 0b11111111100000000000000000000000,\n\n\tITALIC_MASK = 0b00000000000000000000100000000000,\n\tBOLD_MASK = 0b00000000000000000001000000000000,\n\tUNDERLINE_MASK = 0b00000000000000000010000000000000,\n\n\tSEMANTIC_USE_ITALIC = 0b00000000000000000000000000000001,\n\tSEMANTIC_USE_BOLD = 0b00000000000000000000000000000010,\n\tSEMANTIC_USE_UNDERLINE = 0b00000000000000000000000000000100,\n\tSEMANTIC_USE_FOREGROUND = 0b00000000000000000000000000001000,\n\tSEMANTIC_USE_BACKGROUND = 0b00000000000000000000000000010000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 14,\n\tBACKGROUND_OFFSET = 23\n}\n\n/**\n * @internal\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tlet foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tlet fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tresult += 'text-decoration: underline;';\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationSupport {\n\n\tgetInitialState(): IState;\n\n\t// add offsetDelta to each of the returned indices\n\ttokenize(line: string, hasEOL: boolean, state: IState, offsetDelta: number): TokenizationResult;\n\n\ttokenize2(line: string, hasEOL: boolean, state: IState, offsetDelta: number): TokenizationResult2;\n}\n\n/**\n * The state of the tokenizer between two lines.\n * It is useful to store flags such as in multiline comment, etc.\n * The model will clone the previous line's state and pass it in to tokenize the next line.\n */\nexport interface IState {\n\tclone(): IState;\n\tequals(other: IState): boolean;\n}\n\n/**\n * A provider result represents the values a provider, like the {@link HoverProvider},\n * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves\n * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a\n * thenable.\n */\nexport type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;\n\n/**\n * A hover represents additional information for a symbol or word. Hovers are\n * rendered in a tooltip-like widget.\n */\nexport interface Hover {\n\t/**\n\t * The contents of this hover.\n\t */\n\tcontents: IMarkdownString[];\n\n\t/**\n\t * The range to which this hover applies. When missing, the\n\t * editor will use the range at the current position or the\n\t * current position itself.\n\t */\n\trange?: IRange;\n}\n\n/**\n * The hover provider interface defines the contract between extensions and\n * the [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface HoverProvider {\n\t/**\n\t * Provide a hover for the given position and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideHover(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Hover>;\n}\n\n/**\n * An evaluatable expression represents additional information for an expression in a document. Evaluatable expressions are\n * evaluated by a debugger or runtime and their result is rendered in a tooltip-like widget.\n * @internal\n */\nexport interface EvaluatableExpression {\n\t/**\n\t * The range to which this expression applies.\n\t */\n\trange: IRange;\n\t/**\n\t * This expression overrides the expression extracted from the range.\n\t */\n\texpression?: string;\n}\n\n\n/**\n * The evaluatable expression provider interface defines the contract between extensions and\n * the debug hover.\n * @internal\n */\nexport interface EvaluatableExpressionProvider {\n\t/**\n\t * Provide a hover for the given position and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideEvaluatableExpression(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<EvaluatableExpression>;\n}\n\n/**\n\t * A value-object that contains contextual information when requesting inline values from a InlineValuesProvider.\n * @internal\n */\nexport interface InlineValueContext {\n\tframeId: number;\n\tstoppedLocation: Range;\n}\n\n/**\n * Provide inline value as text.\n * @internal\n */\nexport interface InlineValueText {\n\ttype: 'text';\n\trange: IRange;\n\ttext: string;\n}\n\n/**\n * Provide inline value through a variable lookup.\n * @internal\n */\nexport interface InlineValueVariableLookup {\n\ttype: 'variable';\n\trange: IRange;\n\tvariableName?: string;\n\tcaseSensitiveLookup: boolean;\n}\n\n/**\n * Provide inline value through an expression evaluation.\n * @internal\n */\nexport interface InlineValueExpression {\n\ttype: 'expression';\n\trange: IRange;\n\texpression?: string;\n}\n\n/**\n * Inline value information can be provided by different means:\n * - directly as a text value (class InlineValueText).\n * - as a name to use for a variable lookup (class InlineValueVariableLookup)\n * - as an evaluatable expression (class InlineValueEvaluatableExpression)\n * The InlineValue types combines all inline value types into one type.\n * @internal\n */\nexport type InlineValue = InlineValueText | InlineValueVariableLookup | InlineValueExpression;\n\n/**\n * The inline values provider interface defines the contract between extensions and\n * the debugger's inline values feature.\n * @internal\n */\nexport interface InlineValuesProvider {\n\t/**\n\t */\n\tonDidChangeInlineValues?: Event<void> | undefined;\n\t/**\n\t * Provide the \"inline values\" for the given range and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideInlineValues(model: model.ITextModel, viewPort: Range, context: InlineValueContext, token: CancellationToken): ProviderResult<InlineValue[]>;\n}\n\nexport const enum CompletionItemKind {\n\tMethod,\n\tFunction,\n\tConstructor,\n\tField,\n\tVariable,\n\tClass,\n\tStruct,\n\tInterface,\n\tModule,\n\tProperty,\n\tEvent,\n\tOperator,\n\tUnit,\n\tValue,\n\tConstant,\n\tEnum,\n\tEnumMember,\n\tKeyword,\n\tText,\n\tColor,\n\tFile,\n\tReference,\n\tCustomcolor,\n\tFolder,\n\tTypeParameter,\n\tUser,\n\tIssue,\n\tSnippet, // <- highest value (used for compare!)\n}\n\n/**\n * @internal\n */\nexport const completionKindToCssClass = (function () {\n\tlet data = Object.create(null);\n\tdata[CompletionItemKind.Method] = 'symbol-method';\n\tdata[CompletionItemKind.Function] = 'symbol-function';\n\tdata[CompletionItemKind.Constructor] = 'symbol-constructor';\n\tdata[CompletionItemKind.Field] = 'symbol-field';\n\tdata[CompletionItemKind.Variable] = 'symbol-variable';\n\tdata[CompletionItemKind.Class] = 'symbol-class';\n\tdata[CompletionItemKind.Struct] = 'symbol-struct';\n\tdata[CompletionItemKind.Interface] = 'symbol-interface';\n\tdata[CompletionItemKind.Module] = 'symbol-module';\n\tdata[CompletionItemKind.Property] = 'symbol-property';\n\tdata[CompletionItemKind.Event] = 'symbol-event';\n\tdata[CompletionItemKind.Operator] = 'symbol-operator';\n\tdata[CompletionItemKind.Unit] = 'symbol-unit';\n\tdata[CompletionItemKind.Value] = 'symbol-value';\n\tdata[CompletionItemKind.Constant] = 'symbol-constant';\n\tdata[CompletionItemKind.Enum] = 'symbol-enum';\n\tdata[CompletionItemKind.EnumMember] = 'symbol-enum-member';\n\tdata[CompletionItemKind.Keyword] = 'symbol-keyword';\n\tdata[CompletionItemKind.Snippet] = 'symbol-snippet';\n\tdata[CompletionItemKind.Text] = 'symbol-text';\n\tdata[CompletionItemKind.Color] = 'symbol-color';\n\tdata[CompletionItemKind.File] = 'symbol-file';\n\tdata[CompletionItemKind.Reference] = 'symbol-reference';\n\tdata[CompletionItemKind.Customcolor] = 'symbol-customcolor';\n\tdata[CompletionItemKind.Folder] = 'symbol-folder';\n\tdata[CompletionItemKind.TypeParameter] = 'symbol-type-parameter';\n\tdata[CompletionItemKind.User] = 'account';\n\tdata[CompletionItemKind.Issue] = 'issues';\n\n\treturn function (kind: CompletionItemKind): string {\n\t\tconst name = data[kind];\n\t\tlet codicon = name && iconRegistry.get(name);\n\t\tif (!codicon) {\n\t\t\tconsole.info('No codicon found for CompletionItemKind ' + kind);\n\t\t\tcodicon = Codicon.symbolProperty;\n\t\t}\n\t\treturn codicon.classNames;\n\t};\n})();\n\n/**\n * @internal\n */\nexport let completionKindFromString: {\n\t(value: string): CompletionItemKind;\n\t(value: string, strict: true): CompletionItemKind | undefined;\n} = (function () {\n\tlet data: Record<string, CompletionItemKind> = Object.create(null);\n\tdata['method'] = CompletionItemKind.Method;\n\tdata['function'] = CompletionItemKind.Function;\n\tdata['constructor'] = <any>CompletionItemKind.Constructor;\n\tdata['field'] = CompletionItemKind.Field;\n\tdata['variable'] = CompletionItemKind.Variable;\n\tdata['class'] = CompletionItemKind.Class;\n\tdata['struct'] = CompletionItemKind.Struct;\n\tdata['interface'] = CompletionItemKind.Interface;\n\tdata['module'] = CompletionItemKind.Module;\n\tdata['property'] = CompletionItemKind.Property;\n\tdata['event'] = CompletionItemKind.Event;\n\tdata['operator'] = CompletionItemKind.Operator;\n\tdata['unit'] = CompletionItemKind.Unit;\n\tdata['value'] = CompletionItemKind.Value;\n\tdata['constant'] = CompletionItemKind.Constant;\n\tdata['enum'] = CompletionItemKind.Enum;\n\tdata['enum-member'] = CompletionItemKind.EnumMember;\n\tdata['enumMember'] = CompletionItemKind.EnumMember;\n\tdata['keyword'] = CompletionItemKind.Keyword;\n\tdata['snippet'] = CompletionItemKind.Snippet;\n\tdata['text'] = CompletionItemKind.Text;\n\tdata['color'] = CompletionItemKind.Color;\n\tdata['file'] = CompletionItemKind.File;\n\tdata['reference'] = CompletionItemKind.Reference;\n\tdata['customcolor'] = CompletionItemKind.Customcolor;\n\tdata['folder'] = CompletionItemKind.Folder;\n\tdata['type-parameter'] = CompletionItemKind.TypeParameter;\n\tdata['typeParameter'] = CompletionItemKind.TypeParameter;\n\tdata['account'] = CompletionItemKind.User;\n\tdata['issue'] = CompletionItemKind.Issue;\n\treturn function (value: string, strict?: true) {\n\t\tlet res = data[value];\n\t\tif (typeof res === 'undefined' && !strict) {\n\t\t\tres = CompletionItemKind.Property;\n\t\t}\n\t\treturn res;\n\t};\n})();\n\nexport interface CompletionItemLabel {\n\tlabel: string;\n\tdetail?: string;\n\tdescription?: string;\n}\n\nexport const enum CompletionItemTag {\n\tDeprecated = 1\n}\n\nexport const enum CompletionItemInsertTextRule {\n\t/**\n\t * Adjust whitespace/indentation of multiline insert texts to\n\t * match the current line indentation.\n\t */\n\tKeepWhitespace = 0b001,\n\n\t/**\n\t * `insertText` is a snippet.\n\t */\n\tInsertAsSnippet = 0b100,\n}\n\n/**\n * A completion item represents a text snippet that is\n * proposed to complete text that is being typed.\n */\nexport interface CompletionItem {\n\t/**\n\t * The label of this completion item. By default\n\t * this is also the text that is inserted when selecting\n\t * this completion.\n\t */\n\tlabel: string | CompletionItemLabel;\n\t/**\n\t * The kind of this completion item. Based on the kind\n\t * an icon is chosen by the editor.\n\t */\n\tkind: CompletionItemKind;\n\t/**\n\t * A modifier to the `kind` which affect how the item\n\t * is rendered, e.g. Deprecated is rendered with a strikeout\n\t */\n\ttags?: ReadonlyArray<CompletionItemTag>;\n\t/**\n\t * A human-readable string with additional information\n\t * about this item, like type or symbol information.\n\t */\n\tdetail?: string;\n\t/**\n\t * A human-readable string that represents a doc-comment.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * A string that should be used when comparing this item\n\t * with other items. When `falsy` the {@link CompletionItem.label label}\n\t * is used.\n\t */\n\tsortText?: string;\n\t/**\n\t * A string that should be used when filtering a set of\n\t * completion items. When `falsy` the {@link CompletionItem.label label}\n\t * is used.\n\t */\n\tfilterText?: string;\n\t/**\n\t * Select this item when showing. *Note* that only one completion item can be selected and\n\t * that the editor decides which item that is. The rule is that the *first* item of those\n\t * that match best is selected.\n\t */\n\tpreselect?: boolean;\n\t/**\n\t * A string or snippet that should be inserted in a document when selecting\n\t * this completion.\n\t * is used.\n\t */\n\tinsertText: string;\n\t/**\n\t * Addition rules (as bitmask) that should be applied when inserting\n\t * this completion.\n\t */\n\tinsertTextRules?: CompletionItemInsertTextRule;\n\t/**\n\t * A range of text that should be replaced by this completion item.\n\t *\n\t * Defaults to a range from the start of the {@link TextDocument.getWordRangeAtPosition current word} to the\n\t * current position.\n\t *\n\t * *Note:* The range must be a {@link Range.isSingleLine single line} and it must\n\t * {@link Range.contains contain} the position at which completion has been {@link CompletionItemProvider.provideCompletionItems requested}.\n\t */\n\trange: IRange | { insert: IRange, replace: IRange };\n\t/**\n\t * An optional set of characters that when pressed while this completion is active will accept it first and\n\t * then type that character. *Note* that all commit characters should have `length=1` and that superfluous\n\t * characters will be ignored.\n\t */\n\tcommitCharacters?: string[];\n\t/**\n\t * An optional array of additional text edits that are applied when\n\t * selecting this completion. Edits must not overlap with the main edit\n\t * nor with themselves.\n\t */\n\tadditionalTextEdits?: model.ISingleEditOperation[];\n\t/**\n\t * A command that should be run upon acceptance of this item.\n\t */\n\tcommand?: Command;\n\n\t/**\n\t * @internal\n\t */\n\t_id?: [number, number];\n}\n\nexport interface CompletionList {\n\tsuggestions: CompletionItem[];\n\tincomplete?: boolean;\n\tdispose?(): void;\n\n\t/**\n\t * @internal\n\t */\n\tduration?: number;\n}\n\n/**\n * How a suggest provider was triggered.\n */\nexport const enum CompletionTriggerKind {\n\tInvoke = 0,\n\tTriggerCharacter = 1,\n\tTriggerForIncompleteCompletions = 2\n}\n/**\n * Contains additional information about the context in which\n * {@link CompletionItemProvider.provideCompletionItems completion provider} is triggered.\n */\nexport interface CompletionContext {\n\t/**\n\t * How the completion was triggered.\n\t */\n\ttriggerKind: CompletionTriggerKind;\n\t/**\n\t * Character that triggered the completion item provider.\n\t *\n\t * `undefined` if provider was not triggered by a character.\n\t */\n\ttriggerCharacter?: string;\n}\n/**\n * The completion item provider interface defines the contract between extensions and\n * the [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).\n *\n * When computing *complete* completion items is expensive, providers can optionally implement\n * the `resolveCompletionItem`-function. In that case it is enough to return completion\n * items with a {@link CompletionItem.label label} from the\n * {@link CompletionItemProvider.provideCompletionItems provideCompletionItems}-function. Subsequently,\n * when a completion item is shown in the UI and gains focus this provider is asked to resolve\n * the item, like adding {@link CompletionItem.documentation doc-comment} or {@link CompletionItem.detail details}.\n */\nexport interface CompletionItemProvider {\n\n\t/**\n\t * @internal\n\t */\n\t_debugDisplayName?: string;\n\n\ttriggerCharacters?: string[];\n\t/**\n\t * Provide completion items for the given position and document.\n\t */\n\tprovideCompletionItems(model: model.ITextModel, position: Position, context: CompletionContext, token: CancellationToken): ProviderResult<CompletionList>;\n\n\t/**\n\t * Given a completion item fill in more data, like {@link CompletionItem.documentation doc-comment}\n\t * or {@link CompletionItem.detail details}.\n\t *\n\t * The editor will only resolve a completion item once.\n\t */\n\tresolveCompletionItem?(item: CompletionItem, token: CancellationToken): ProviderResult<CompletionItem>;\n}\n\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport enum InlineCompletionTriggerKind {\n\t/**\n\t * Completion was triggered automatically while editing.\n\t * It is sufficient to return a single completion item in this case.\n\t */\n\tAutomatic = 0,\n\n\t/**\n\t * Completion was triggered explicitly by a user gesture.\n\t * Return multiple completion items to enable cycling through them.\n\t */\n\tExplicit = 1,\n}\n\nexport interface InlineCompletionContext {\n\t/**\n\t * How the completion was triggered.\n\t */\n\treadonly triggerKind: InlineCompletionTriggerKind;\n\n\treadonly selectedSuggestionInfo: SelectedSuggestionInfo | undefined;\n}\n\nexport interface SelectedSuggestionInfo {\n\trange: IRange;\n\ttext: string;\n}\n\nexport interface InlineCompletion {\n\t/**\n\t * The text to insert.\n\t * If the text contains a line break, the range must end at the end of a line.\n\t * If existing text should be replaced, the existing text must be a prefix of the text to insert.\n\t*/\n\treadonly text: string;\n\n\t/**\n\t * The range to replace.\n\t * Must begin and end on the same line.\n\t*/\n\treadonly range?: IRange;\n\n\treadonly command?: Command;\n}\n\nexport interface InlineCompletions<TItem extends InlineCompletion = InlineCompletion> {\n\treadonly items: readonly TItem[];\n}\n\nexport interface InlineCompletionsProvider<T extends InlineCompletions = InlineCompletions> {\n\tprovideInlineCompletions(model: model.ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): ProviderResult<T>;\n\n\t/**\n\t * Will be called when an item is shown.\n\t*/\n\thandleItemDidShow?(completions: T, item: T['items'][number]): void;\n\n\t/**\n\t * Will be called when a completions list is no longer in use and can be garbage-collected.\n\t*/\n\tfreeInlineCompletions(completions: T): void;\n}\n\nexport interface CodeAction {\n\ttitle: string;\n\tcommand?: Command;\n\tedit?: WorkspaceEdit;\n\tdiagnostics?: IMarkerData[];\n\tkind?: string;\n\tisPreferred?: boolean;\n\tdisabled?: string;\n}\n\n/**\n * @internal\n */\nexport const enum CodeActionTriggerType {\n\tInvoke = 1,\n\tAuto = 2,\n}\n\n/**\n * @internal\n */\nexport interface CodeActionContext {\n\tonly?: string;\n\ttrigger: CodeActionTriggerType;\n}\n\nexport interface CodeActionList extends IDisposable {\n\treadonly actions: ReadonlyArray<CodeAction>;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n * @internal\n */\nexport interface CodeActionProvider {\n\n\tdisplayName?: string\n\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range | Selection, context: CodeActionContext, token: CancellationToken): ProviderResult<CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(codeAction: CodeAction, token: CancellationToken): ProviderResult<CodeAction>;\n\n\t/**\n\t * Optional list of CodeActionKinds that this provider returns.\n\t */\n\treadonly providedCodeActionKinds?: ReadonlyArray<string>;\n\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string, readonly command: Command }>;\n\n\t/**\n\t * @internal\n\t */\n\t_getAdditionalMenuItems?(context: CodeActionContext, actions: readonly CodeAction[]): Command[];\n}\n\n/**\n * Represents a parameter of a callable-signature. A parameter can\n * have a label and a doc-comment.\n */\nexport interface ParameterInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string | [number, number];\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n}\n/**\n * Represents the signature of something callable. A signature\n * can have a label, like a function-name, a doc-comment, and\n * a set of parameters.\n */\nexport interface SignatureInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string;\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * The parameters of this signature.\n\t */\n\tparameters: ParameterInformation[];\n\t/**\n\t * Index of the active parameter.\n\t *\n\t * If provided, this is used in place of `SignatureHelp.activeSignature`.\n\t */\n\tactiveParameter?: number;\n}\n/**\n * Signature help represents the signature of something\n * callable. There can be multiple signatures but only one\n * active and only one active parameter.\n */\nexport interface SignatureHelp {\n\t/**\n\t * One or more signatures.\n\t */\n\tsignatures: SignatureInformation[];\n\t/**\n\t * The active signature.\n\t */\n\tactiveSignature: number;\n\t/**\n\t * The active parameter of the active signature.\n\t */\n\tactiveParameter: number;\n}\n\nexport interface SignatureHelpResult extends IDisposable {\n\tvalue: SignatureHelp;\n}\n\nexport enum SignatureHelpTriggerKind {\n\tInvoke = 1,\n\tTriggerCharacter = 2,\n\tContentChange = 3,\n}\n\nexport interface SignatureHelpContext {\n\treadonly triggerKind: SignatureHelpTriggerKind;\n\treadonly triggerCharacter?: string;\n\treadonly isRetrigger: boolean;\n\treadonly activeSignatureHelp?: SignatureHelp;\n}\n\n/**\n * The signature help provider interface defines the contract between extensions and\n * the [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface SignatureHelpProvider {\n\n\treadonly signatureHelpTriggerCharacters?: ReadonlyArray<string>;\n\treadonly signatureHelpRetriggerCharacters?: ReadonlyArray<string>;\n\n\t/**\n\t * Provide help for the signature at the given position and document.\n\t */\n\tprovideSignatureHelp(model: model.ITextModel, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelpResult>;\n}\n\n/**\n * A document highlight kind.\n */\nexport enum DocumentHighlightKind {\n\t/**\n\t * A textual occurrence.\n\t */\n\tText,\n\t/**\n\t * Read-access of a symbol, like reading a variable.\n\t */\n\tRead,\n\t/**\n\t * Write-access of a symbol, like writing to a variable.\n\t */\n\tWrite\n}\n/**\n * A document highlight is a range inside a text document which deserves\n * special attention. Usually a document highlight is visualized by changing\n * the background color of its range.\n */\nexport interface DocumentHighlight {\n\t/**\n\t * The range this highlight applies to.\n\t */\n\trange: IRange;\n\t/**\n\t * The highlight kind, default is {@link DocumentHighlightKind.Text text}.\n\t */\n\tkind?: DocumentHighlightKind;\n}\n/**\n * The document highlight provider interface defines the contract between extensions and\n * the word-highlight-feature.\n */\nexport interface DocumentHighlightProvider {\n\t/**\n\t * Provide a set of document highlights, like all occurrences of a variable or\n\t * all exit-points of a function.\n\t */\n\tprovideDocumentHighlights(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<DocumentHighlight[]>;\n}\n\n/**\n * The linked editing range provider interface defines the contract between extensions and\n * the linked editing feature.\n */\nexport interface LinkedEditingRangeProvider {\n\n\t/**\n\t * Provide a list of ranges that can be edited together.\n\t */\n\tprovideLinkedEditingRanges(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<LinkedEditingRanges>;\n}\n\n/**\n * Represents a list of ranges that can be edited together along with a word pattern to describe valid contents.\n */\nexport interface LinkedEditingRanges {\n\t/**\n\t * A list of ranges that can be edited together. The ranges must have\n\t * identical length and text content. The ranges cannot overlap\n\t */\n\tranges: IRange[];\n\n\t/**\n\t * An optional word pattern that describes valid contents for the given ranges.\n\t * If no pattern is provided, the language configuration's word pattern will be used.\n\t */\n\twordPattern?: RegExp;\n}\n\n/**\n * Value-object that contains additional information when\n * requesting references.\n */\nexport interface ReferenceContext {\n\t/**\n\t * Include the declaration of the current symbol.\n\t */\n\tincludeDeclaration: boolean;\n}\n/**\n * The reference provider interface defines the contract between extensions and\n * the [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.\n */\nexport interface ReferenceProvider {\n\t/**\n\t * Provide a set of project-wide references for the given position and document.\n\t */\n\tprovideReferences(model: model.ITextModel, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;\n}\n\n/**\n * Represents a location inside a resource, such as a line\n * inside a text file.\n */\nexport interface Location {\n\t/**\n\t * The resource identifier of this location.\n\t */\n\turi: URI;\n\t/**\n\t * The document range of this locations.\n\t */\n\trange: IRange;\n}\n\nexport interface LocationLink {\n\t/**\n\t * A range to select where this link originates from.\n\t */\n\toriginSelectionRange?: IRange;\n\n\t/**\n\t * The target uri this link points to.\n\t */\n\turi: URI;\n\n\t/**\n\t * The full range this link points to.\n\t */\n\trange: IRange;\n\n\t/**\n\t * A range to select this link points to. Must be contained\n\t * in `LocationLink.range`.\n\t */\n\ttargetSelectionRange?: IRange;\n}\n\n/**\n * @internal\n */\nexport function isLocationLink(thing: any): thing is LocationLink {\n\treturn thing\n\t\t&& URI.isUri((thing as LocationLink).uri)\n\t\t&& Range.isIRange((thing as LocationLink).range)\n\t\t&& (Range.isIRange((thing as LocationLink).originSelectionRange) || Range.isIRange((thing as LocationLink).targetSelectionRange));\n}\n\nexport type Definition = Location | Location[] | LocationLink[];\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DefinitionProvider {\n\t/**\n\t * Provide the definition of the symbol at the given position and document.\n\t */\n\tprovideDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DeclarationProvider {\n\t/**\n\t * Provide the declaration of the symbol at the given position and document.\n\t */\n\tprovideDeclaration(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The implementation provider interface defines the contract between extensions and\n * the go to implementation feature.\n */\nexport interface ImplementationProvider {\n\t/**\n\t * Provide the implementation of the symbol at the given position and document.\n\t */\n\tprovideImplementation(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The type definition provider interface defines the contract between extensions and\n * the go to type definition feature.\n */\nexport interface TypeDefinitionProvider {\n\t/**\n\t * Provide the type definition of the symbol at the given position and document.\n\t */\n\tprovideTypeDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * A symbol kind.\n */\nexport const enum SymbolKind {\n\tFile = 0,\n\tModule = 1,\n\tNamespace = 2,\n\tPackage = 3,\n\tClass = 4,\n\tMethod = 5,\n\tProperty = 6,\n\tField = 7,\n\tConstructor = 8,\n\tEnum = 9,\n\tInterface = 10,\n\tFunction = 11,\n\tVariable = 12,\n\tConstant = 13,\n\tString = 14,\n\tNumber = 15,\n\tBoolean = 16,\n\tArray = 17,\n\tObject = 18,\n\tKey = 19,\n\tNull = 20,\n\tEnumMember = 21,\n\tStruct = 22,\n\tEvent = 23,\n\tOperator = 24,\n\tTypeParameter = 25\n}\n\nexport const enum SymbolTag {\n\tDeprecated = 1,\n}\n\n/**\n * @internal\n */\nexport namespace SymbolKinds {\n\n\tconst byName = new Map<string, SymbolKind>();\n\tbyName.set('file', SymbolKind.File);\n\tbyName.set('module', SymbolKind.Module);\n\tbyName.set('namespace', SymbolKind.Namespace);\n\tbyName.set('package', SymbolKind.Package);\n\tbyName.set('class', SymbolKind.Class);\n\tbyName.set('method', SymbolKind.Method);\n\tbyName.set('property', SymbolKind.Property);\n\tbyName.set('field', SymbolKind.Field);\n\tbyName.set('constructor', SymbolKind.Constructor);\n\tbyName.set('enum', SymbolKind.Enum);\n\tbyName.set('interface', SymbolKind.Interface);\n\tbyName.set('function', SymbolKind.Function);\n\tbyName.set('variable', SymbolKind.Variable);\n\tbyName.set('constant', SymbolKind.Constant);\n\tbyName.set('string', SymbolKind.String);\n\tbyName.set('number', SymbolKind.Number);\n\tbyName.set('boolean', SymbolKind.Boolean);\n\tbyName.set('array', SymbolKind.Array);\n\tbyName.set('object', SymbolKind.Object);\n\tbyName.set('key', SymbolKind.Key);\n\tbyName.set('null', SymbolKind.Null);\n\tbyName.set('enum-member', SymbolKind.EnumMember);\n\tbyName.set('struct', SymbolKind.Struct);\n\tbyName.set('event', SymbolKind.Event);\n\tbyName.set('operator', SymbolKind.Operator);\n\tbyName.set('type-parameter', SymbolKind.TypeParameter);\n\n\tconst byKind = new Map<SymbolKind, string>();\n\tbyKind.set(SymbolKind.File, 'file');\n\tbyKind.set(SymbolKind.Module, 'module');\n\tbyKind.set(SymbolKind.Namespace, 'namespace');\n\tbyKind.set(SymbolKind.Package, 'package');\n\tbyKind.set(SymbolKind.Class, 'class');\n\tbyKind.set(SymbolKind.Method, 'method');\n\tbyKind.set(SymbolKind.Property, 'property');\n\tbyKind.set(SymbolKind.Field, 'field');\n\tbyKind.set(SymbolKind.Constructor, 'constructor');\n\tbyKind.set(SymbolKind.Enum, 'enum');\n\tbyKind.set(SymbolKind.Interface, 'interface');\n\tbyKind.set(SymbolKind.Function, 'function');\n\tbyKind.set(SymbolKind.Variable, 'variable');\n\tbyKind.set(SymbolKind.Constant, 'constant');\n\tbyKind.set(SymbolKind.String, 'string');\n\tbyKind.set(SymbolKind.Number, 'number');\n\tbyKind.set(SymbolKind.Boolean, 'boolean');\n\tbyKind.set(SymbolKind.Array, 'array');\n\tbyKind.set(SymbolKind.Object, 'object');\n\tbyKind.set(SymbolKind.Key, 'key');\n\tbyKind.set(SymbolKind.Null, 'null');\n\tbyKind.set(SymbolKind.EnumMember, 'enum-member');\n\tbyKind.set(SymbolKind.Struct, 'struct');\n\tbyKind.set(SymbolKind.Event, 'event');\n\tbyKind.set(SymbolKind.Operator, 'operator');\n\tbyKind.set(SymbolKind.TypeParameter, 'type-parameter');\n\t/**\n\t * @internal\n\t */\n\texport function fromString(value: string): SymbolKind | undefined {\n\t\treturn byName.get(value);\n\t}\n\t/**\n\t * @internal\n\t */\n\texport function toString(kind: SymbolKind): string | undefined {\n\t\treturn byKind.get(kind);\n\t}\n\t/**\n\t * @internal\n\t */\n\texport function toCssClassName(kind: SymbolKind, inline?: boolean): string {\n\t\tconst symbolName = byKind.get(kind);\n\t\tlet codicon = symbolName && iconRegistry.get('symbol-' + symbolName);\n\t\tif (!codicon) {\n\t\t\tconsole.info('No codicon found for SymbolKind ' + kind);\n\t\t\tcodicon = Codicon.symbolProperty;\n\t\t}\n\t\treturn `${inline ? 'inline' : 'block'} ${codicon.classNames}`;\n\t}\n}\n\nexport interface DocumentSymbol {\n\tname: string;\n\tdetail: string;\n\tkind: SymbolKind;\n\ttags: ReadonlyArray<SymbolTag>;\n\tcontainerName?: string;\n\trange: IRange;\n\tselectionRange: IRange;\n\tchildren?: DocumentSymbol[];\n}\n\n/**\n * The document symbol provider interface defines the contract between extensions and\n * the [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)-feature.\n */\nexport interface DocumentSymbolProvider {\n\n\tdisplayName?: string;\n\n\t/**\n\t * Provide symbol information for the given document.\n\t */\n\tprovideDocumentSymbols(model: model.ITextModel, token: CancellationToken): ProviderResult<DocumentSymbol[]>;\n}\n\nexport type TextEdit = { range: IRange; text: string; eol?: model.EndOfLineSequence; };\n\n/**\n * Interface used to format a model\n */\nexport interface FormattingOptions {\n\t/**\n\t * Size of a tab in spaces.\n\t */\n\ttabSize: number;\n\t/**\n\t * Prefer spaces over tabs.\n\t */\n\tinsertSpaces: boolean;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentFormattingEditProvider {\n\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a whole document.\n\t */\n\tprovideDocumentFormattingEdits(model: model.ITextModel, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentRangeFormattingEditProvider {\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a range in a document.\n\t *\n\t * The given range is a hint and providers can decide to format a smaller\n\t * or larger range. Often this is done by adjusting the start and end\n\t * of the range to full syntax nodes.\n\t */\n\tprovideDocumentRangeFormattingEdits(model: model.ITextModel, range: Range, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface OnTypeFormattingEditProvider {\n\n\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\tautoFormatTriggerCharacters: string[];\n\n\t/**\n\t * Provide formatting edits after a character has been typed.\n\t *\n\t * The given position and character should hint to the provider\n\t * what range the position to expand to, like find the matching `{`\n\t * when `}` has been entered.\n\t */\n\tprovideOnTypeFormattingEdits(model: model.ITextModel, position: Position, ch: string, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n\n/**\n * @internal\n */\nexport interface IInplaceReplaceSupportResult {\n\tvalue: string;\n\trange: IRange;\n}\n\n/**\n * A link inside the editor.\n */\nexport interface ILink {\n\trange: IRange;\n\turl?: URI | string;\n\ttooltip?: string;\n}\n\nexport interface ILinksList {\n\tlinks: ILink[];\n\tdispose?(): void;\n}\n/**\n * A provider of links.\n */\nexport interface LinkProvider {\n\tprovideLinks(model: model.ITextModel, token: CancellationToken): ProviderResult<ILinksList>;\n\tresolveLink?: (link: ILink, token: CancellationToken) => ProviderResult<ILink>;\n}\n\n/**\n * A color in RGBA format.\n */\nexport interface IColor {\n\n\t/**\n\t * The red component in the range [0-1].\n\t */\n\treadonly red: number;\n\n\t/**\n\t * The green component in the range [0-1].\n\t */\n\treadonly green: number;\n\n\t/**\n\t * The blue component in the range [0-1].\n\t */\n\treadonly blue: number;\n\n\t/**\n\t * The alpha component in the range [0-1].\n\t */\n\treadonly alpha: number;\n}\n\n/**\n * String representations for a color\n */\nexport interface IColorPresentation {\n\t/**\n\t * The label of this color presentation. It will be shown on the color\n\t * picker header. By default this is also the text that is inserted when selecting\n\t * this color presentation.\n\t */\n\tlabel: string;\n\t/**\n\t * An {@link TextEdit edit} which is applied to a document when selecting\n\t * this presentation for the color.\n\t */\n\ttextEdit?: TextEdit;\n\t/**\n\t * An optional array of additional {@link TextEdit text edits} that are applied when\n\t * selecting this color presentation.\n\t */\n\tadditionalTextEdits?: TextEdit[];\n}\n\n/**\n * A color range is a range in a text model which represents a color.\n */\nexport interface IColorInformation {\n\n\t/**\n\t * The range within the model.\n\t */\n\trange: IRange;\n\n\t/**\n\t * The color represented in this range.\n\t */\n\tcolor: IColor;\n}\n\n/**\n * A provider of colors for editor models.\n */\nexport interface DocumentColorProvider {\n\t/**\n\t * Provides the color ranges for a specific model.\n\t */\n\tprovideDocumentColors(model: model.ITextModel, token: CancellationToken): ProviderResult<IColorInformation[]>;\n\t/**\n\t * Provide the string representations for a color.\n\t */\n\tprovideColorPresentations(model: model.ITextModel, colorInfo: IColorInformation, token: CancellationToken): ProviderResult<IColorPresentation[]>;\n}\n\nexport interface SelectionRange {\n\trange: IRange;\n}\n\nexport interface SelectionRangeProvider {\n\t/**\n\t * Provide ranges that should be selected from the given position.\n\t */\n\tprovideSelectionRanges(model: model.ITextModel, positions: Position[], token: CancellationToken): ProviderResult<SelectionRange[][]>;\n}\n\nexport interface FoldingContext {\n}\n/**\n * A provider of folding ranges for editor models.\n */\nexport interface FoldingRangeProvider {\n\n\t/**\n\t * An optional event to signal that the folding ranges from this provider have changed.\n\t */\n\tonDidChange?: Event<this>;\n\n\t/**\n\t * Provides the folding ranges for a specific model.\n\t */\n\tprovideFoldingRanges(model: model.ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\n}\n\nexport interface FoldingRange {\n\n\t/**\n\t * The one-based start line of the range to fold. The folded area starts after the line's last character.\n\t */\n\tstart: number;\n\n\t/**\n\t * The one-based end line of the range to fold. The folded area ends with the line's last character.\n\t */\n\tend: number;\n\n\t/**\n\t * Describes the {@link FoldingRangeKind Kind} of the folding range such as {@link FoldingRangeKind.Comment Comment} or\n\t * {@link FoldingRangeKind.Region Region}. The kind is used to categorize folding ranges and used by commands\n\t * like 'Fold all comments'. See\n\t * {@link FoldingRangeKind} for an enumeration of standardized kinds.\n\t */\n\tkind?: FoldingRangeKind;\n}\nexport class FoldingRangeKind {\n\t/**\n\t * Kind for folding range representing a comment. The value of the kind is 'comment'.\n\t */\n\tstatic readonly Comment = new FoldingRangeKind('comment');\n\t/**\n\t * Kind for folding range representing a import. The value of the kind is 'imports'.\n\t */\n\tstatic readonly Imports = new FoldingRangeKind('imports');\n\t/**\n\t * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n\t * The value of the kind is 'region'.\n\t */\n\tstatic readonly Region = new FoldingRangeKind('region');\n\n\t/**\n\t * Creates a new {@link FoldingRangeKind}.\n\t *\n\t * @param value of the kind.\n\t */\n\tpublic constructor(public value: string) {\n\t}\n}\n\n\nexport interface WorkspaceEditMetadata {\n\tneedsConfirmation: boolean;\n\tlabel: string;\n\tdescription?: string;\n\t/**\n\t * @internal\n\t */\n\ticonPath?: ThemeIcon | URI | { light: URI, dark: URI };\n}\n\nexport interface WorkspaceFileEditOptions {\n\toverwrite?: boolean;\n\tignoreIfNotExists?: boolean;\n\tignoreIfExists?: boolean;\n\trecursive?: boolean;\n\tcopy?: boolean;\n\tfolder?: boolean;\n\tskipTrashBin?: boolean;\n\tmaxSize?: number;\n}\n\nexport interface WorkspaceFileEdit {\n\toldUri?: URI;\n\tnewUri?: URI;\n\toptions?: WorkspaceFileEditOptions;\n\tmetadata?: WorkspaceEditMetadata;\n}\n\nexport interface WorkspaceTextEdit {\n\tresource: URI;\n\tedit: TextEdit;\n\tmodelVersionId?: number;\n\tmetadata?: WorkspaceEditMetadata;\n}\n\nexport interface WorkspaceEdit {\n\tedits: Array<WorkspaceTextEdit | WorkspaceFileEdit>;\n}\n\nexport interface Rejection {\n\trejectReason?: string;\n}\nexport interface RenameLocation {\n\trange: IRange;\n\ttext: string;\n}\n\nexport interface RenameProvider {\n\tprovideRenameEdits(model: model.ITextModel, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit & Rejection>;\n\tresolveRenameLocation?(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<RenameLocation & Rejection>;\n}\n\n/**\n * @internal\n */\nexport interface AuthenticationSession {\n\tid: string;\n\taccessToken: string;\n\taccount: {\n\t\tlabel: string;\n\t\tid: string;\n\t}\n\tscopes: ReadonlyArray<string>;\n\tidToken?: string;\n}\n\n/**\n * @internal\n */\nexport interface AuthenticationSessionsChangeEvent {\n\tadded: ReadonlyArray<AuthenticationSession>;\n\tremoved: ReadonlyArray<AuthenticationSession>;\n\tchanged: ReadonlyArray<AuthenticationSession>;\n}\n\n/**\n * @internal\n */\nexport interface AuthenticationProviderInformation {\n\tid: string;\n\tlabel: string;\n}\n\nexport interface Command {\n\tid: string;\n\ttitle: string;\n\ttooltip?: string;\n\targuments?: any[];\n}\n\n/**\n * @internal\n */\nexport interface CommentThreadTemplate {\n\tcontrollerHandle: number;\n\tlabel: string;\n\tacceptInputCommand?: Command;\n\tadditionalCommands?: Command[];\n\tdeleteCommand?: Command;\n}\n\n/**\n * @internal\n */\nexport interface CommentInfo {\n\textensionId?: string;\n\tthreads: CommentThread[];\n\tcommentingRanges: CommentingRanges;\n}\n\n/**\n * @internal\n */\nexport enum CommentThreadCollapsibleState {\n\t/**\n\t * Determines an item is collapsed\n\t */\n\tCollapsed = 0,\n\t/**\n\t * Determines an item is expanded\n\t */\n\tExpanded = 1\n}\n\n\n\n/**\n * @internal\n */\nexport interface CommentWidget {\n\tcommentThread: CommentThread;\n\tcomment?: Comment;\n\tinput: string;\n\tonDidChangeInput: Event<string>;\n}\n\n/**\n * @internal\n */\nexport interface CommentInput {\n\tvalue: string;\n\turi: URI;\n}\n\n/**\n * @internal\n */\nexport interface CommentThread {\n\tcommentThreadHandle: number;\n\tcontrollerHandle: number;\n\textensionId?: string;\n\tthreadId: string;\n\tresource: string | null;\n\trange: IRange;\n\tlabel: string | undefined;\n\tcontextValue: string | undefined;\n\tcomments: Comment[] | undefined;\n\tonDidChangeComments: Event<Comment[] | undefined>;\n\tcollapsibleState?: CommentThreadCollapsibleState;\n\tcanReply: boolean;\n\tinput?: CommentInput;\n\tonDidChangeInput: Event<CommentInput | undefined>;\n\tonDidChangeRange: Event<IRange>;\n\tonDidChangeLabel: Event<string | undefined>;\n\tonDidChangeCollasibleState: Event<CommentThreadCollapsibleState | undefined>;\n\tonDidChangeCanReply: Event<boolean>;\n\tisDisposed: boolean;\n}\n\n/**\n * @internal\n */\n\nexport interface CommentingRanges {\n\treadonly resource: URI;\n\tranges: IRange[];\n}\n\n/**\n * @internal\n */\nexport interface CommentReaction {\n\treadonly label?: string;\n\treadonly iconPath?: UriComponents;\n\treadonly count?: number;\n\treadonly hasReacted?: boolean;\n\treadonly canEdit?: boolean;\n}\n\n/**\n * @internal\n */\nexport interface CommentOptions {\n\t/**\n\t * An optional string to show on the comment input box when it's collapsed.\n\t */\n\tprompt?: string;\n\n\t/**\n\t * An optional string to show as placeholder in the comment input box when it's focused.\n\t */\n\tplaceHolder?: string;\n}\n\n/**\n * @internal\n */\nexport enum CommentMode {\n\tEditing = 0,\n\tPreview = 1\n}\n\n/**\n * @internal\n */\nexport interface Comment {\n\treadonly uniqueIdInThread: number;\n\treadonly body: IMarkdownString;\n\treadonly userName: string;\n\treadonly userIconPath?: string;\n\treadonly contextValue?: string;\n\treadonly commentReactions?: CommentReaction[];\n\treadonly label?: string;\n\treadonly mode?: CommentMode;\n}\n\n/**\n * @internal\n */\nexport interface CommentThreadChangedEvent {\n\t/**\n\t * Added comment threads.\n\t */\n\treadonly added: CommentThread[];\n\n\t/**\n\t * Removed comment threads.\n\t */\n\treadonly removed: CommentThread[];\n\n\t/**\n\t * Changed comment threads.\n\t */\n\treadonly changed: CommentThread[];\n}\n\nexport interface CodeLens {\n\trange: IRange;\n\tid?: string;\n\tcommand?: Command;\n}\n\nexport interface CodeLensList {\n\tlenses: CodeLens[];\n\tdispose(): void;\n}\n\nexport interface CodeLensProvider {\n\tonDidChange?: Event<this>;\n\tprovideCodeLenses(model: model.ITextModel, token: CancellationToken): ProviderResult<CodeLensList>;\n\tresolveCodeLens?(model: model.ITextModel, codeLens: CodeLens, token: CancellationToken): ProviderResult<CodeLens>;\n}\n\n\nexport enum InlayHintKind {\n\tOther = 0,\n\tType = 1,\n\tParameter = 2,\n}\n\nexport interface InlayHint {\n\ttext: string;\n\tposition: IPosition;\n\tkind: InlayHintKind;\n\twhitespaceBefore?: boolean;\n\twhitespaceAfter?: boolean;\n}\n\nexport interface InlayHintsProvider {\n\tonDidChangeInlayHints?: Event<void> | undefined;\n\tprovideInlayHints(model: model.ITextModel, range: Range, token: CancellationToken): ProviderResult<InlayHint[]>;\n}\n\nexport interface SemanticTokensLegend {\n\treadonly tokenTypes: string[];\n\treadonly tokenModifiers: string[];\n}\n\nexport interface SemanticTokens {\n\treadonly resultId?: string;\n\treadonly data: Uint32Array;\n}\n\nexport interface SemanticTokensEdit {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly data?: Uint32Array;\n}\n\nexport interface SemanticTokensEdits {\n\treadonly resultId?: string;\n\treadonly edits: SemanticTokensEdit[];\n}\n\nexport interface DocumentSemanticTokensProvider {\n\tonDidChange?: Event<void>;\n\tgetLegend(): SemanticTokensLegend;\n\tprovideDocumentSemanticTokens(model: model.ITextModel, lastResultId: string | null, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits>;\n\treleaseDocumentSemanticTokens(resultId: string | undefined): void;\n}\n\nexport interface DocumentRangeSemanticTokensProvider {\n\tgetLegend(): SemanticTokensLegend;\n\tprovideDocumentRangeSemanticTokens(model: model.ITextModel, range: Range, token: CancellationToken): ProviderResult<SemanticTokens>;\n}\n\n// --- feature registries ------\n\n/**\n * @internal\n */\nexport const ReferenceProviderRegistry = new LanguageFeatureRegistry<ReferenceProvider>();\n\n/**\n * @internal\n */\nexport const RenameProviderRegistry = new LanguageFeatureRegistry<RenameProvider>();\n\n/**\n * @internal\n */\nexport const CompletionProviderRegistry = new LanguageFeatureRegistry<CompletionItemProvider>();\n\n/**\n * @internal\n */\nexport const InlineCompletionsProviderRegistry = new LanguageFeatureRegistry<InlineCompletionsProvider>();\n\n/**\n * @internal\n */\nexport const SignatureHelpProviderRegistry = new LanguageFeatureRegistry<SignatureHelpProvider>();\n\n/**\n * @internal\n */\nexport const HoverProviderRegistry = new LanguageFeatureRegistry<HoverProvider>();\n\n/**\n * @internal\n */\nexport const EvaluatableExpressionProviderRegistry = new LanguageFeatureRegistry<EvaluatableExpressionProvider>();\n\n/**\n * @internal\n */\nexport const InlineValuesProviderRegistry = new LanguageFeatureRegistry<InlineValuesProvider>();\n\n/**\n * @internal\n */\nexport const DocumentSymbolProviderRegistry = new LanguageFeatureRegistry<DocumentSymbolProvider>();\n\n/**\n * @internal\n */\nexport const DocumentHighlightProviderRegistry = new LanguageFeatureRegistry<DocumentHighlightProvider>();\n\n/**\n * @internal\n */\nexport const LinkedEditingRangeProviderRegistry = new LanguageFeatureRegistry<LinkedEditingRangeProvider>();\n\n/**\n * @internal\n */\nexport const DefinitionProviderRegistry = new LanguageFeatureRegistry<DefinitionProvider>();\n\n/**\n * @internal\n */\nexport const DeclarationProviderRegistry = new LanguageFeatureRegistry<DeclarationProvider>();\n\n/**\n * @internal\n */\nexport const ImplementationProviderRegistry = new LanguageFeatureRegistry<ImplementationProvider>();\n\n/**\n * @internal\n */\nexport const TypeDefinitionProviderRegistry = new LanguageFeatureRegistry<TypeDefinitionProvider>();\n\n/**\n * @internal\n */\nexport const CodeLensProviderRegistry = new LanguageFeatureRegistry<CodeLensProvider>();\n\n/**\n * @internal\n */\nexport const InlayHintsProviderRegistry = new LanguageFeatureRegistry<InlayHintsProvider>();\n\n/**\n * @internal\n */\nexport const CodeActionProviderRegistry = new LanguageFeatureRegistry<CodeActionProvider>();\n\n/**\n * @internal\n */\nexport const DocumentFormattingEditProviderRegistry = new LanguageFeatureRegistry<DocumentFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const DocumentRangeFormattingEditProviderRegistry = new LanguageFeatureRegistry<DocumentRangeFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const OnTypeFormattingEditProviderRegistry = new LanguageFeatureRegistry<OnTypeFormattingEditProvider>();\n\n/**\n * @internal\n */\nexport const LinkProviderRegistry = new LanguageFeatureRegistry<LinkProvider>();\n\n/**\n * @internal\n */\nexport const ColorProviderRegistry = new LanguageFeatureRegistry<DocumentColorProvider>();\n\n/**\n * @internal\n */\nexport const SelectionRangeRegistry = new LanguageFeatureRegistry<SelectionRangeProvider>();\n\n/**\n * @internal\n */\nexport const FoldingRangeProviderRegistry = new LanguageFeatureRegistry<FoldingRangeProvider>();\n\n/**\n * @internal\n */\nexport const DocumentSemanticTokensProviderRegistry = new LanguageFeatureRegistry<DocumentSemanticTokensProvider>();\n\n/**\n * @internal\n */\nexport const DocumentRangeSemanticTokensProviderRegistry = new LanguageFeatureRegistry<DocumentRangeSemanticTokensProvider>();\n\n/**\n * @internal\n */\nexport interface ITokenizationSupportChangedEvent {\n\tchangedLanguages: string[];\n\tchangedColorMap: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationRegistry {\n\n\t/**\n\t * An event triggered when:\n\t *  - a tokenization support is registered, unregistered or changed.\n\t *  - the color map is changed.\n\t */\n\tonDidChange: Event<ITokenizationSupportChangedEvent>;\n\n\t/**\n\t * Fire a change event for a language.\n\t * This is useful for languages that embed other languages.\n\t */\n\tfire(languages: string[]): void;\n\n\t/**\n\t * Register a tokenization support.\n\t */\n\tregister(language: string, support: ITokenizationSupport): IDisposable;\n\n\t/**\n\t * Register a promise for a tokenization support.\n\t */\n\tregisterPromise(language: string, promise: Thenable<ITokenizationSupport>): IDisposable;\n\n\t/**\n\t * Get the tokenization support for a language.\n\t * Returns `null` if not found.\n\t */\n\tget(language: string): ITokenizationSupport | null;\n\n\t/**\n\t * Get the promise of a tokenization support for a language.\n\t * `null` is returned if no support is available and no promise for the support has been registered yet.\n\t */\n\tgetPromise(language: string): Thenable<ITokenizationSupport> | null;\n\n\t/**\n\t * Set the new color map that all tokens will use in their ColorId binary encoded bits for foreground and background.\n\t */\n\tsetColorMap(colorMap: Color[]): void;\n\n\tgetColorMap(): Color[] | null;\n\n\tgetDefaultBackground(): Color | null;\n}\n\n/**\n * @internal\n */\nexport const TokenizationRegistry = new TokenizationRegistryImpl();\n\n\n/**\n * @internal\n */\nexport enum ExternalUriOpenerPriority {\n\tNone = 0,\n\tOption = 1,\n\tDefault = 2,\n\tPreferred = 3,\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorId, FontStyle, LanguageId, MetadataConsts, StandardTokenType, TokenMetadata } from 'vs/editor/common/modes';\n\nexport interface IViewLineTokens {\n\tequals(other: IViewLineTokens): boolean;\n\tgetCount(): number;\n\tgetForeground(tokenIndex: number): ColorId;\n\tgetEndOffset(tokenIndex: number): number;\n\tgetClassName(tokenIndex: number): string;\n\tgetInlineStyle(tokenIndex: number, colorMap: string[]): string;\n\tfindTokenIndexAtOffset(offset: number): number;\n}\n\nexport class LineTokens implements IViewLineTokens {\n\t_lineTokensBrand: void = undefined;\n\n\tprivate readonly _tokens: Uint32Array;\n\tprivate readonly _tokensCount: number;\n\tprivate readonly _text: string;\n\n\tpublic static defaultTokenMetadata = (\n\t\t(FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n\n\tpublic static createEmpty(lineContent: string): LineTokens {\n\t\tconst defaultMetadata = LineTokens.defaultTokenMetadata;\n\n\t\tconst tokens = new Uint32Array(2);\n\t\ttokens[0] = lineContent.length;\n\t\ttokens[1] = defaultMetadata;\n\n\t\treturn new LineTokens(tokens, lineContent);\n\t}\n\n\tconstructor(tokens: Uint32Array, text: string) {\n\t\tthis._tokens = tokens;\n\t\tthis._tokensCount = (this._tokens.length >>> 1);\n\t\tthis._text = text;\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof LineTokens) {\n\t\t\treturn this.slicedEquals(other, 0, this._tokensCount);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic slicedEquals(other: LineTokens, sliceFromTokenIndex: number, sliceTokenCount: number): boolean {\n\t\tif (this._text !== other._text) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._tokensCount !== other._tokensCount) {\n\t\t\treturn false;\n\t\t}\n\t\tconst from = (sliceFromTokenIndex << 1);\n\t\tconst to = from + (sliceTokenCount << 1);\n\t\tfor (let i = from; i < to; i++) {\n\t\t\tif (this._tokens[i] !== other._tokens[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getStartOffset(tokenIndex: number): number {\n\t\tif (tokenIndex > 0) {\n\t\t\treturn this._tokens[(tokenIndex - 1) << 1];\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn metadata;\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): LanguageId {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getLanguageId(metadata);\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getTokenType(metadata);\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getForeground(metadata);\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getClassNameFromMetadata(metadata);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\treturn this._tokens[tokenIndex << 1];\n\t}\n\n\t/**\n\t * Find the token containing offset `offset`.\n\t * @param offset The search offset\n\t * @return The index of the token containing the offset.\n\t */\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn LineTokens.findIndexInTokensArray(this._tokens, offset);\n\t}\n\n\tpublic inflate(): IViewLineTokens {\n\t\treturn this;\n\t}\n\n\tpublic sliceAndInflate(startOffset: number, endOffset: number, deltaOffset: number): IViewLineTokens {\n\t\treturn new SlicedLineTokens(this, startOffset, endOffset, deltaOffset);\n\t}\n\n\tpublic static convertToEndOffset(tokens: Uint32Array, lineTextLength: number): void {\n\t\tconst tokenCount = (tokens.length >>> 1);\n\t\tconst lastTokenIndex = tokenCount - 1;\n\t\tfor (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n\t\t\ttokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n\t\t}\n\t\ttokens[lastTokenIndex << 1] = lineTextLength;\n\t}\n\n\tpublic static findIndexInTokensArray(tokens: Uint32Array, desiredIndex: number): number {\n\t\tif (tokens.length <= 2) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet low = 0;\n\t\tlet high = (tokens.length >>> 1) - 1;\n\n\t\twhile (low < high) {\n\n\t\t\tconst mid = low + Math.floor((high - low) / 2);\n\t\t\tconst endOffset = tokens[(mid << 1)];\n\n\t\t\tif (endOffset === desiredIndex) {\n\t\t\t\treturn mid + 1;\n\t\t\t} else if (endOffset < desiredIndex) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (endOffset > desiredIndex) {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\t/**\n\t * @pure\n\t * @param insertTokens Must be sorted by offset.\n\t*/\n\tpublic withInserted(insertTokens: { offset: number, text: string, tokenMetadata: number }[]): LineTokens {\n\t\tif (insertTokens.length === 0) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet nextOriginalTokenIdx = 0;\n\t\tlet nextInsertTokenIdx = 0;\n\t\tlet text = '';\n\t\tconst newTokens = new Array<number>();\n\n\t\tlet originalEndOffset = 0;\n\t\twhile (true) {\n\t\t\tlet nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n\t\t\tlet nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n\n\t\t\tif (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n\t\t\t\t// original token ends before next insert token\n\t\t\t\ttext += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n\t\t\t\tconst metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n\t\t\t\tnewTokens.push(text.length, metadata);\n\t\t\t\tnextOriginalTokenIdx++;\n\t\t\t\toriginalEndOffset = nextOriginalTokenEndOffset;\n\n\t\t\t} else if (nextInsertToken) {\n\t\t\t\tif (nextInsertToken.offset > originalEndOffset) {\n\t\t\t\t\t// insert token is in the middle of the next token.\n\t\t\t\t\ttext += this._text.substring(originalEndOffset, nextInsertToken.offset);\n\t\t\t\t\tconst metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n\t\t\t\t\tnewTokens.push(text.length, metadata);\n\t\t\t\t\toriginalEndOffset = nextInsertToken.offset;\n\t\t\t\t}\n\n\t\t\t\ttext += nextInsertToken.text;\n\t\t\t\tnewTokens.push(text.length, nextInsertToken.tokenMetadata);\n\t\t\t\tnextInsertTokenIdx++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn new LineTokens(new Uint32Array(newTokens), text);\n\t}\n}\n\nexport class SlicedLineTokens implements IViewLineTokens {\n\n\tprivate readonly _source: LineTokens;\n\tprivate readonly _startOffset: number;\n\tprivate readonly _endOffset: number;\n\tprivate readonly _deltaOffset: number;\n\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _tokensCount: number;\n\n\tconstructor(source: LineTokens, startOffset: number, endOffset: number, deltaOffset: number) {\n\t\tthis._source = source;\n\t\tthis._startOffset = startOffset;\n\t\tthis._endOffset = endOffset;\n\t\tthis._deltaOffset = deltaOffset;\n\t\tthis._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n\n\t\tthis._tokensCount = 0;\n\t\tfor (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n\t\t\tconst tokenStartOffset = source.getStartOffset(i);\n\t\t\tif (tokenStartOffset >= endOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._tokensCount++;\n\t\t}\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof SlicedLineTokens) {\n\t\t\treturn (\n\t\t\t\tthis._startOffset === other._startOffset\n\t\t\t\t&& this._endOffset === other._endOffset\n\t\t\t\t&& this._deltaOffset === other._deltaOffset\n\t\t\t\t&& this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\treturn this._source.getForeground(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\tconst tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n\t\treturn Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\treturn this._source.getClassName(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\treturn this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport { LineTokens } from 'vs/editor/common/core/lineTokens';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ColorId, FontStyle, LanguageId, MetadataConsts, StandardTokenType, TokenMetadata } from 'vs/editor/common/modes';\nimport { writeUInt32BE, readUInt32BE } from 'vs/base/common/buffer';\nimport { CharCode } from 'vs/base/common/charCode';\n\nexport const enum StringEOL {\n\tUnknown = 0,\n\tInvalid = 3,\n\tLF = 1,\n\tCRLF = 2\n}\n\nexport function countEOL(text: string): [number, number, number, StringEOL] {\n\tlet eolCount = 0;\n\tlet firstLineLength = 0;\n\tlet lastLineStart = 0;\n\tlet eol: StringEOL = StringEOL.Unknown;\n\tfor (let i = 0, len = text.length; i < len; i++) {\n\t\tconst chr = text.charCodeAt(i);\n\n\t\tif (chr === CharCode.CarriageReturn) {\n\t\t\tif (eolCount === 0) {\n\t\t\t\tfirstLineLength = i;\n\t\t\t}\n\t\t\teolCount++;\n\t\t\tif (i + 1 < len && text.charCodeAt(i + 1) === CharCode.LineFeed) {\n\t\t\t\t// \\r\\n... case\n\t\t\t\teol |= StringEOL.CRLF;\n\t\t\t\ti++; // skip \\n\n\t\t\t} else {\n\t\t\t\t// \\r... case\n\t\t\t\teol |= StringEOL.Invalid;\n\t\t\t}\n\t\t\tlastLineStart = i + 1;\n\t\t} else if (chr === CharCode.LineFeed) {\n\t\t\t// \\n... case\n\t\t\teol |= StringEOL.LF;\n\t\t\tif (eolCount === 0) {\n\t\t\t\tfirstLineLength = i;\n\t\t\t}\n\t\t\teolCount++;\n\t\t\tlastLineStart = i + 1;\n\t\t}\n\t}\n\tif (eolCount === 0) {\n\t\tfirstLineLength = text.length;\n\t}\n\treturn [eolCount, firstLineLength, text.length - lastLineStart, eol];\n}\n\nfunction getDefaultMetadata(topLevelLanguageId: LanguageId): number {\n\treturn (\n\t\t(topLevelLanguageId << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t| (StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t| (FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n}\n\nconst EMPTY_LINE_TOKENS = (new Uint32Array(0)).buffer;\n\nexport class MultilineTokensBuilder {\n\n\tpublic readonly tokens: MultilineTokens[];\n\n\tconstructor() {\n\t\tthis.tokens = [];\n\t}\n\n\tpublic add(lineNumber: number, lineTokens: Uint32Array): void {\n\t\tif (this.tokens.length > 0) {\n\t\t\tconst last = this.tokens[this.tokens.length - 1];\n\t\t\tconst lastLineNumber = last.startLineNumber + last.tokens.length - 1;\n\t\t\tif (lastLineNumber + 1 === lineNumber) {\n\t\t\t\t// append\n\t\t\t\tlast.tokens.push(lineTokens);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.tokens.push(new MultilineTokens(lineNumber, [lineTokens]));\n\t}\n\n\tpublic static deserialize(buff: Uint8Array): MultilineTokens[] {\n\t\tlet offset = 0;\n\t\tconst count = readUInt32BE(buff, offset); offset += 4;\n\t\tlet result: MultilineTokens[] = [];\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\toffset = MultilineTokens.deserialize(buff, offset, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic serialize(): Uint8Array {\n\t\tconst size = this._serializeSize();\n\t\tconst result = new Uint8Array(size);\n\t\tthis._serialize(result);\n\t\treturn result;\n\t}\n\n\tprivate _serializeSize(): number {\n\t\tlet result = 0;\n\t\tresult += 4; // 4 bytes for the count\n\t\tfor (let i = 0; i < this.tokens.length; i++) {\n\t\t\tresult += this.tokens[i].serializeSize();\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _serialize(destination: Uint8Array): void {\n\t\tlet offset = 0;\n\t\twriteUInt32BE(destination, this.tokens.length, offset); offset += 4;\n\t\tfor (let i = 0; i < this.tokens.length; i++) {\n\t\t\toffset = this.tokens[i].serialize(destination, offset);\n\t\t}\n\t}\n}\n\nexport class SparseEncodedTokens {\n\t/**\n\t * The encoding of tokens is:\n\t *  4*i    deltaLine (from `startLineNumber`)\n\t *  4*i+1  startCharacter (from the line start)\n\t *  4*i+2  endCharacter (from the line start)\n\t *  4*i+3  metadata\n\t */\n\tprivate readonly _tokens: Uint32Array;\n\tprivate _tokenCount: number;\n\n\tconstructor(tokens: Uint32Array) {\n\t\tthis._tokens = tokens;\n\t\tthis._tokenCount = tokens.length / 4;\n\t}\n\n\tpublic toString(startLineNumber: number): string {\n\t\tlet pieces: string[] = [];\n\t\tfor (let i = 0; i < this._tokenCount; i++) {\n\t\t\tpieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n\t\t}\n\t\treturn `[${pieces.join(',')}]`;\n\t}\n\n\tpublic getMaxDeltaLine(): number {\n\t\tconst tokenCount = this._getTokenCount();\n\t\tif (tokenCount === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn this._getDeltaLine(tokenCount - 1);\n\t}\n\n\tpublic getRange(): Range | null {\n\t\tconst tokenCount = this._getTokenCount();\n\t\tif (tokenCount === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst startChar = this._getStartCharacter(0);\n\t\tconst maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n\t\tconst endChar = this._getEndCharacter(tokenCount - 1);\n\t\treturn new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n\t}\n\n\tprivate _getTokenCount(): number {\n\t\treturn this._tokenCount;\n\t}\n\n\tprivate _getDeltaLine(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex];\n\t}\n\n\tprivate _getStartCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 1];\n\t}\n\n\tprivate _getEndCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 2];\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn (this._getTokenCount() === 0);\n\t}\n\n\tpublic getLineTokens(deltaLine: number): LineTokens2 | null {\n\t\tlet low = 0;\n\t\tlet high = this._getTokenCount() - 1;\n\n\t\twhile (low < high) {\n\t\t\tconst mid = low + Math.floor((high - low) / 2);\n\t\t\tconst midDeltaLine = this._getDeltaLine(mid);\n\n\t\t\tif (midDeltaLine < deltaLine) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (midDeltaLine > deltaLine) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlet min = mid;\n\t\t\t\twhile (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n\t\t\t\t\tmin--;\n\t\t\t\t}\n\t\t\t\tlet max = mid;\n\t\t\t\twhile (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n\t\t\t\t\tmax++;\n\t\t\t\t}\n\t\t\t\treturn new LineTokens2(this._tokens.subarray(4 * min, 4 * max + 4));\n\t\t\t}\n\t\t}\n\n\t\tif (this._getDeltaLine(low) === deltaLine) {\n\t\t\treturn new LineTokens2(this._tokens.subarray(4 * low, 4 * low + 4));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic clear(): void {\n\t\tthis._tokenCount = 0;\n\t}\n\n\tpublic removeTokens(startDeltaLine: number, startChar: number, endDeltaLine: number, endChar: number): number {\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tlet newTokenCount = 0;\n\t\tlet hasDeletedTokens = false;\n\t\tlet firstDeltaLine = 0;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tconst tokenDeltaLine = tokens[srcOffset];\n\t\t\tconst tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tconst tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif (\n\t\t\t\t(tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n\t\t\t\t&& (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))\n\t\t\t) {\n\t\t\t\thasDeletedTokens = true;\n\t\t\t} else {\n\t\t\t\tif (newTokenCount === 0) {\n\t\t\t\t\tfirstDeltaLine = tokenDeltaLine;\n\t\t\t\t}\n\t\t\t\tif (hasDeletedTokens) {\n\t\t\t\t\t// must move the token to the left\n\t\t\t\t\tconst destOffset = 4 * newTokenCount;\n\t\t\t\t\ttokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n\t\t\t\t\ttokens[destOffset + 1] = tokenStartCharacter;\n\t\t\t\t\ttokens[destOffset + 2] = tokenEndCharacter;\n\t\t\t\t\ttokens[destOffset + 3] = tokenMetadata;\n\t\t\t\t}\n\t\t\t\tnewTokenCount++;\n\t\t\t}\n\t\t}\n\n\t\tthis._tokenCount = newTokenCount;\n\n\t\treturn firstDeltaLine;\n\t}\n\n\tpublic split(startDeltaLine: number, startChar: number, endDeltaLine: number, endChar: number): [SparseEncodedTokens, SparseEncodedTokens, number] {\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tlet aTokens: number[] = [];\n\t\tlet bTokens: number[] = [];\n\t\tlet destTokens: number[] = aTokens;\n\t\tlet destOffset = 0;\n\t\tlet destFirstDeltaLine: number = 0;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tconst tokenDeltaLine = tokens[srcOffset];\n\t\t\tconst tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tconst tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n\t\t\t\tif ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n\t\t\t\t\t// this token is touching the range\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t// this token is after the range\n\t\t\t\t\tif (destTokens !== bTokens) {\n\t\t\t\t\t\t// this token is the first token after the range\n\t\t\t\t\t\tdestTokens = bTokens;\n\t\t\t\t\t\tdestOffset = 0;\n\t\t\t\t\t\tdestFirstDeltaLine = tokenDeltaLine;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdestTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n\t\t\tdestTokens[destOffset++] = tokenStartCharacter;\n\t\t\tdestTokens[destOffset++] = tokenEndCharacter;\n\t\t\tdestTokens[destOffset++] = tokenMetadata;\n\t\t}\n\n\t\treturn [new SparseEncodedTokens(new Uint32Array(aTokens)), new SparseEncodedTokens(new Uint32Array(bTokens)), destFirstDeltaLine];\n\t}\n\n\tpublic acceptDeleteRange(horizontalShiftForFirstLineTokens: number, startDeltaLine: number, startCharacter: number, endDeltaLine: number, endCharacter: number): void {\n\t\t// This is a bit complex, here are the cases I used to think about this:\n\t\t//\n\t\t// 1. The token starts before the deletion range\n\t\t// 1a. The token is completely before the deletion range\n\t\t//               -----------\n\t\t//                          xxxxxxxxxxx\n\t\t// 1b. The token starts before, the deletion range ends after the token\n\t\t//               -----------\n\t\t//                      xxxxxxxxxxx\n\t\t// 1c. The token starts before, the deletion range ends precisely with the token\n\t\t//               ---------------\n\t\t//                      xxxxxxxx\n\t\t// 1d. The token starts before, the deletion range is inside the token\n\t\t//               ---------------\n\t\t//                    xxxxx\n\t\t//\n\t\t// 2. The token starts at the same position with the deletion range\n\t\t// 2a. The token starts at the same position, and ends inside the deletion range\n\t\t//               -------\n\t\t//               xxxxxxxxxxx\n\t\t// 2b. The token starts at the same position, and ends at the same position as the deletion range\n\t\t//               ----------\n\t\t//               xxxxxxxxxx\n\t\t// 2c. The token starts at the same position, and ends after the deletion range\n\t\t//               -------------\n\t\t//               xxxxxxx\n\t\t//\n\t\t// 3. The token starts inside the deletion range\n\t\t// 3a. The token is inside the deletion range\n\t\t//                -------\n\t\t//             xxxxxxxxxxxxx\n\t\t// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n\t\t//                ----------\n\t\t//             xxxxxxxxxxxxx\n\t\t// 3c. The token starts inside the deletion range, and ends after the deletion range\n\t\t//                ------------\n\t\t//             xxxxxxxxxxx\n\t\t//\n\t\t// 4. The token starts after the deletion range\n\t\t//                  -----------\n\t\t//          xxxxxxxx\n\t\t//\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tconst deletedLineCount = (endDeltaLine - startDeltaLine);\n\t\tlet newTokenCount = 0;\n\t\tlet hasDeletedTokens = false;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tlet tokenDeltaLine = tokens[srcOffset];\n\t\t\tlet tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tlet tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n\t\t\t\t// 1a. The token is completely before the deletion range\n\t\t\t\t// => nothing to do\n\t\t\t\tnewTokenCount++;\n\t\t\t\tcontinue;\n\t\t\t} else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n\t\t\t\t// 1b, 1c, 1d\n\t\t\t\t// => the token survives, but it needs to shrink\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 1d. The token starts before, the deletion range is inside the token\n\t\t\t\t\t// => the token shrinks by the deletion character count\n\t\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 1b. The token starts before, the deletion range ends after the token\n\t\t\t\t\t// 1c. The token starts before, the deletion range ends precisely with the token\n\t\t\t\t\t// => the token shrinks its ending to the deletion start\n\t\t\t\t\ttokenEndCharacter = startCharacter;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n\t\t\t\t// 2a, 2b, 2c\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 2c. The token starts at the same position, and ends after the deletion range\n\t\t\t\t\t// => the token shrinks by the deletion character count\n\t\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 2a. The token starts at the same position, and ends inside the deletion range\n\t\t\t\t\t// 2b. The token starts at the same position, and ends at the same position as the deletion range\n\t\t\t\t\t// => the token is deleted\n\t\t\t\t\thasDeletedTokens = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n\t\t\t\t// 3a, 3b, 3c\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 3c. The token starts inside the deletion range, and ends after the deletion range\n\t\t\t\t\t// => the token moves left and shrinks\n\t\t\t\t\tif (tokenDeltaLine === startDeltaLine) {\n\t\t\t\t\t\t// the deletion started on the same line as the token\n\t\t\t\t\t\t// => the token moves left and shrinks\n\t\t\t\t\t\ttokenStartCharacter = startCharacter;\n\t\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// the deletion started on a line above the token\n\t\t\t\t\t\t// => the token moves to the beginning of the line\n\t\t\t\t\t\ttokenStartCharacter = 0;\n\t\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// 3a. The token is inside the deletion range\n\t\t\t\t\t// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n\t\t\t\t\t// => the token is deleted\n\t\t\t\t\thasDeletedTokens = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine > endDeltaLine) {\n\t\t\t\t// 4. (partial) The token starts after the deletion range, on a line below...\n\t\t\t\tif (deletedLineCount === 0 && !hasDeletedTokens) {\n\t\t\t\t\t// early stop, there is no need to walk all the tokens and do nothing...\n\t\t\t\t\tnewTokenCount = tokenCount;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttokenDeltaLine -= deletedLineCount;\n\t\t\t} else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n\t\t\t\t// 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n\t\t\t\tif (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n\t\t\t\t\ttokenStartCharacter += horizontalShiftForFirstLineTokens;\n\t\t\t\t\ttokenEndCharacter += horizontalShiftForFirstLineTokens;\n\t\t\t\t}\n\t\t\t\ttokenDeltaLine -= deletedLineCount;\n\t\t\t\ttokenStartCharacter -= (endCharacter - startCharacter);\n\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Not possible!`);\n\t\t\t}\n\n\t\t\tconst destOffset = 4 * newTokenCount;\n\t\t\ttokens[destOffset] = tokenDeltaLine;\n\t\t\ttokens[destOffset + 1] = tokenStartCharacter;\n\t\t\ttokens[destOffset + 2] = tokenEndCharacter;\n\t\t\ttokens[destOffset + 3] = tokenMetadata;\n\t\t\tnewTokenCount++;\n\t\t}\n\n\t\tthis._tokenCount = newTokenCount;\n\t}\n\n\tpublic acceptInsertText(deltaLine: number, character: number, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\t// Here are the cases I used to think about this:\n\t\t//\n\t\t// 1. The token is completely before the insertion point\n\t\t//            -----------   |\n\t\t// 2. The token ends precisely at the insertion point\n\t\t//            -----------|\n\t\t// 3. The token contains the insertion point\n\t\t//            -----|------\n\t\t// 4. The token starts precisely at the insertion point\n\t\t//            |-----------\n\t\t// 5. The token is completely after the insertion point\n\t\t//            |   -----------\n\t\t//\n\t\tconst isInsertingPreciselyOneWordCharacter = (\n\t\t\teolCount === 0\n\t\t\t&& firstLineLength === 1\n\t\t\t&& (\n\t\t\t\t(firstCharCode >= CharCode.Digit0 && firstCharCode <= CharCode.Digit9)\n\t\t\t\t|| (firstCharCode >= CharCode.A && firstCharCode <= CharCode.Z)\n\t\t\t\t|| (firstCharCode >= CharCode.a && firstCharCode <= CharCode.z)\n\t\t\t)\n\t\t);\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst offset = 4 * i;\n\t\t\tlet tokenDeltaLine = tokens[offset];\n\t\t\tlet tokenStartCharacter = tokens[offset + 1];\n\t\t\tlet tokenEndCharacter = tokens[offset + 2];\n\n\t\t\tif (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n\t\t\t\t// 1. The token is completely before the insertion point\n\t\t\t\t// => nothing to do\n\t\t\t\tcontinue;\n\t\t\t} else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n\t\t\t\t// 2. The token ends precisely at the insertion point\n\t\t\t\t// => expand the end character only if inserting precisely one character that is a word character\n\t\t\t\tif (isInsertingPreciselyOneWordCharacter) {\n\t\t\t\t\ttokenEndCharacter += 1;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n\t\t\t\t// 3. The token contains the insertion point\n\t\t\t\tif (eolCount === 0) {\n\t\t\t\t\t// => just expand the end character\n\t\t\t\t\ttokenEndCharacter += firstLineLength;\n\t\t\t\t} else {\n\t\t\t\t\t// => cut off the token\n\t\t\t\t\ttokenEndCharacter = character;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// 4. or 5.\n\t\t\t\tif (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n\t\t\t\t\t// 4. The token starts precisely at the insertion point\n\t\t\t\t\t// => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n\t\t\t\t\t// => otherwise behave as in case 5.\n\t\t\t\t\tif (isInsertingPreciselyOneWordCharacter) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// => the token must move and keep its size constant\n\t\t\t\tif (tokenDeltaLine === deltaLine) {\n\t\t\t\t\ttokenDeltaLine += eolCount;\n\t\t\t\t\t// this token is on the line where the insertion is taking place\n\t\t\t\t\tif (eolCount === 0) {\n\t\t\t\t\t\ttokenStartCharacter += firstLineLength;\n\t\t\t\t\t\ttokenEndCharacter += firstLineLength;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst tokenLength = tokenEndCharacter - tokenStartCharacter;\n\t\t\t\t\t\ttokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n\t\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + tokenLength;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttokenDeltaLine += eolCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttokens[offset] = tokenDeltaLine;\n\t\t\ttokens[offset + 1] = tokenStartCharacter;\n\t\t\ttokens[offset + 2] = tokenEndCharacter;\n\t\t}\n\t}\n}\n\nexport class LineTokens2 {\n\n\tprivate readonly _tokens: Uint32Array;\n\n\tconstructor(tokens: Uint32Array) {\n\t\tthis._tokens = tokens;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokens.length / 4;\n\t}\n\n\tpublic getStartCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 1];\n\t}\n\n\tpublic getEndCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 2];\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 3];\n\t}\n}\n\nexport class MultilineTokens2 {\n\n\tpublic startLineNumber: number;\n\tpublic endLineNumber: number;\n\tpublic tokens: SparseEncodedTokens;\n\n\tconstructor(startLineNumber: number, tokens: SparseEncodedTokens) {\n\t\tthis.startLineNumber = startLineNumber;\n\t\tthis.tokens = tokens;\n\t\tthis.endLineNumber = this.startLineNumber + this.tokens.getMaxDeltaLine();\n\t}\n\n\tpublic toString(): string {\n\t\treturn this.tokens.toString(this.startLineNumber);\n\t}\n\n\tprivate _updateEndLineNumber(): void {\n\t\tthis.endLineNumber = this.startLineNumber + this.tokens.getMaxDeltaLine();\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn this.tokens.isEmpty();\n\t}\n\n\tpublic getLineTokens(lineNumber: number): LineTokens2 | null {\n\t\tif (this.startLineNumber <= lineNumber && lineNumber <= this.endLineNumber) {\n\t\t\treturn this.tokens.getLineTokens(lineNumber - this.startLineNumber);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getRange(): Range | null {\n\t\tconst deltaRange = this.tokens.getRange();\n\t\tif (!deltaRange) {\n\t\t\treturn deltaRange;\n\t\t}\n\t\treturn new Range(this.startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this.startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n\t}\n\n\tpublic removeTokens(range: Range): void {\n\t\tconst startLineIndex = range.startLineNumber - this.startLineNumber;\n\t\tconst endLineIndex = range.endLineNumber - this.startLineNumber;\n\n\t\tthis.startLineNumber += this.tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n\t\tthis._updateEndLineNumber();\n\t}\n\n\tpublic split(range: Range): [MultilineTokens2, MultilineTokens2] {\n\t\t// split tokens to two:\n\t\t// a) all the tokens before `range`\n\t\t// b) all the tokens after `range`\n\t\tconst startLineIndex = range.startLineNumber - this.startLineNumber;\n\t\tconst endLineIndex = range.endLineNumber - this.startLineNumber;\n\n\t\tconst [a, b, bDeltaLine] = this.tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n\t\treturn [new MultilineTokens2(this.startLineNumber, a), new MultilineTokens2(this.startLineNumber + bDeltaLine, b)];\n\t}\n\n\tpublic applyEdit(range: IRange, text: string): void {\n\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n\t\tthis.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : CharCode.Null);\n\t}\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\tthis._acceptDeleteRange(range);\n\t\tthis._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t\tthis._updateEndLineNumber();\n\t}\n\n\tprivate _acceptDeleteRange(range: IRange): void {\n\t\tif (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\t// Nothing to delete\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstLineIndex = range.startLineNumber - this.startLineNumber;\n\t\tconst lastLineIndex = range.endLineNumber - this.startLineNumber;\n\n\t\tif (lastLineIndex < 0) {\n\t\t\t// this deletion occurs entirely before this block, so we only need to adjust line numbers\n\t\t\tconst deletedLinesCount = lastLineIndex - firstLineIndex;\n\t\t\tthis.startLineNumber -= deletedLinesCount;\n\t\t\treturn;\n\t\t}\n\n\t\tconst tokenMaxDeltaLine = this.tokens.getMaxDeltaLine();\n\n\t\tif (firstLineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this deletion occurs entirely after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this deletion completely encompasses this block\n\t\t\tthis.startLineNumber = 0;\n\t\t\tthis.tokens.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0) {\n\t\t\tconst deletedBefore = -firstLineIndex;\n\t\t\tthis.startLineNumber -= deletedBefore;\n\n\t\t\tthis.tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n\t\t} else {\n\t\t\tthis.tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n\t\t}\n\t}\n\n\tprivate _acceptInsertText(position: Position, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\n\t\tif (eolCount === 0 && firstLineLength === 0) {\n\t\t\t// Nothing to insert\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineIndex = position.lineNumber - this.startLineNumber;\n\n\t\tif (lineIndex < 0) {\n\t\t\t// this insertion occurs before this block, so we only need to adjust line numbers\n\t\t\tthis.startLineNumber += eolCount;\n\t\t\treturn;\n\t\t}\n\n\t\tconst tokenMaxDeltaLine = this.tokens.getMaxDeltaLine();\n\n\t\tif (lineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this insertion occurs after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t}\n}\n\nexport class MultilineTokens {\n\n\tpublic startLineNumber: number;\n\tpublic tokens: (Uint32Array | ArrayBuffer | null)[];\n\n\tconstructor(startLineNumber: number, tokens: Uint32Array[]) {\n\t\tthis.startLineNumber = startLineNumber;\n\t\tthis.tokens = tokens;\n\t}\n\n\tpublic static deserialize(buff: Uint8Array, offset: number, result: MultilineTokens[]): number {\n\t\tconst view32 = new Uint32Array(buff.buffer);\n\t\tconst startLineNumber = readUInt32BE(buff, offset); offset += 4;\n\t\tconst count = readUInt32BE(buff, offset); offset += 4;\n\t\tlet tokens: Uint32Array[] = [];\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tconst byteCount = readUInt32BE(buff, offset); offset += 4;\n\t\t\ttokens.push(view32.subarray(offset / 4, offset / 4 + byteCount / 4));\n\t\t\toffset += byteCount;\n\t\t}\n\t\tresult.push(new MultilineTokens(startLineNumber, tokens));\n\t\treturn offset;\n\t}\n\n\tpublic serializeSize(): number {\n\t\tlet result = 0;\n\t\tresult += 4; // 4 bytes for the start line number\n\t\tresult += 4; // 4 bytes for the line count\n\t\tfor (let i = 0; i < this.tokens.length; i++) {\n\t\t\tconst lineTokens = this.tokens[i];\n\t\t\tif (!(lineTokens instanceof Uint32Array)) {\n\t\t\t\tthrow new Error(`Not supported!`);\n\t\t\t}\n\t\t\tresult += 4; // 4 bytes for the byte count\n\t\t\tresult += lineTokens.byteLength;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic serialize(destination: Uint8Array, offset: number): number {\n\t\twriteUInt32BE(destination, this.startLineNumber, offset); offset += 4;\n\t\twriteUInt32BE(destination, this.tokens.length, offset); offset += 4;\n\t\tfor (let i = 0; i < this.tokens.length; i++) {\n\t\t\tconst lineTokens = this.tokens[i];\n\t\t\tif (!(lineTokens instanceof Uint32Array)) {\n\t\t\t\tthrow new Error(`Not supported!`);\n\t\t\t}\n\t\t\twriteUInt32BE(destination, lineTokens.byteLength, offset); offset += 4;\n\t\t\tdestination.set(new Uint8Array(lineTokens.buffer), offset); offset += lineTokens.byteLength;\n\t\t}\n\t\treturn offset;\n\t}\n\n\tpublic applyEdit(range: IRange, text: string): void {\n\t\tconst [eolCount, firstLineLength] = countEOL(text);\n\t\tthis._acceptDeleteRange(range);\n\t\tthis._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n\t}\n\n\tprivate _acceptDeleteRange(range: IRange): void {\n\t\tif (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\t// Nothing to delete\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstLineIndex = range.startLineNumber - this.startLineNumber;\n\t\tconst lastLineIndex = range.endLineNumber - this.startLineNumber;\n\n\t\tif (lastLineIndex < 0) {\n\t\t\t// this deletion occurs entirely before this block, so we only need to adjust line numbers\n\t\t\tconst deletedLinesCount = lastLineIndex - firstLineIndex;\n\t\t\tthis.startLineNumber -= deletedLinesCount;\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex >= this.tokens.length) {\n\t\t\t// this deletion occurs entirely after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0 && lastLineIndex >= this.tokens.length) {\n\t\t\t// this deletion completely encompasses this block\n\t\t\tthis.startLineNumber = 0;\n\t\t\tthis.tokens = [];\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex === lastLineIndex) {\n\t\t\t// a delete on a single line\n\t\t\tthis.tokens[firstLineIndex] = TokensStore._delete(this.tokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex >= 0) {\n\t\t\t// The first line survives\n\t\t\tthis.tokens[firstLineIndex] = TokensStore._deleteEnding(this.tokens[firstLineIndex], range.startColumn - 1);\n\n\t\t\tif (lastLineIndex < this.tokens.length) {\n\t\t\t\t// The last line survives\n\t\t\t\tconst lastLineTokens = TokensStore._deleteBeginning(this.tokens[lastLineIndex], range.endColumn - 1);\n\n\t\t\t\t// Take remaining text on last line and append it to remaining text on first line\n\t\t\t\tthis.tokens[firstLineIndex] = TokensStore._append(this.tokens[firstLineIndex], lastLineTokens);\n\n\t\t\t\t// Delete middle lines\n\t\t\t\tthis.tokens.splice(firstLineIndex + 1, lastLineIndex - firstLineIndex);\n\t\t\t} else {\n\t\t\t\t// The last line does not survive\n\n\t\t\t\t// Take remaining text on last line and append it to remaining text on first line\n\t\t\t\tthis.tokens[firstLineIndex] = TokensStore._append(this.tokens[firstLineIndex], null);\n\n\t\t\t\t// Delete lines\n\t\t\t\tthis.tokens = this.tokens.slice(0, firstLineIndex + 1);\n\t\t\t}\n\t\t} else {\n\t\t\t// The first line does not survive\n\n\t\t\tconst deletedBefore = -firstLineIndex;\n\t\t\tthis.startLineNumber -= deletedBefore;\n\n\t\t\t// Remove beginning from last line\n\t\t\tthis.tokens[lastLineIndex] = TokensStore._deleteBeginning(this.tokens[lastLineIndex], range.endColumn - 1);\n\n\t\t\t// Delete lines\n\t\t\tthis.tokens = this.tokens.slice(lastLineIndex);\n\t\t}\n\t}\n\n\tprivate _acceptInsertText(position: Position, eolCount: number, firstLineLength: number): void {\n\n\t\tif (eolCount === 0 && firstLineLength === 0) {\n\t\t\t// Nothing to insert\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineIndex = position.lineNumber - this.startLineNumber;\n\n\t\tif (lineIndex < 0) {\n\t\t\t// this insertion occurs before this block, so we only need to adjust line numbers\n\t\t\tthis.startLineNumber += eolCount;\n\t\t\treturn;\n\t\t}\n\n\t\tif (lineIndex >= this.tokens.length) {\n\t\t\t// this insertion occurs after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tif (eolCount === 0) {\n\t\t\t// Inserting text on one line\n\t\t\tthis.tokens[lineIndex] = TokensStore._insert(this.tokens[lineIndex], position.column - 1, firstLineLength);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tokens[lineIndex] = TokensStore._deleteEnding(this.tokens[lineIndex], position.column - 1);\n\t\tthis.tokens[lineIndex] = TokensStore._insert(this.tokens[lineIndex], position.column - 1, firstLineLength);\n\n\t\tthis._insertLines(position.lineNumber, eolCount);\n\t}\n\n\tprivate _insertLines(insertIndex: number, insertCount: number): void {\n\t\tif (insertCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet lineTokens: (Uint32Array | ArrayBuffer | null)[] = [];\n\t\tfor (let i = 0; i < insertCount; i++) {\n\t\t\tlineTokens[i] = null;\n\t\t}\n\t\tthis.tokens = arrays.arrayInsert(this.tokens, insertIndex, lineTokens);\n\t}\n}\n\nfunction toUint32Array(arr: Uint32Array | ArrayBuffer): Uint32Array {\n\tif (arr instanceof Uint32Array) {\n\t\treturn arr;\n\t} else {\n\t\treturn new Uint32Array(arr);\n\t}\n}\n\nexport class TokensStore2 {\n\n\tprivate _pieces: MultilineTokens2[];\n\tprivate _isComplete: boolean;\n\n\tconstructor() {\n\t\tthis._pieces = [];\n\t\tthis._isComplete = false;\n\t}\n\n\tpublic flush(): void {\n\t\tthis._pieces = [];\n\t\tthis._isComplete = false;\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn (this._pieces.length === 0);\n\t}\n\n\tpublic set(pieces: MultilineTokens2[] | null, isComplete: boolean): void {\n\t\tthis._pieces = pieces || [];\n\t\tthis._isComplete = isComplete;\n\t}\n\n\tpublic setPartial(_range: Range, pieces: MultilineTokens2[]): Range {\n\t\t// console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);\n\n\t\tlet range = _range;\n\t\tif (pieces.length > 0) {\n\t\t\tconst _firstRange = pieces[0].getRange();\n\t\t\tconst _lastRange = pieces[pieces.length - 1].getRange();\n\t\t\tif (!_firstRange || !_lastRange) {\n\t\t\t\treturn _range;\n\t\t\t}\n\t\t\trange = _range.plusRange(_firstRange).plusRange(_lastRange);\n\t\t}\n\n\t\tlet insertPosition: { index: number; } | null = null;\n\t\tfor (let i = 0, len = this._pieces.length; i < len; i++) {\n\t\t\tconst piece = this._pieces[i];\n\t\t\tif (piece.endLineNumber < range.startLineNumber) {\n\t\t\t\t// this piece is before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.startLineNumber > range.endLineNumber) {\n\t\t\t\t// this piece is after the range, so mark the spot before this piece\n\t\t\t\t// as a good insertion position and stop looping\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// this piece might intersect with the range\n\t\t\tpiece.removeTokens(range);\n\n\t\t\tif (piece.isEmpty()) {\n\t\t\t\t// remove the piece if it became empty\n\t\t\t\tthis._pieces.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t\tlen--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.endLineNumber < range.startLineNumber) {\n\t\t\t\t// after removal, this piece is before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (piece.startLineNumber > range.endLineNumber) {\n\t\t\t\t// after removal, this piece is after the range\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// after removal, this piece contains the range\n\t\t\tconst [a, b] = piece.split(range);\n\t\t\tif (a.isEmpty()) {\n\t\t\t\t// this piece is actually after the range\n\t\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (b.isEmpty()) {\n\t\t\t\t// this piece is actually before the range\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._pieces.splice(i, 1, a, b);\n\t\t\ti++;\n\t\t\tlen++;\n\n\t\t\tinsertPosition = insertPosition || { index: i };\n\t\t}\n\n\t\tinsertPosition = insertPosition || { index: this._pieces.length };\n\n\t\tif (pieces.length > 0) {\n\t\t\tthis._pieces = arrays.arrayInsert(this._pieces, insertPosition.index, pieces);\n\t\t}\n\n\t\t// console.log(`I HAVE ${this._pieces.length} pieces`);\n\t\t// console.log(`${this._pieces.map(p => p.toString()).join('\\n')}`);\n\n\t\treturn range;\n\t}\n\n\tpublic isComplete(): boolean {\n\t\treturn this._isComplete;\n\t}\n\n\tpublic addSemanticTokens(lineNumber: number, aTokens: LineTokens): LineTokens {\n\t\tconst pieces = this._pieces;\n\n\t\tif (pieces.length === 0) {\n\t\t\treturn aTokens;\n\t\t}\n\n\t\tconst pieceIndex = TokensStore2._findFirstPieceWithLine(pieces, lineNumber);\n\t\tconst bTokens = pieces[pieceIndex].getLineTokens(lineNumber);\n\n\t\tif (!bTokens) {\n\t\t\treturn aTokens;\n\t\t}\n\n\t\tconst aLen = aTokens.getCount();\n\t\tconst bLen = bTokens.getCount();\n\n\t\tlet aIndex = 0;\n\t\tlet result: number[] = [], resultLen = 0;\n\t\tlet lastEndOffset = 0;\n\n\t\tconst emitToken = (endOffset: number, metadata: number) => {\n\t\t\tif (endOffset === lastEndOffset) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlastEndOffset = endOffset;\n\t\t\tresult[resultLen++] = endOffset;\n\t\t\tresult[resultLen++] = metadata;\n\t\t};\n\n\t\tfor (let bIndex = 0; bIndex < bLen; bIndex++) {\n\t\t\tconst bStartCharacter = bTokens.getStartCharacter(bIndex);\n\t\t\tconst bEndCharacter = bTokens.getEndCharacter(bIndex);\n\t\t\tconst bMetadata = bTokens.getMetadata(bIndex);\n\n\t\t\tconst bMask = (\n\t\t\t\t((bMetadata & MetadataConsts.SEMANTIC_USE_ITALIC) ? MetadataConsts.ITALIC_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_BOLD) ? MetadataConsts.BOLD_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_UNDERLINE) ? MetadataConsts.UNDERLINE_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_FOREGROUND) ? MetadataConsts.FOREGROUND_MASK : 0)\n\t\t\t\t| ((bMetadata & MetadataConsts.SEMANTIC_USE_BACKGROUND) ? MetadataConsts.BACKGROUND_MASK : 0)\n\t\t\t) >>> 0;\n\t\t\tconst aMask = (~bMask) >>> 0;\n\n\t\t\t// push any token from `a` that is before `b`\n\t\t\twhile (aIndex < aLen && aTokens.getEndOffset(aIndex) <= bStartCharacter) {\n\t\t\t\temitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n\t\t\t\taIndex++;\n\t\t\t}\n\n\t\t\t// push the token from `a` if it intersects the token from `b`\n\t\t\tif (aIndex < aLen && aTokens.getStartOffset(aIndex) < bStartCharacter) {\n\t\t\t\temitToken(bStartCharacter, aTokens.getMetadata(aIndex));\n\t\t\t}\n\n\t\t\t// skip any tokens from `a` that are contained inside `b`\n\t\t\twhile (aIndex < aLen && aTokens.getEndOffset(aIndex) < bEndCharacter) {\n\t\t\t\temitToken(aTokens.getEndOffset(aIndex), (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n\t\t\t\taIndex++;\n\t\t\t}\n\n\t\t\tif (aIndex < aLen) {\n\t\t\t\temitToken(bEndCharacter, (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n\t\t\t\tif (aTokens.getEndOffset(aIndex) === bEndCharacter) {\n\t\t\t\t\t// `a` ends exactly at the same spot as `b`!\n\t\t\t\t\taIndex++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst aMergeIndex = Math.min(Math.max(0, aIndex - 1), aLen - 1);\n\n\t\t\t\t// push the token from `b`\n\t\t\t\temitToken(bEndCharacter, (aTokens.getMetadata(aMergeIndex) & aMask) | (bMetadata & bMask));\n\t\t\t}\n\t\t}\n\n\t\t// push the remaining tokens from `a`\n\t\twhile (aIndex < aLen) {\n\t\t\temitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n\t\t\taIndex++;\n\t\t}\n\n\t\treturn new LineTokens(new Uint32Array(result), aTokens.getLineContent());\n\t}\n\n\tprivate static _findFirstPieceWithLine(pieces: MultilineTokens2[], lineNumber: number): number {\n\t\tlet low = 0;\n\t\tlet high = pieces.length - 1;\n\n\t\twhile (low < high) {\n\t\t\tlet mid = low + Math.floor((high - low) / 2);\n\n\t\t\tif (pieces[mid].endLineNumber < lineNumber) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (pieces[mid].startLineNumber > lineNumber) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\twhile (mid > low && pieces[mid - 1].startLineNumber <= lineNumber && lineNumber <= pieces[mid - 1].endLineNumber) {\n\t\t\t\t\tmid--;\n\t\t\t\t}\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\t//#region Editing\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\tfor (const piece of this._pieces) {\n\t\t\tpiece.acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t\t}\n\t}\n\n\t//#endregion\n}\n\nexport class TokensStore {\n\tprivate _lineTokens: (Uint32Array | ArrayBuffer | null)[];\n\tprivate _len: number;\n\n\tconstructor() {\n\t\tthis._lineTokens = [];\n\t\tthis._len = 0;\n\t}\n\n\tpublic flush(): void {\n\t\tthis._lineTokens = [];\n\t\tthis._len = 0;\n\t}\n\n\tpublic getTokens(topLevelLanguageId: LanguageId, lineIndex: number, lineText: string): LineTokens {\n\t\tlet rawLineTokens: Uint32Array | ArrayBuffer | null = null;\n\t\tif (lineIndex < this._len) {\n\t\t\trawLineTokens = this._lineTokens[lineIndex];\n\t\t}\n\n\t\tif (rawLineTokens !== null && rawLineTokens !== EMPTY_LINE_TOKENS) {\n\t\t\treturn new LineTokens(toUint32Array(rawLineTokens), lineText);\n\t\t}\n\n\t\tlet lineTokens = new Uint32Array(2);\n\t\tlineTokens[0] = lineText.length;\n\t\tlineTokens[1] = getDefaultMetadata(topLevelLanguageId);\n\t\treturn new LineTokens(lineTokens, lineText);\n\t}\n\n\tprivate static _massageTokens(topLevelLanguageId: LanguageId, lineTextLength: number, _tokens: Uint32Array | ArrayBuffer | null): Uint32Array | ArrayBuffer {\n\n\t\tconst tokens = _tokens ? toUint32Array(_tokens) : null;\n\n\t\tif (lineTextLength === 0) {\n\t\t\tlet hasDifferentLanguageId = false;\n\t\t\tif (tokens && tokens.length > 1) {\n\t\t\t\thasDifferentLanguageId = (TokenMetadata.getLanguageId(tokens[1]) !== topLevelLanguageId);\n\t\t\t}\n\n\t\t\tif (!hasDifferentLanguageId) {\n\t\t\t\treturn EMPTY_LINE_TOKENS;\n\t\t\t}\n\t\t}\n\n\t\tif (!tokens || tokens.length === 0) {\n\t\t\tconst tokens = new Uint32Array(2);\n\t\t\ttokens[0] = lineTextLength;\n\t\t\ttokens[1] = getDefaultMetadata(topLevelLanguageId);\n\t\t\treturn tokens.buffer;\n\t\t}\n\n\t\t// Ensure the last token covers the end of the text\n\t\ttokens[tokens.length - 2] = lineTextLength;\n\n\t\tif (tokens.byteOffset === 0 && tokens.byteLength === tokens.buffer.byteLength) {\n\t\t\t// Store directly the ArrayBuffer pointer to save an object\n\t\t\treturn tokens.buffer;\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tprivate _ensureLine(lineIndex: number): void {\n\t\twhile (lineIndex >= this._len) {\n\t\t\tthis._lineTokens[this._len] = null;\n\t\t\tthis._len++;\n\t\t}\n\t}\n\n\tprivate _deleteLines(start: number, deleteCount: number): void {\n\t\tif (deleteCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (start + deleteCount > this._len) {\n\t\t\tdeleteCount = this._len - start;\n\t\t}\n\t\tthis._lineTokens.splice(start, deleteCount);\n\t\tthis._len -= deleteCount;\n\t}\n\n\tprivate _insertLines(insertIndex: number, insertCount: number): void {\n\t\tif (insertCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet lineTokens: (Uint32Array | ArrayBuffer | null)[] = [];\n\t\tfor (let i = 0; i < insertCount; i++) {\n\t\t\tlineTokens[i] = null;\n\t\t}\n\t\tthis._lineTokens = arrays.arrayInsert(this._lineTokens, insertIndex, lineTokens);\n\t\tthis._len += insertCount;\n\t}\n\n\tpublic setTokens(topLevelLanguageId: LanguageId, lineIndex: number, lineTextLength: number, _tokens: Uint32Array | ArrayBuffer | null, checkEquality: boolean): boolean {\n\t\tconst tokens = TokensStore._massageTokens(topLevelLanguageId, lineTextLength, _tokens);\n\t\tthis._ensureLine(lineIndex);\n\t\tconst oldTokens = this._lineTokens[lineIndex];\n\t\tthis._lineTokens[lineIndex] = tokens;\n\n\t\tif (checkEquality) {\n\t\t\treturn !TokensStore._equals(oldTokens, tokens);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate static _equals(_a: Uint32Array | ArrayBuffer | null, _b: Uint32Array | ArrayBuffer | null) {\n\t\tif (!_a || !_b) {\n\t\t\treturn !_a && !_b;\n\t\t}\n\n\t\tconst a = toUint32Array(_a);\n\t\tconst b = toUint32Array(_b);\n\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0, len = a.length; i < len; i++) {\n\t\t\tif (a[i] !== b[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t//#region Editing\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number): void {\n\t\tthis._acceptDeleteRange(range);\n\t\tthis._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n\t}\n\n\tprivate _acceptDeleteRange(range: IRange): void {\n\n\t\tconst firstLineIndex = range.startLineNumber - 1;\n\t\tif (firstLineIndex >= this._len) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\tif (range.startColumn === range.endColumn) {\n\t\t\t\t// Nothing to delete\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._lineTokens[firstLineIndex] = TokensStore._delete(this._lineTokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lineTokens[firstLineIndex] = TokensStore._deleteEnding(this._lineTokens[firstLineIndex], range.startColumn - 1);\n\n\t\tconst lastLineIndex = range.endLineNumber - 1;\n\t\tlet lastLineTokens: Uint32Array | ArrayBuffer | null = null;\n\t\tif (lastLineIndex < this._len) {\n\t\t\tlastLineTokens = TokensStore._deleteBeginning(this._lineTokens[lastLineIndex], range.endColumn - 1);\n\t\t}\n\n\t\t// Take remaining text on last line and append it to remaining text on first line\n\t\tthis._lineTokens[firstLineIndex] = TokensStore._append(this._lineTokens[firstLineIndex], lastLineTokens);\n\n\t\t// Delete middle lines\n\t\tthis._deleteLines(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n\t}\n\n\tprivate _acceptInsertText(position: Position, eolCount: number, firstLineLength: number): void {\n\n\t\tif (eolCount === 0 && firstLineLength === 0) {\n\t\t\t// Nothing to insert\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineIndex = position.lineNumber - 1;\n\t\tif (lineIndex >= this._len) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (eolCount === 0) {\n\t\t\t// Inserting text on one line\n\t\t\tthis._lineTokens[lineIndex] = TokensStore._insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._lineTokens[lineIndex] = TokensStore._deleteEnding(this._lineTokens[lineIndex], position.column - 1);\n\t\tthis._lineTokens[lineIndex] = TokensStore._insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n\n\t\tthis._insertLines(position.lineNumber, eolCount);\n\t}\n\n\tpublic static _deleteBeginning(lineTokens: Uint32Array | ArrayBuffer | null, toChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\treturn TokensStore._delete(lineTokens, 0, toChIndex);\n\t}\n\n\tpublic static _deleteEnding(lineTokens: Uint32Array | ArrayBuffer | null, fromChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst lineTextLength = tokens[tokens.length - 2];\n\t\treturn TokensStore._delete(lineTokens, fromChIndex, lineTextLength);\n\t}\n\n\tpublic static _delete(lineTokens: Uint32Array | ArrayBuffer | null, fromChIndex: number, toChIndex: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS || fromChIndex === toChIndex) {\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst tokensCount = (tokens.length >>> 1);\n\n\t\t// special case: deleting everything\n\t\tif (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n\t\t\treturn EMPTY_LINE_TOKENS;\n\t\t}\n\n\t\tconst fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, fromChIndex);\n\t\tconst fromTokenStartOffset = (fromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0);\n\t\tconst fromTokenEndOffset = tokens[fromTokenIndex << 1];\n\n\t\tif (toChIndex < fromTokenEndOffset) {\n\t\t\t// the delete range is inside a single token\n\t\t\tconst delta = (toChIndex - fromChIndex);\n\t\t\tfor (let i = fromTokenIndex; i < tokensCount; i++) {\n\t\t\t\ttokens[i << 1] -= delta;\n\t\t\t}\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tlet dest: number;\n\t\tlet lastEnd: number;\n\t\tif (fromTokenStartOffset !== fromChIndex) {\n\t\t\ttokens[fromTokenIndex << 1] = fromChIndex;\n\t\t\tdest = ((fromTokenIndex + 1) << 1);\n\t\t\tlastEnd = fromChIndex;\n\t\t} else {\n\t\t\tdest = (fromTokenIndex << 1);\n\t\t\tlastEnd = fromTokenStartOffset;\n\t\t}\n\n\t\tconst delta = (toChIndex - fromChIndex);\n\t\tfor (let tokenIndex = fromTokenIndex + 1; tokenIndex < tokensCount; tokenIndex++) {\n\t\t\tconst tokenEndOffset = tokens[tokenIndex << 1] - delta;\n\t\t\tif (tokenEndOffset > lastEnd) {\n\t\t\t\ttokens[dest++] = tokenEndOffset;\n\t\t\t\ttokens[dest++] = tokens[(tokenIndex << 1) + 1];\n\t\t\t\tlastEnd = tokenEndOffset;\n\t\t\t}\n\t\t}\n\n\t\tif (dest === tokens.length) {\n\t\t\t// nothing to trim\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tlet tmp = new Uint32Array(dest);\n\t\ttmp.set(tokens.subarray(0, dest), 0);\n\t\treturn tmp.buffer;\n\t}\n\n\tpublic static _append(lineTokens: Uint32Array | ArrayBuffer | null, _otherTokens: Uint32Array | ArrayBuffer | null): Uint32Array | ArrayBuffer | null {\n\t\tif (_otherTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\tif (lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\treturn _otherTokens;\n\t\t}\n\t\tif (lineTokens === null) {\n\t\t\treturn lineTokens;\n\t\t}\n\t\tif (_otherTokens === null) {\n\t\t\t// cannot determine combined line length...\n\t\t\treturn null;\n\t\t}\n\t\tconst myTokens = toUint32Array(lineTokens);\n\t\tconst otherTokens = toUint32Array(_otherTokens);\n\t\tconst otherTokensCount = (otherTokens.length >>> 1);\n\n\t\tlet result = new Uint32Array(myTokens.length + otherTokens.length);\n\t\tresult.set(myTokens, 0);\n\t\tlet dest = myTokens.length;\n\t\tconst delta = myTokens[myTokens.length - 2];\n\t\tfor (let i = 0; i < otherTokensCount; i++) {\n\t\t\tresult[dest++] = otherTokens[(i << 1)] + delta;\n\t\t\tresult[dest++] = otherTokens[(i << 1) + 1];\n\t\t}\n\t\treturn result.buffer;\n\t}\n\n\tpublic static _insert(lineTokens: Uint32Array | ArrayBuffer | null, chIndex: number, textLength: number): Uint32Array | ArrayBuffer | null {\n\t\tif (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n\t\t\t// nothing to do\n\t\t\treturn lineTokens;\n\t\t}\n\n\t\tconst tokens = toUint32Array(lineTokens);\n\t\tconst tokensCount = (tokens.length >>> 1);\n\n\t\tlet fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n\t\tif (fromTokenIndex > 0) {\n\t\t\tconst fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n\t\t\tif (fromTokenStartOffset === chIndex) {\n\t\t\t\tfromTokenIndex--;\n\t\t\t}\n\t\t}\n\t\tfor (let tokenIndex = fromTokenIndex; tokenIndex < tokensCount; tokenIndex++) {\n\t\t\ttokens[tokenIndex << 1] += textLength;\n\t\t}\n\t\treturn lineTokens;\n\t}\n\n\t//#endregion\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport * as strings from 'vs/base/common/strings';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ApplyEditsResult, EndOfLinePreference, FindMatch, IInternalModelContentChange, ISingleEditOperationIdentifier, ITextBuffer, ITextSnapshot, ValidAnnotatedEditOperation, IValidEditOperation } from 'vs/editor/common/model';\nimport { PieceTreeBase, StringBuffer } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase';\nimport { SearchData } from 'vs/editor/common/model/textModelSearch';\nimport { countEOL, StringEOL } from 'vs/editor/common/model/tokensStore';\nimport { TextChange } from 'vs/editor/common/model/textChange';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport interface IValidatedEditOperation {\n\tsortIndex: number;\n\tidentifier: ISingleEditOperationIdentifier | null;\n\trange: Range;\n\trangeOffset: number;\n\trangeLength: number;\n\ttext: string;\n\teolCount: number;\n\tfirstLineLength: number;\n\tlastLineLength: number;\n\tforceMoveMarkers: boolean;\n\tisAutoWhitespaceEdit: boolean;\n}\n\nexport interface IReverseSingleEditOperation extends IValidEditOperation {\n\tsortIndex: number;\n}\n\nexport class PieceTreeTextBuffer extends Disposable implements ITextBuffer {\n\tprivate _pieceTree: PieceTreeBase;\n\tprivate readonly _BOM: string;\n\tprivate _mightContainRTL: boolean;\n\tprivate _mightContainUnusualLineTerminators: boolean;\n\tprivate _mightContainNonBasicASCII: boolean;\n\n\tprivate readonly _onDidChangeContent: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeContent: Event<void> = this._onDidChangeContent.event;\n\n\tconstructor(chunks: StringBuffer[], BOM: string, eol: '\\r\\n' | '\\n', containsRTL: boolean, containsUnusualLineTerminators: boolean, isBasicASCII: boolean, eolNormalized: boolean) {\n\t\tsuper();\n\t\tthis._BOM = BOM;\n\t\tthis._mightContainNonBasicASCII = !isBasicASCII;\n\t\tthis._mightContainRTL = containsRTL;\n\t\tthis._mightContainUnusualLineTerminators = containsUnusualLineTerminators;\n\t\tthis._pieceTree = new PieceTreeBase(chunks, eol, eolNormalized);\n\t}\n\n\t// #region TextBuffer\n\tpublic equals(other: ITextBuffer): boolean {\n\t\tif (!(other instanceof PieceTreeTextBuffer)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._BOM !== other._BOM) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.getEOL() !== other.getEOL()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._pieceTree.equal(other._pieceTree);\n\t}\n\tpublic mightContainRTL(): boolean {\n\t\treturn this._mightContainRTL;\n\t}\n\tpublic mightContainUnusualLineTerminators(): boolean {\n\t\treturn this._mightContainUnusualLineTerminators;\n\t}\n\tpublic resetMightContainUnusualLineTerminators(): void {\n\t\tthis._mightContainUnusualLineTerminators = false;\n\t}\n\tpublic mightContainNonBasicASCII(): boolean {\n\t\treturn this._mightContainNonBasicASCII;\n\t}\n\tpublic getBOM(): string {\n\t\treturn this._BOM;\n\t}\n\tpublic getEOL(): '\\r\\n' | '\\n' {\n\t\treturn this._pieceTree.getEOL();\n\t}\n\n\tpublic createSnapshot(preserveBOM: boolean): ITextSnapshot {\n\t\treturn this._pieceTree.createSnapshot(preserveBOM ? this._BOM : '');\n\t}\n\n\tpublic getOffsetAt(lineNumber: number, column: number): number {\n\t\treturn this._pieceTree.getOffsetAt(lineNumber, column);\n\t}\n\n\tpublic getPositionAt(offset: number): Position {\n\t\treturn this._pieceTree.getPositionAt(offset);\n\t}\n\n\tpublic getRangeAt(start: number, length: number): Range {\n\t\tlet end = start + length;\n\t\tconst startPosition = this.getPositionAt(start);\n\t\tconst endPosition = this.getPositionAt(end);\n\t\treturn new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t}\n\n\tpublic getValueInRange(range: Range, eol: EndOfLinePreference = EndOfLinePreference.TextDefined): string {\n\t\tif (range.isEmpty()) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst lineEnding = this._getEndOfLine(eol);\n\t\treturn this._pieceTree.getValueInRange(range, lineEnding);\n\t}\n\n\tpublic getValueLengthInRange(range: Range, eol: EndOfLinePreference = EndOfLinePreference.TextDefined): number {\n\t\tif (range.isEmpty()) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\treturn (range.endColumn - range.startColumn);\n\t\t}\n\n\t\tlet startOffset = this.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\tlet endOffset = this.getOffsetAt(range.endLineNumber, range.endColumn);\n\t\treturn endOffset - startOffset;\n\t}\n\n\tpublic getCharacterCountInRange(range: Range, eol: EndOfLinePreference = EndOfLinePreference.TextDefined): number {\n\t\tif (this._mightContainNonBasicASCII) {\n\t\t\t// we must count by iterating\n\n\t\t\tlet result = 0;\n\n\t\t\tconst fromLineNumber = range.startLineNumber;\n\t\t\tconst toLineNumber = range.endLineNumber;\n\t\t\tfor (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n\t\t\t\tconst lineContent = this.getLineContent(lineNumber);\n\t\t\t\tconst fromOffset = (lineNumber === fromLineNumber ? range.startColumn - 1 : 0);\n\t\t\t\tconst toOffset = (lineNumber === toLineNumber ? range.endColumn - 1 : lineContent.length);\n\n\t\t\t\tfor (let offset = fromOffset; offset < toOffset; offset++) {\n\t\t\t\t\tif (strings.isHighSurrogate(lineContent.charCodeAt(offset))) {\n\t\t\t\t\t\tresult = result + 1;\n\t\t\t\t\t\toffset = offset + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = result + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult += this._getEndOfLine(eol).length * (toLineNumber - fromLineNumber);\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.getValueLengthInRange(range, eol);\n\t}\n\n\tpublic getLength(): number {\n\t\treturn this._pieceTree.getLength();\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._pieceTree.getLineCount();\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\treturn this._pieceTree.getLinesContent();\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\treturn this._pieceTree.getLineContent(lineNumber);\n\t}\n\n\tpublic getLineCharCode(lineNumber: number, index: number): number {\n\t\treturn this._pieceTree.getLineCharCode(lineNumber, index);\n\t}\n\n\tpublic getCharCode(offset: number): number {\n\t\treturn this._pieceTree.getCharCode(offset);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\treturn this._pieceTree.getLineLength(lineNumber);\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\treturn 1;\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\treturn this.getLineLength(lineNumber) + 1;\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 1;\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 2;\n\t}\n\n\tprivate _getEndOfLine(eol: EndOfLinePreference): string {\n\t\tswitch (eol) {\n\t\t\tcase EndOfLinePreference.LF:\n\t\t\t\treturn '\\n';\n\t\t\tcase EndOfLinePreference.CRLF:\n\t\t\t\treturn '\\r\\n';\n\t\t\tcase EndOfLinePreference.TextDefined:\n\t\t\t\treturn this.getEOL();\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown EOL preference');\n\t\t}\n\t}\n\n\tpublic setEOL(newEOL: '\\r\\n' | '\\n'): void {\n\t\tthis._pieceTree.setEOL(newEOL);\n\t}\n\n\tpublic applyEdits(rawOperations: ValidAnnotatedEditOperation[], recordTrimAutoWhitespace: boolean, computeUndoEdits: boolean): ApplyEditsResult {\n\t\tlet mightContainRTL = this._mightContainRTL;\n\t\tlet mightContainUnusualLineTerminators = this._mightContainUnusualLineTerminators;\n\t\tlet mightContainNonBasicASCII = this._mightContainNonBasicASCII;\n\t\tlet canReduceOperations = true;\n\n\t\tlet operations: IValidatedEditOperation[] = [];\n\t\tfor (let i = 0; i < rawOperations.length; i++) {\n\t\t\tlet op = rawOperations[i];\n\t\t\tif (canReduceOperations && op._isTracked) {\n\t\t\t\tcanReduceOperations = false;\n\t\t\t}\n\t\t\tlet validatedRange = op.range;\n\t\t\tif (op.text) {\n\t\t\t\tlet textMightContainNonBasicASCII = true;\n\t\t\t\tif (!mightContainNonBasicASCII) {\n\t\t\t\t\ttextMightContainNonBasicASCII = !strings.isBasicASCII(op.text);\n\t\t\t\t\tmightContainNonBasicASCII = textMightContainNonBasicASCII;\n\t\t\t\t}\n\t\t\t\tif (!mightContainRTL && textMightContainNonBasicASCII) {\n\t\t\t\t\t// check if the new inserted text contains RTL\n\t\t\t\t\tmightContainRTL = strings.containsRTL(op.text);\n\t\t\t\t}\n\t\t\t\tif (!mightContainUnusualLineTerminators && textMightContainNonBasicASCII) {\n\t\t\t\t\t// check if the new inserted text contains unusual line terminators\n\t\t\t\t\tmightContainUnusualLineTerminators = strings.containsUnusualLineTerminators(op.text);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet validText = '';\n\t\t\tlet eolCount = 0;\n\t\t\tlet firstLineLength = 0;\n\t\t\tlet lastLineLength = 0;\n\t\t\tif (op.text) {\n\t\t\t\tlet strEOL: StringEOL;\n\t\t\t\t[eolCount, firstLineLength, lastLineLength, strEOL] = countEOL(op.text);\n\n\t\t\t\tconst bufferEOL = this.getEOL();\n\t\t\t\tconst expectedStrEOL = (bufferEOL === '\\r\\n' ? StringEOL.CRLF : StringEOL.LF);\n\t\t\t\tif (strEOL === StringEOL.Unknown || strEOL === expectedStrEOL) {\n\t\t\t\t\tvalidText = op.text;\n\t\t\t\t} else {\n\t\t\t\t\tvalidText = op.text.replace(/\\r\\n|\\r|\\n/g, bufferEOL);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toperations[i] = {\n\t\t\t\tsortIndex: i,\n\t\t\t\tidentifier: op.identifier || null,\n\t\t\t\trange: validatedRange,\n\t\t\t\trangeOffset: this.getOffsetAt(validatedRange.startLineNumber, validatedRange.startColumn),\n\t\t\t\trangeLength: this.getValueLengthInRange(validatedRange),\n\t\t\t\ttext: validText,\n\t\t\t\teolCount: eolCount,\n\t\t\t\tfirstLineLength: firstLineLength,\n\t\t\t\tlastLineLength: lastLineLength,\n\t\t\t\tforceMoveMarkers: Boolean(op.forceMoveMarkers),\n\t\t\t\tisAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\n\t\t\t};\n\t\t}\n\n\t\t// Sort operations ascending\n\t\toperations.sort(PieceTreeTextBuffer._sortOpsAscending);\n\n\t\tlet hasTouchingRanges = false;\n\t\tfor (let i = 0, count = operations.length - 1; i < count; i++) {\n\t\t\tlet rangeEnd = operations[i].range.getEndPosition();\n\t\t\tlet nextRangeStart = operations[i + 1].range.getStartPosition();\n\n\t\t\tif (nextRangeStart.isBeforeOrEqual(rangeEnd)) {\n\t\t\t\tif (nextRangeStart.isBefore(rangeEnd)) {\n\t\t\t\t\t// overlapping ranges\n\t\t\t\t\tthrow new Error('Overlapping ranges are not allowed!');\n\t\t\t\t}\n\t\t\t\thasTouchingRanges = true;\n\t\t\t}\n\t\t}\n\n\t\tif (canReduceOperations) {\n\t\t\toperations = this._reduceOperations(operations);\n\t\t}\n\n\t\t// Delta encode operations\n\t\tlet reverseRanges = (computeUndoEdits || recordTrimAutoWhitespace ? PieceTreeTextBuffer._getInverseEditRanges(operations) : []);\n\t\tlet newTrimAutoWhitespaceCandidates: { lineNumber: number, oldContent: string }[] = [];\n\t\tif (recordTrimAutoWhitespace) {\n\t\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\t\tlet op = operations[i];\n\t\t\t\tlet reverseRange = reverseRanges[i];\n\n\t\t\t\tif (op.isAutoWhitespaceEdit && op.range.isEmpty()) {\n\t\t\t\t\t// Record already the future line numbers that might be auto whitespace removal candidates on next edit\n\t\t\t\t\tfor (let lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\n\t\t\t\t\t\tlet currentLineContent = '';\n\t\t\t\t\t\tif (lineNumber === reverseRange.startLineNumber) {\n\t\t\t\t\t\t\tcurrentLineContent = this.getLineContent(op.range.startLineNumber);\n\t\t\t\t\t\t\tif (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet reverseOperations: IReverseSingleEditOperation[] | null = null;\n\t\tif (computeUndoEdits) {\n\n\t\t\tlet reverseRangeDeltaOffset = 0;\n\t\t\treverseOperations = [];\n\t\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\t\tconst op = operations[i];\n\t\t\t\tconst reverseRange = reverseRanges[i];\n\t\t\t\tconst bufferText = this.getValueInRange(op.range);\n\t\t\t\tconst reverseRangeOffset = op.rangeOffset + reverseRangeDeltaOffset;\n\t\t\t\treverseRangeDeltaOffset += (op.text.length - bufferText.length);\n\n\t\t\t\treverseOperations[i] = {\n\t\t\t\t\tsortIndex: op.sortIndex,\n\t\t\t\t\tidentifier: op.identifier,\n\t\t\t\t\trange: reverseRange,\n\t\t\t\t\ttext: bufferText,\n\t\t\t\t\ttextChange: new TextChange(op.rangeOffset, bufferText, reverseRangeOffset, op.text)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Can only sort reverse operations when the order is not significant\n\t\t\tif (!hasTouchingRanges) {\n\t\t\t\treverseOperations.sort((a, b) => a.sortIndex - b.sortIndex);\n\t\t\t}\n\t\t}\n\n\n\t\tthis._mightContainRTL = mightContainRTL;\n\t\tthis._mightContainUnusualLineTerminators = mightContainUnusualLineTerminators;\n\t\tthis._mightContainNonBasicASCII = mightContainNonBasicASCII;\n\n\t\tconst contentChanges = this._doApplyEdits(operations);\n\n\t\tlet trimAutoWhitespaceLineNumbers: number[] | null = null;\n\t\tif (recordTrimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\n\t\t\t// sort line numbers auto whitespace removal candidates for next edit descending\n\t\t\tnewTrimAutoWhitespaceCandidates.sort((a, b) => b.lineNumber - a.lineNumber);\n\n\t\t\ttrimAutoWhitespaceLineNumbers = [];\n\t\t\tfor (let i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\n\t\t\t\tlet lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\n\t\t\t\tif (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\n\t\t\t\t\t// Do not have the same line number twice\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\n\t\t\t\tlet lineContent = this.getLineContent(lineNumber);\n\n\t\t\t\tif (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttrimAutoWhitespaceLineNumbers.push(lineNumber);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChangeContent.fire();\n\n\t\treturn new ApplyEditsResult(\n\t\t\treverseOperations,\n\t\t\tcontentChanges,\n\t\t\ttrimAutoWhitespaceLineNumbers\n\t\t);\n\t}\n\n\t/**\n\t * Transform operations such that they represent the same logic edit,\n\t * but that they also do not cause OOM crashes.\n\t */\n\tprivate _reduceOperations(operations: IValidatedEditOperation[]): IValidatedEditOperation[] {\n\t\tif (operations.length < 1000) {\n\t\t\t// We know from empirical testing that a thousand edits work fine regardless of their shape.\n\t\t\treturn operations;\n\t\t}\n\n\t\t// At one point, due to how events are emitted and how each operation is handled,\n\t\t// some operations can trigger a high amount of temporary string allocations,\n\t\t// that will immediately get edited again.\n\t\t// e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\n\t\t// Therefore, the strategy is to collapse all the operations into a huge single edit operation\n\t\treturn [this._toSingleEditOperation(operations)];\n\t}\n\n\t_toSingleEditOperation(operations: IValidatedEditOperation[]): IValidatedEditOperation {\n\t\tlet forceMoveMarkers = false;\n\t\tconst firstEditRange = operations[0].range;\n\t\tconst lastEditRange = operations[operations.length - 1].range;\n\t\tconst entireEditRange = new Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn);\n\t\tlet lastEndLineNumber = firstEditRange.startLineNumber;\n\t\tlet lastEndColumn = firstEditRange.startColumn;\n\t\tconst result: string[] = [];\n\n\t\tfor (let i = 0, len = operations.length; i < len; i++) {\n\t\t\tconst operation = operations[i];\n\t\t\tconst range = operation.range;\n\n\t\t\tforceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\n\n\t\t\t// (1) -- Push old text\n\t\t\tresult.push(this.getValueInRange(new Range(lastEndLineNumber, lastEndColumn, range.startLineNumber, range.startColumn)));\n\n\t\t\t// (2) -- Push new text\n\t\t\tif (operation.text.length > 0) {\n\t\t\t\tresult.push(operation.text);\n\t\t\t}\n\n\t\t\tlastEndLineNumber = range.endLineNumber;\n\t\t\tlastEndColumn = range.endColumn;\n\t\t}\n\n\t\tconst text = result.join('');\n\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n\n\t\treturn {\n\t\t\tsortIndex: 0,\n\t\t\tidentifier: operations[0].identifier,\n\t\t\trange: entireEditRange,\n\t\t\trangeOffset: this.getOffsetAt(entireEditRange.startLineNumber, entireEditRange.startColumn),\n\t\t\trangeLength: this.getValueLengthInRange(entireEditRange, EndOfLinePreference.TextDefined),\n\t\t\ttext: text,\n\t\t\teolCount: eolCount,\n\t\t\tfirstLineLength: firstLineLength,\n\t\t\tlastLineLength: lastLineLength,\n\t\t\tforceMoveMarkers: forceMoveMarkers,\n\t\t\tisAutoWhitespaceEdit: false\n\t\t};\n\t}\n\n\tprivate _doApplyEdits(operations: IValidatedEditOperation[]): IInternalModelContentChange[] {\n\t\toperations.sort(PieceTreeTextBuffer._sortOpsDescending);\n\n\t\tlet contentChanges: IInternalModelContentChange[] = [];\n\n\t\t// operations are from bottom to top\n\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\tlet op = operations[i];\n\n\t\t\tconst startLineNumber = op.range.startLineNumber;\n\t\t\tconst startColumn = op.range.startColumn;\n\t\t\tconst endLineNumber = op.range.endLineNumber;\n\t\t\tconst endColumn = op.range.endColumn;\n\n\t\t\tif (startLineNumber === endLineNumber && startColumn === endColumn && op.text.length === 0) {\n\t\t\t\t// no-op\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (op.text) {\n\t\t\t\t// replacement\n\t\t\t\tthis._pieceTree.delete(op.rangeOffset, op.rangeLength);\n\t\t\t\tthis._pieceTree.insert(op.rangeOffset, op.text, true);\n\n\t\t\t} else {\n\t\t\t\t// deletion\n\t\t\t\tthis._pieceTree.delete(op.rangeOffset, op.rangeLength);\n\t\t\t}\n\n\t\t\tconst contentChangeRange = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t\t\tcontentChanges.push({\n\t\t\t\trange: contentChangeRange,\n\t\t\t\trangeLength: op.rangeLength,\n\t\t\t\ttext: op.text,\n\t\t\t\trangeOffset: op.rangeOffset,\n\t\t\t\tforceMoveMarkers: op.forceMoveMarkers\n\t\t\t});\n\t\t}\n\t\treturn contentChanges;\n\t}\n\n\tfindMatchesLineByLine(searchRange: Range, searchData: SearchData, captureMatches: boolean, limitResultCount: number): FindMatch[] {\n\t\treturn this._pieceTree.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n\t}\n\n\t// #endregion\n\n\t// #region helper\n\t// testing purpose.\n\tpublic getPieceTree(): PieceTreeBase {\n\t\treturn this._pieceTree;\n\t}\n\n\tpublic static _getInverseEditRange(range: Range, text: string) {\n\t\tlet startLineNumber = range.startLineNumber;\n\t\tlet startColumn = range.startColumn;\n\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n\t\tlet resultRange: Range;\n\n\t\tif (text.length > 0) {\n\t\t\t// the operation inserts something\n\t\t\tconst lineCount = eolCount + 1;\n\n\t\t\tif (lineCount === 1) {\n\t\t\t\t// single line insert\n\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + firstLineLength);\n\t\t\t} else {\n\t\t\t\t// multi line insert\n\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, lastLineLength + 1);\n\t\t\t}\n\t\t} else {\n\t\t\t// There is nothing to insert\n\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n\t\t}\n\n\t\treturn resultRange;\n\t}\n\n\t/**\n\t * Assumes `operations` are validated and sorted ascending\n\t */\n\tpublic static _getInverseEditRanges(operations: IValidatedEditOperation[]): Range[] {\n\t\tlet result: Range[] = [];\n\n\t\tlet prevOpEndLineNumber: number = 0;\n\t\tlet prevOpEndColumn: number = 0;\n\t\tlet prevOp: IValidatedEditOperation | null = null;\n\t\tfor (let i = 0, len = operations.length; i < len; i++) {\n\t\t\tlet op = operations[i];\n\n\t\t\tlet startLineNumber: number;\n\t\t\tlet startColumn: number;\n\n\t\t\tif (prevOp) {\n\t\t\t\tif (prevOp.range.endLineNumber === op.range.startLineNumber) {\n\t\t\t\t\tstartLineNumber = prevOpEndLineNumber;\n\t\t\t\t\tstartColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\n\t\t\t\t} else {\n\t\t\t\t\tstartLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\n\t\t\t\t\tstartColumn = op.range.startColumn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstartLineNumber = op.range.startLineNumber;\n\t\t\t\tstartColumn = op.range.startColumn;\n\t\t\t}\n\n\t\t\tlet resultRange: Range;\n\n\t\t\tif (op.text.length > 0) {\n\t\t\t\t// the operation inserts something\n\t\t\t\tconst lineCount = op.eolCount + 1;\n\n\t\t\t\tif (lineCount === 1) {\n\t\t\t\t\t// single line insert\n\t\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + op.firstLineLength);\n\t\t\t\t} else {\n\t\t\t\t\t// multi line insert\n\t\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, op.lastLineLength + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// There is nothing to insert\n\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n\t\t\t}\n\n\t\t\tprevOpEndLineNumber = resultRange.endLineNumber;\n\t\t\tprevOpEndColumn = resultRange.endColumn;\n\n\t\t\tresult.push(resultRange);\n\t\t\tprevOp = op;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _sortOpsAscending(a: IValidatedEditOperation, b: IValidatedEditOperation): number {\n\t\tlet r = Range.compareRangesUsingEnds(a.range, b.range);\n\t\tif (r === 0) {\n\t\t\treturn a.sortIndex - b.sortIndex;\n\t\t}\n\t\treturn r;\n\t}\n\n\tprivate static _sortOpsDescending(a: IValidatedEditOperation, b: IValidatedEditOperation): number {\n\t\tlet r = Range.compareRangesUsingEnds(a.range, b.range);\n\t\tif (r === 0) {\n\t\t\treturn b.sortIndex - a.sortIndex;\n\t\t}\n\t\treturn -r;\n\t}\n\t// #endregion\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { DefaultEndOfLine, ITextBuffer, ITextBufferBuilder, ITextBufferFactory } from 'vs/editor/common/model';\nimport { StringBuffer, createLineStarts, createLineStartsFast } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase';\nimport { PieceTreeTextBuffer } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer';\n\nexport class PieceTreeTextBufferFactory implements ITextBufferFactory {\n\n\tconstructor(\n\t\tprivate readonly _chunks: StringBuffer[],\n\t\tprivate readonly _bom: string,\n\t\tprivate readonly _cr: number,\n\t\tprivate readonly _lf: number,\n\t\tprivate readonly _crlf: number,\n\t\tprivate readonly _containsRTL: boolean,\n\t\tprivate readonly _containsUnusualLineTerminators: boolean,\n\t\tprivate readonly _isBasicASCII: boolean,\n\t\tprivate readonly _normalizeEOL: boolean\n\t) { }\n\n\tprivate _getEOL(defaultEOL: DefaultEndOfLine): '\\r\\n' | '\\n' {\n\t\tconst totalEOLCount = this._cr + this._lf + this._crlf;\n\t\tconst totalCRCount = this._cr + this._crlf;\n\t\tif (totalEOLCount === 0) {\n\t\t\t// This is an empty file or a file with precisely one line\n\t\t\treturn (defaultEOL === DefaultEndOfLine.LF ? '\\n' : '\\r\\n');\n\t\t}\n\t\tif (totalCRCount > totalEOLCount / 2) {\n\t\t\t// More than half of the file contains \\r\\n ending lines\n\t\t\treturn '\\r\\n';\n\t\t}\n\t\t// At least one line more ends in \\n\n\t\treturn '\\n';\n\t}\n\n\tpublic create(defaultEOL: DefaultEndOfLine): { textBuffer: ITextBuffer; disposable: IDisposable; } {\n\t\tconst eol = this._getEOL(defaultEOL);\n\t\tlet chunks = this._chunks;\n\n\t\tif (this._normalizeEOL &&\n\t\t\t((eol === '\\r\\n' && (this._cr > 0 || this._lf > 0))\n\t\t\t\t|| (eol === '\\n' && (this._cr > 0 || this._crlf > 0)))\n\t\t) {\n\t\t\t// Normalize pieces\n\t\t\tfor (let i = 0, len = chunks.length; i < len; i++) {\n\t\t\t\tlet str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\n\t\t\t\tlet newLineStart = createLineStartsFast(str);\n\t\t\t\tchunks[i] = new StringBuffer(str, newLineStart);\n\t\t\t}\n\t\t}\n\n\t\tconst textBuffer = new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._containsUnusualLineTerminators, this._isBasicASCII, this._normalizeEOL);\n\t\treturn { textBuffer: textBuffer, disposable: textBuffer };\n\t}\n\n\tpublic getFirstLineText(lengthLimit: number): string {\n\t\treturn this._chunks[0].buffer.substr(0, lengthLimit).split(/\\r\\n|\\r|\\n/)[0];\n\t}\n}\n\nexport class PieceTreeTextBufferBuilder implements ITextBufferBuilder {\n\tprivate readonly chunks: StringBuffer[];\n\tprivate BOM: string;\n\n\tprivate _hasPreviousChar: boolean;\n\tprivate _previousChar: number;\n\tprivate readonly _tmpLineStarts: number[];\n\n\tprivate cr: number;\n\tprivate lf: number;\n\tprivate crlf: number;\n\tprivate containsRTL: boolean;\n\tprivate containsUnusualLineTerminators: boolean;\n\tprivate isBasicASCII: boolean;\n\n\tconstructor() {\n\t\tthis.chunks = [];\n\t\tthis.BOM = '';\n\n\t\tthis._hasPreviousChar = false;\n\t\tthis._previousChar = 0;\n\t\tthis._tmpLineStarts = [];\n\n\t\tthis.cr = 0;\n\t\tthis.lf = 0;\n\t\tthis.crlf = 0;\n\t\tthis.containsRTL = false;\n\t\tthis.containsUnusualLineTerminators = false;\n\t\tthis.isBasicASCII = true;\n\t}\n\n\tpublic acceptChunk(chunk: string): void {\n\t\tif (chunk.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.chunks.length === 0) {\n\t\t\tif (strings.startsWithUTF8BOM(chunk)) {\n\t\t\t\tthis.BOM = strings.UTF8_BOM_CHARACTER;\n\t\t\t\tchunk = chunk.substr(1);\n\t\t\t}\n\t\t}\n\n\t\tconst lastChar = chunk.charCodeAt(chunk.length - 1);\n\t\tif (lastChar === CharCode.CarriageReturn || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n\t\t\t// last character is \\r or a high surrogate => keep it back\n\t\t\tthis._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\n\t\t\tthis._hasPreviousChar = true;\n\t\t\tthis._previousChar = lastChar;\n\t\t} else {\n\t\t\tthis._acceptChunk1(chunk, false);\n\t\t\tthis._hasPreviousChar = false;\n\t\t\tthis._previousChar = lastChar;\n\t\t}\n\t}\n\n\tprivate _acceptChunk1(chunk: string, allowEmptyStrings: boolean): void {\n\t\tif (!allowEmptyStrings && chunk.length === 0) {\n\t\t\t// Nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._hasPreviousChar) {\n\t\t\tthis._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\n\t\t} else {\n\t\t\tthis._acceptChunk2(chunk);\n\t\t}\n\t}\n\n\tprivate _acceptChunk2(chunk: string): void {\n\t\tconst lineStarts = createLineStarts(this._tmpLineStarts, chunk);\n\n\t\tthis.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\n\t\tthis.cr += lineStarts.cr;\n\t\tthis.lf += lineStarts.lf;\n\t\tthis.crlf += lineStarts.crlf;\n\n\t\tif (this.isBasicASCII) {\n\t\t\tthis.isBasicASCII = lineStarts.isBasicASCII;\n\t\t}\n\t\tif (!this.isBasicASCII && !this.containsRTL) {\n\t\t\t// No need to check if it is basic ASCII\n\t\t\tthis.containsRTL = strings.containsRTL(chunk);\n\t\t}\n\t\tif (!this.isBasicASCII && !this.containsUnusualLineTerminators) {\n\t\t\t// No need to check if it is basic ASCII\n\t\t\tthis.containsUnusualLineTerminators = strings.containsUnusualLineTerminators(chunk);\n\t\t}\n\t}\n\n\tpublic finish(normalizeEOL: boolean = true): PieceTreeTextBufferFactory {\n\t\tthis._finish();\n\t\treturn new PieceTreeTextBufferFactory(\n\t\t\tthis.chunks,\n\t\t\tthis.BOM,\n\t\t\tthis.cr,\n\t\t\tthis.lf,\n\t\t\tthis.crlf,\n\t\t\tthis.containsRTL,\n\t\t\tthis.containsUnusualLineTerminators,\n\t\t\tthis.isBasicASCII,\n\t\t\tnormalizeEOL\n\t\t);\n\t}\n\n\tprivate _finish(): void {\n\t\tif (this.chunks.length === 0) {\n\t\t\tthis._acceptChunk1('', true);\n\t\t}\n\n\t\tif (this._hasPreviousChar) {\n\t\t\tthis._hasPreviousChar = false;\n\t\t\t// recreate last chunk\n\t\t\tlet lastChunk = this.chunks[this.chunks.length - 1];\n\t\t\tlastChunk.buffer += String.fromCharCode(this._previousChar);\n\t\t\tlet newLineStarts = createLineStartsFast(lastChunk.buffer);\n\t\t\tlastChunk.lineStarts = newLineStarts;\n\t\t\tif (this._previousChar === CharCode.CarriageReturn) {\n\t\t\t\tthis.cr++;\n\t\t\t}\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { isLinux, isMacintosh, isWeb, isWindows, userAgent } from 'vs/base/common/platform';\nimport { isFalsyOrWhitespace } from 'vs/base/common/strings';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nlet _userAgent = userAgent || '';\nconst STATIC_VALUES = new Map<string, boolean>();\nSTATIC_VALUES.set('false', false);\nSTATIC_VALUES.set('true', true);\nSTATIC_VALUES.set('isMac', isMacintosh);\nSTATIC_VALUES.set('isLinux', isLinux);\nSTATIC_VALUES.set('isWindows', isWindows);\nSTATIC_VALUES.set('isWeb', isWeb);\nSTATIC_VALUES.set('isMacNative', isMacintosh && !isWeb);\nSTATIC_VALUES.set('isEdge', _userAgent.indexOf('Edg/') >= 0);\nSTATIC_VALUES.set('isFirefox', _userAgent.indexOf('Firefox') >= 0);\nSTATIC_VALUES.set('isChrome', _userAgent.indexOf('Chrome') >= 0);\nSTATIC_VALUES.set('isSafari', _userAgent.indexOf('Safari') >= 0);\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport const enum ContextKeyExprType {\n\tFalse = 0,\n\tTrue = 1,\n\tDefined = 2,\n\tNot = 3,\n\tEquals = 4,\n\tNotEquals = 5,\n\tAnd = 6,\n\tRegex = 7,\n\tNotRegex = 8,\n\tOr = 9,\n\tIn = 10,\n\tNotIn = 11,\n\tGreater = 12,\n\tGreaterEquals = 13,\n\tSmaller = 14,\n\tSmallerEquals = 15,\n}\n\nexport interface IContextKeyExprMapper {\n\tmapDefined(key: string): ContextKeyExpression;\n\tmapNot(key: string): ContextKeyExpression;\n\tmapEquals(key: string, value: any): ContextKeyExpression;\n\tmapNotEquals(key: string, value: any): ContextKeyExpression;\n\tmapGreater(key: string, value: any): ContextKeyExpression;\n\tmapGreaterEquals(key: string, value: any): ContextKeyExpression;\n\tmapSmaller(key: string, value: any): ContextKeyExpression;\n\tmapSmallerEquals(key: string, value: any): ContextKeyExpression;\n\tmapRegex(key: string, regexp: RegExp | null): ContextKeyRegexExpr;\n\tmapIn(key: string, valueKey: string): ContextKeyInExpr;\n}\n\nexport interface IContextKeyExpression {\n\tcmp(other: ContextKeyExpression): number;\n\tequals(other: ContextKeyExpression): boolean;\n\tevaluate(context: IContext): boolean;\n\tserialize(): string;\n\tkeys(): string[];\n\tmap(mapFnc: IContextKeyExprMapper): ContextKeyExpression;\n\tnegate(): ContextKeyExpression;\n\n}\n\nexport type ContextKeyExpression = (\n\tContextKeyFalseExpr | ContextKeyTrueExpr | ContextKeyDefinedExpr | ContextKeyNotExpr\n\t| ContextKeyEqualsExpr | ContextKeyNotEqualsExpr | ContextKeyRegexExpr\n\t| ContextKeyNotRegexExpr | ContextKeyAndExpr | ContextKeyOrExpr | ContextKeyInExpr\n\t| ContextKeyNotInExpr | ContextKeyGreaterExpr | ContextKeyGreaterEqualsExpr\n\t| ContextKeySmallerExpr | ContextKeySmallerEqualsExpr\n);\n\nexport abstract class ContextKeyExpr {\n\n\tpublic static false(): ContextKeyExpression {\n\t\treturn ContextKeyFalseExpr.INSTANCE;\n\t}\n\n\tpublic static true(): ContextKeyExpression {\n\t\treturn ContextKeyTrueExpr.INSTANCE;\n\t}\n\n\tpublic static has(key: string): ContextKeyExpression {\n\t\treturn ContextKeyDefinedExpr.create(key);\n\t}\n\n\tpublic static equals(key: string, value: any): ContextKeyExpression {\n\t\treturn ContextKeyEqualsExpr.create(key, value);\n\t}\n\n\tpublic static notEquals(key: string, value: any): ContextKeyExpression {\n\t\treturn ContextKeyNotEqualsExpr.create(key, value);\n\t}\n\n\tpublic static regex(key: string, value: RegExp): ContextKeyExpression {\n\t\treturn ContextKeyRegexExpr.create(key, value);\n\t}\n\n\tpublic static in(key: string, value: string): ContextKeyExpression {\n\t\treturn ContextKeyInExpr.create(key, value);\n\t}\n\n\tpublic static not(key: string): ContextKeyExpression {\n\t\treturn ContextKeyNotExpr.create(key);\n\t}\n\n\tpublic static and(...expr: Array<ContextKeyExpression | undefined | null>): ContextKeyExpression | undefined {\n\t\treturn ContextKeyAndExpr.create(expr, null);\n\t}\n\n\tpublic static or(...expr: Array<ContextKeyExpression | undefined | null>): ContextKeyExpression | undefined {\n\t\treturn ContextKeyOrExpr.create(expr, null, true);\n\t}\n\n\tpublic static greater(key: string, value: any): ContextKeyExpression {\n\t\treturn ContextKeyGreaterExpr.create(key, value);\n\t}\n\n\tpublic static less(key: string, value: any): ContextKeyExpression {\n\t\treturn ContextKeySmallerExpr.create(key, value);\n\t}\n\n\tpublic static deserialize(serialized: string | null | undefined, strict: boolean = false): ContextKeyExpression | undefined {\n\t\tif (!serialized) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._deserializeOrExpression(serialized, strict);\n\t}\n\n\tprivate static _deserializeOrExpression(serialized: string, strict: boolean): ContextKeyExpression | undefined {\n\t\tlet pieces = serialized.split('||');\n\t\treturn ContextKeyOrExpr.create(pieces.map(p => this._deserializeAndExpression(p, strict)), null, true);\n\t}\n\n\tprivate static _deserializeAndExpression(serialized: string, strict: boolean): ContextKeyExpression | undefined {\n\t\tlet pieces = serialized.split('&&');\n\t\treturn ContextKeyAndExpr.create(pieces.map(p => this._deserializeOne(p, strict)), null);\n\t}\n\n\tprivate static _deserializeOne(serializedOne: string, strict: boolean): ContextKeyExpression {\n\t\tserializedOne = serializedOne.trim();\n\n\t\tif (serializedOne.indexOf('!=') >= 0) {\n\t\t\tlet pieces = serializedOne.split('!=');\n\t\t\treturn ContextKeyNotEqualsExpr.create(pieces[0].trim(), this._deserializeValue(pieces[1], strict));\n\t\t}\n\n\t\tif (serializedOne.indexOf('==') >= 0) {\n\t\t\tlet pieces = serializedOne.split('==');\n\t\t\treturn ContextKeyEqualsExpr.create(pieces[0].trim(), this._deserializeValue(pieces[1], strict));\n\t\t}\n\n\t\tif (serializedOne.indexOf('=~') >= 0) {\n\t\t\tlet pieces = serializedOne.split('=~');\n\t\t\treturn ContextKeyRegexExpr.create(pieces[0].trim(), this._deserializeRegexValue(pieces[1], strict));\n\t\t}\n\n\t\tif (serializedOne.indexOf(' in ') >= 0) {\n\t\t\tlet pieces = serializedOne.split(' in ');\n\t\t\treturn ContextKeyInExpr.create(pieces[0].trim(), pieces[1].trim());\n\t\t}\n\n\t\tif (/^[^<=>]+>=[^<=>]+$/.test(serializedOne)) {\n\t\t\tconst pieces = serializedOne.split('>=');\n\t\t\treturn ContextKeyGreaterEqualsExpr.create(pieces[0].trim(), pieces[1].trim());\n\t\t}\n\n\t\tif (/^[^<=>]+>[^<=>]+$/.test(serializedOne)) {\n\t\t\tconst pieces = serializedOne.split('>');\n\t\t\treturn ContextKeyGreaterExpr.create(pieces[0].trim(), pieces[1].trim());\n\t\t}\n\n\t\tif (/^[^<=>]+<=[^<=>]+$/.test(serializedOne)) {\n\t\t\tconst pieces = serializedOne.split('<=');\n\t\t\treturn ContextKeySmallerEqualsExpr.create(pieces[0].trim(), pieces[1].trim());\n\t\t}\n\n\t\tif (/^[^<=>]+<[^<=>]+$/.test(serializedOne)) {\n\t\t\tconst pieces = serializedOne.split('<');\n\t\t\treturn ContextKeySmallerExpr.create(pieces[0].trim(), pieces[1].trim());\n\t\t}\n\n\t\tif (/^\\!\\s*/.test(serializedOne)) {\n\t\t\treturn ContextKeyNotExpr.create(serializedOne.substr(1).trim());\n\t\t}\n\n\t\treturn ContextKeyDefinedExpr.create(serializedOne);\n\t}\n\n\tprivate static _deserializeValue(serializedValue: string, strict: boolean): any {\n\t\tserializedValue = serializedValue.trim();\n\n\t\tif (serializedValue === 'true') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (serializedValue === 'false') {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet m = /^'([^']*)'$/.exec(serializedValue);\n\t\tif (m) {\n\t\t\treturn m[1].trim();\n\t\t}\n\n\t\treturn serializedValue;\n\t}\n\n\tprivate static _deserializeRegexValue(serializedValue: string, strict: boolean): RegExp | null {\n\n\t\tif (isFalsyOrWhitespace(serializedValue)) {\n\t\t\tif (strict) {\n\t\t\t\tthrow new Error('missing regexp-value for =~-expression');\n\t\t\t} else {\n\t\t\t\tconsole.warn('missing regexp-value for =~-expression');\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tlet start = serializedValue.indexOf('/');\n\t\tlet end = serializedValue.lastIndexOf('/');\n\t\tif (start === end || start < 0 /* || to < 0 */) {\n\t\t\tif (strict) {\n\t\t\t\tthrow new Error(`bad regexp-value '${serializedValue}', missing /-enclosure`);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`bad regexp-value '${serializedValue}', missing /-enclosure`);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = serializedValue.slice(start + 1, end);\n\t\tlet caseIgnoreFlag = serializedValue[end + 1] === 'i' ? 'i' : '';\n\t\ttry {\n\t\t\treturn new RegExp(value, caseIgnoreFlag);\n\t\t} catch (e) {\n\t\t\tif (strict) {\n\t\t\t\tthrow new Error(`bad regexp-value '${serializedValue}', parse error: ${e}`);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`bad regexp-value '${serializedValue}', parse error: ${e}`);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nfunction cmp(a: ContextKeyExpression, b: ContextKeyExpression): number {\n\treturn a.cmp(b);\n}\n\nexport class ContextKeyFalseExpr implements IContextKeyExpression {\n\tpublic static INSTANCE = new ContextKeyFalseExpr();\n\n\tpublic readonly type = ContextKeyExprType.False;\n\n\tprotected constructor() {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\treturn this.type - other.type;\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\treturn (other.type === this.type);\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn false;\n\t}\n\n\tpublic serialize(): string {\n\t\treturn 'false';\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn this;\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\treturn ContextKeyTrueExpr.INSTANCE;\n\t}\n}\n\nexport class ContextKeyTrueExpr implements IContextKeyExpression {\n\tpublic static INSTANCE = new ContextKeyTrueExpr();\n\n\tpublic readonly type = ContextKeyExprType.True;\n\n\tprotected constructor() {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\treturn this.type - other.type;\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\treturn (other.type === this.type);\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn true;\n\t}\n\n\tpublic serialize(): string {\n\t\treturn 'true';\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn this;\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\treturn ContextKeyFalseExpr.INSTANCE;\n\t}\n}\n\nexport class ContextKeyDefinedExpr implements IContextKeyExpression {\n\tpublic static create(key: string, negated: ContextKeyExpression | null = null): ContextKeyExpression {\n\t\tconst staticValue = STATIC_VALUES.get(key);\n\t\tif (typeof staticValue === 'boolean') {\n\t\t\treturn staticValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;\n\t\t}\n\t\treturn new ContextKeyDefinedExpr(key, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.Defined;\n\n\tprotected constructor(\n\t\treadonly key: string,\n\t\tprivate negated: ContextKeyExpression | null\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp1(this.key, other.key);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn (!!context.getValue(this.key));\n\t}\n\n\tpublic serialize(): string {\n\t\treturn this.key;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn mapFnc.mapDefined(this.key);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeyNotExpr.create(this.key, this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeyEqualsExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, value: any, negated: ContextKeyExpression | null = null): ContextKeyExpression {\n\t\tif (typeof value === 'boolean') {\n\t\t\treturn (value ? ContextKeyDefinedExpr.create(key, negated) : ContextKeyNotExpr.create(key, negated));\n\t\t}\n\t\tconst staticValue = STATIC_VALUES.get(key);\n\t\tif (typeof staticValue === 'boolean') {\n\t\t\tconst trueValue = staticValue ? 'true' : 'false';\n\t\t\treturn (value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE);\n\t\t}\n\t\treturn new ContextKeyEqualsExpr(key, value, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.Equals;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate readonly value: any,\n\t\tprivate negated: ContextKeyExpression | null\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp2(this.key, this.value, other.key, other.value);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key && this.value === other.value);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\t// Intentional ==\n\t\t// eslint-disable-next-line eqeqeq\n\t\treturn (context.getValue(this.key) == this.value);\n\t}\n\n\tpublic serialize(): string {\n\t\treturn `${this.key} == '${this.value}'`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn mapFnc.mapEquals(this.key, this.value);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeyNotEqualsExpr.create(this.key, this.value, this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeyInExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, valueKey: string): ContextKeyInExpr {\n\t\treturn new ContextKeyInExpr(key, valueKey);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.In;\n\tprivate negated: ContextKeyExpression | null = null;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate readonly valueKey: string,\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp2(this.key, this.valueKey, other.key, other.valueKey);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key && this.valueKey === other.valueKey);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\tconst source = context.getValue(this.valueKey);\n\n\t\tconst item = context.getValue(this.key);\n\n\t\tif (Array.isArray(source)) {\n\t\t\treturn (source.indexOf(item) >= 0);\n\t\t}\n\n\t\tif (typeof item === 'string' && typeof source === 'object' && source !== null) {\n\t\t\treturn hasOwnProperty.call(source, item);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic serialize(): string {\n\t\treturn `${this.key} in '${this.valueKey}'`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key, this.valueKey];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyInExpr {\n\t\treturn mapFnc.mapIn(this.key, this.valueKey);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeyNotInExpr.create(this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeyNotInExpr implements IContextKeyExpression {\n\n\tpublic static create(actual: ContextKeyInExpr): ContextKeyNotInExpr {\n\t\treturn new ContextKeyNotInExpr(actual);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.NotIn;\n\n\tprivate constructor(private readonly _actual: ContextKeyInExpr) {\n\t\t//\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn this._actual.cmp(other._actual);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn this._actual.equals(other._actual);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn !this._actual.evaluate(context);\n\t}\n\n\tpublic serialize(): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn this._actual.keys();\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn new ContextKeyNotInExpr(this._actual.map(mapFnc));\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\treturn this._actual;\n\t}\n}\n\nexport class ContextKeyNotEqualsExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, value: any, negated: ContextKeyExpression | null = null): ContextKeyExpression {\n\t\tif (typeof value === 'boolean') {\n\t\t\tif (value) {\n\t\t\t\treturn ContextKeyNotExpr.create(key, negated);\n\t\t\t}\n\t\t\treturn ContextKeyDefinedExpr.create(key, negated);\n\t\t}\n\t\tconst staticValue = STATIC_VALUES.get(key);\n\t\tif (typeof staticValue === 'boolean') {\n\t\t\tconst falseValue = staticValue ? 'true' : 'false';\n\t\t\treturn (value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);\n\t\t}\n\t\treturn new ContextKeyNotEqualsExpr(key, value, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.NotEquals;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate readonly value: any,\n\t\tprivate negated: ContextKeyExpression | null\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp2(this.key, this.value, other.key, other.value);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key && this.value === other.value);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\t// Intentional !=\n\t\t// eslint-disable-next-line eqeqeq\n\t\treturn (context.getValue(this.key) != this.value);\n\t}\n\n\tpublic serialize(): string {\n\t\treturn `${this.key} != '${this.value}'`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn mapFnc.mapNotEquals(this.key, this.value);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeyEqualsExpr.create(this.key, this.value, this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeyNotExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, negated: ContextKeyExpression | null = null): ContextKeyExpression {\n\t\tconst staticValue = STATIC_VALUES.get(key);\n\t\tif (typeof staticValue === 'boolean') {\n\t\t\treturn (staticValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);\n\t\t}\n\t\treturn new ContextKeyNotExpr(key, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.Not;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate negated: ContextKeyExpression | null\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp1(this.key, other.key);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn (!context.getValue(this.key));\n\t}\n\n\tpublic serialize(): string {\n\t\treturn `!${this.key}`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn mapFnc.mapNot(this.key);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeyDefinedExpr.create(this.key, this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeyGreaterExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, value: any, negated: ContextKeyExpression | null = null): ContextKeyExpression {\n\t\treturn new ContextKeyGreaterExpr(key, value, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.Greater;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate readonly value: any,\n\t\tprivate negated: ContextKeyExpression | null\n\t) { }\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp2(this.key, this.value, other.key, other.value);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key && this.value === other.value);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn (parseFloat(<any>context.getValue(this.key)) > parseFloat(this.value));\n\t}\n\n\tpublic serialize(): string {\n\t\treturn `${this.key} > ${this.value}`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn mapFnc.mapGreater(this.key, this.value);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeySmallerEqualsExpr.create(this.key, this.value, this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeyGreaterEqualsExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, value: any, negated: ContextKeyExpression | null = null): ContextKeyExpression {\n\t\treturn new ContextKeyGreaterEqualsExpr(key, value, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.GreaterEquals;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate readonly value: any,\n\t\tprivate negated: ContextKeyExpression | null\n\t) { }\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp2(this.key, this.value, other.key, other.value);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key && this.value === other.value);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn (parseFloat(<any>context.getValue(this.key)) >= parseFloat(this.value));\n\t}\n\n\tpublic serialize(): string {\n\t\treturn `${this.key} >= ${this.value}`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn mapFnc.mapGreaterEquals(this.key, this.value);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeySmallerExpr.create(this.key, this.value, this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeySmallerExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, value: any, negated: ContextKeyExpression | null = null): ContextKeyExpression {\n\t\treturn new ContextKeySmallerExpr(key, value, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.Smaller;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate readonly value: any,\n\t\tprivate negated: ContextKeyExpression | null\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp2(this.key, this.value, other.key, other.value);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key && this.value === other.value);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn (parseFloat(<any>context.getValue(this.key)) < parseFloat(this.value));\n\t}\n\n\tpublic serialize(): string {\n\t\treturn `${this.key} < ${this.value}`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn mapFnc.mapSmaller(this.key, this.value);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeyGreaterEqualsExpr.create(this.key, this.value, this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeySmallerEqualsExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, value: any, negated: ContextKeyExpression | null = null): ContextKeyExpression {\n\t\treturn new ContextKeySmallerEqualsExpr(key, value, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.SmallerEquals;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate readonly value: any,\n\t\tprivate negated: ContextKeyExpression | null\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn cmp2(this.key, this.value, other.key, other.value);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn (this.key === other.key && this.value === other.value);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn (parseFloat(<any>context.getValue(this.key)) <= parseFloat(this.value));\n\t}\n\n\tpublic serialize(): string {\n\t\treturn `${this.key} <= ${this.value}`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn mapFnc.mapSmallerEquals(this.key, this.value);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeyGreaterExpr.create(this.key, this.value, this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeyRegexExpr implements IContextKeyExpression {\n\n\tpublic static create(key: string, regexp: RegExp | null): ContextKeyRegexExpr {\n\t\treturn new ContextKeyRegexExpr(key, regexp);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.Regex;\n\tprivate negated: ContextKeyExpression | null = null;\n\n\tprivate constructor(\n\t\tprivate readonly key: string,\n\t\tprivate readonly regexp: RegExp | null\n\t) {\n\t\t//\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\tif (this.key < other.key) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (this.key > other.key) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst thisSource = this.regexp ? this.regexp.source : '';\n\t\tconst otherSource = other.regexp ? other.regexp.source : '';\n\t\tif (thisSource < otherSource) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (thisSource > otherSource) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\tconst thisSource = this.regexp ? this.regexp.source : '';\n\t\t\tconst otherSource = other.regexp ? other.regexp.source : '';\n\t\t\treturn (this.key === other.key && thisSource === otherSource);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\tlet value = context.getValue<any>(this.key);\n\t\treturn this.regexp ? this.regexp.test(value) : false;\n\t}\n\n\tpublic serialize(): string {\n\t\tconst value = this.regexp\n\t\t\t? `/${this.regexp.source}/${this.regexp.ignoreCase ? 'i' : ''}`\n\t\t\t: '/invalid/';\n\t\treturn `${this.key} =~ ${value}`;\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn [this.key];\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyRegexExpr {\n\t\treturn mapFnc.mapRegex(this.key, this.regexp);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tthis.negated = ContextKeyNotRegexExpr.create(this);\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport class ContextKeyNotRegexExpr implements IContextKeyExpression {\n\n\tpublic static create(actual: ContextKeyRegexExpr): ContextKeyExpression {\n\t\treturn new ContextKeyNotRegexExpr(actual);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.NotRegex;\n\n\tprivate constructor(private readonly _actual: ContextKeyRegexExpr) {\n\t\t//\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\treturn this._actual.cmp(other._actual);\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\treturn this._actual.equals(other._actual);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\treturn !this._actual.evaluate(context);\n\t}\n\n\tpublic serialize(): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn this._actual.keys();\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn new ContextKeyNotRegexExpr(this._actual.map(mapFnc));\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\treturn this._actual;\n\t}\n}\n\nclass ContextKeyAndExpr implements IContextKeyExpression {\n\n\tpublic static create(_expr: ReadonlyArray<ContextKeyExpression | null | undefined>, negated: ContextKeyExpression | null): ContextKeyExpression | undefined {\n\t\treturn ContextKeyAndExpr._normalizeArr(_expr, negated);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.And;\n\n\tprivate constructor(\n\t\tpublic readonly expr: ContextKeyExpression[],\n\t\tprivate negated: ContextKeyExpression | null\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\tif (this.expr.length < other.expr.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (this.expr.length > other.expr.length) {\n\t\t\treturn 1;\n\t\t}\n\t\tfor (let i = 0, len = this.expr.length; i < len; i++) {\n\t\t\tconst r = cmp(this.expr[i], other.expr[i]);\n\t\t\tif (r !== 0) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\tif (this.expr.length !== other.expr.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (let i = 0, len = this.expr.length; i < len; i++) {\n\t\t\t\tif (!this.expr[i].equals(other.expr[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\tfor (let i = 0, len = this.expr.length; i < len; i++) {\n\t\t\tif (!this.expr[i].evaluate(context)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static _normalizeArr(arr: ReadonlyArray<ContextKeyExpression | null | undefined>, negated: ContextKeyExpression | null): ContextKeyExpression | undefined {\n\t\tconst expr: ContextKeyExpression[] = [];\n\t\tlet hasTrue = false;\n\n\t\tfor (const e of arr) {\n\t\t\tif (!e) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (e.type === ContextKeyExprType.True) {\n\t\t\t\t// anything && true ==> anything\n\t\t\t\thasTrue = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (e.type === ContextKeyExprType.False) {\n\t\t\t\t// anything && false ==> false\n\t\t\t\treturn ContextKeyFalseExpr.INSTANCE;\n\t\t\t}\n\n\t\t\tif (e.type === ContextKeyExprType.And) {\n\t\t\t\texpr.push(...e.expr);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\texpr.push(e);\n\t\t}\n\n\t\tif (expr.length === 0 && hasTrue) {\n\t\t\treturn ContextKeyTrueExpr.INSTANCE;\n\t\t}\n\n\t\tif (expr.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (expr.length === 1) {\n\t\t\treturn expr[0];\n\t\t}\n\n\t\texpr.sort(cmp);\n\n\t\t// eliminate duplicate terms\n\t\tfor (let i = 1; i < expr.length; i++) {\n\t\t\tif (expr[i - 1].equals(expr[i])) {\n\t\t\t\texpr.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\tif (expr.length === 1) {\n\t\t\treturn expr[0];\n\t\t}\n\n\t\t// We must distribute any OR expression because we don't support parens\n\t\t// OR extensions will be at the end (due to sorting rules)\n\t\twhile (expr.length > 1) {\n\t\t\tconst lastElement = expr[expr.length - 1];\n\t\t\tif (lastElement.type !== ContextKeyExprType.Or) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// pop the last element\n\t\t\texpr.pop();\n\n\t\t\t// pop the second to last element\n\t\t\tconst secondToLastElement = expr.pop()!;\n\n\t\t\tconst isFinished = (expr.length === 0);\n\n\t\t\t// distribute `lastElement` over `secondToLastElement`\n\t\t\tconst resultElement = ContextKeyOrExpr.create(\n\t\t\t\tlastElement.expr.map(el => ContextKeyAndExpr.create([el, secondToLastElement], null)),\n\t\t\t\tnull,\n\t\t\t\tisFinished\n\t\t\t);\n\n\t\t\tif (resultElement) {\n\t\t\t\texpr.push(resultElement);\n\t\t\t\texpr.sort(cmp);\n\t\t\t}\n\t\t}\n\n\t\tif (expr.length === 1) {\n\t\t\treturn expr[0];\n\t\t}\n\n\t\treturn new ContextKeyAndExpr(expr, negated);\n\t}\n\n\tpublic serialize(): string {\n\t\treturn this.expr.map(e => e.serialize()).join(' && ');\n\t}\n\n\tpublic keys(): string[] {\n\t\tconst result: string[] = [];\n\t\tfor (let expr of this.expr) {\n\t\t\tresult.push(...expr.keys());\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn new ContextKeyAndExpr(this.expr.map(expr => expr.map(mapFnc)), null);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tconst result: ContextKeyExpression[] = [];\n\t\t\tfor (let expr of this.expr) {\n\t\t\t\tresult.push(expr.negate());\n\t\t\t}\n\t\t\tthis.negated = ContextKeyOrExpr.create(result, this, true)!;\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nclass ContextKeyOrExpr implements IContextKeyExpression {\n\n\tpublic static create(_expr: ReadonlyArray<ContextKeyExpression | null | undefined>, negated: ContextKeyExpression | null, extraRedundantCheck: boolean): ContextKeyExpression | undefined {\n\t\treturn ContextKeyOrExpr._normalizeArr(_expr, negated, extraRedundantCheck);\n\t}\n\n\tpublic readonly type = ContextKeyExprType.Or;\n\n\tprivate constructor(\n\t\tpublic readonly expr: ContextKeyExpression[],\n\t\tprivate negated: ContextKeyExpression | null\n\t) {\n\t}\n\n\tpublic cmp(other: ContextKeyExpression): number {\n\t\tif (other.type !== this.type) {\n\t\t\treturn this.type - other.type;\n\t\t}\n\t\tif (this.expr.length < other.expr.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (this.expr.length > other.expr.length) {\n\t\t\treturn 1;\n\t\t}\n\t\tfor (let i = 0, len = this.expr.length; i < len; i++) {\n\t\t\tconst r = cmp(this.expr[i], other.expr[i]);\n\t\t\tif (r !== 0) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic equals(other: ContextKeyExpression): boolean {\n\t\tif (other.type === this.type) {\n\t\t\tif (this.expr.length !== other.expr.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (let i = 0, len = this.expr.length; i < len; i++) {\n\t\t\t\tif (!this.expr[i].equals(other.expr[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic evaluate(context: IContext): boolean {\n\t\tfor (let i = 0, len = this.expr.length; i < len; i++) {\n\t\t\tif (this.expr[i].evaluate(context)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate static _normalizeArr(arr: ReadonlyArray<ContextKeyExpression | null | undefined>, negated: ContextKeyExpression | null, extraRedundantCheck: boolean): ContextKeyExpression | undefined {\n\t\tlet expr: ContextKeyExpression[] = [];\n\t\tlet hasFalse = false;\n\n\t\tif (arr) {\n\t\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\t\tconst e = arr[i];\n\t\t\t\tif (!e) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (e.type === ContextKeyExprType.False) {\n\t\t\t\t\t// anything || false ==> anything\n\t\t\t\t\thasFalse = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (e.type === ContextKeyExprType.True) {\n\t\t\t\t\t// anything || true ==> true\n\t\t\t\t\treturn ContextKeyTrueExpr.INSTANCE;\n\t\t\t\t}\n\n\t\t\t\tif (e.type === ContextKeyExprType.Or) {\n\t\t\t\t\texpr = expr.concat(e.expr);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\texpr.push(e);\n\t\t\t}\n\n\t\t\tif (expr.length === 0 && hasFalse) {\n\t\t\t\treturn ContextKeyFalseExpr.INSTANCE;\n\t\t\t}\n\n\t\t\texpr.sort(cmp);\n\t\t}\n\n\t\tif (expr.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (expr.length === 1) {\n\t\t\treturn expr[0];\n\t\t}\n\n\t\t// eliminate duplicate terms\n\t\tfor (let i = 1; i < expr.length; i++) {\n\t\t\tif (expr[i - 1].equals(expr[i])) {\n\t\t\t\texpr.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\tif (expr.length === 1) {\n\t\t\treturn expr[0];\n\t\t}\n\n\t\t// eliminate redundant terms\n\t\tif (extraRedundantCheck) {\n\t\t\tfor (let i = 0; i < expr.length; i++) {\n\t\t\t\tfor (let j = i + 1; j < expr.length; j++) {\n\t\t\t\t\tif (implies(expr[i], expr[j])) {\n\t\t\t\t\t\texpr.splice(j, 1);\n\t\t\t\t\t\tj--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (expr.length === 1) {\n\t\t\t\treturn expr[0];\n\t\t\t}\n\t\t}\n\n\t\treturn new ContextKeyOrExpr(expr, negated);\n\t}\n\n\tpublic serialize(): string {\n\t\treturn this.expr.map(e => e.serialize()).join(' || ');\n\t}\n\n\tpublic keys(): string[] {\n\t\tconst result: string[] = [];\n\t\tfor (let expr of this.expr) {\n\t\t\tresult.push(...expr.keys());\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic map(mapFnc: IContextKeyExprMapper): ContextKeyExpression {\n\t\treturn new ContextKeyOrExpr(this.expr.map(expr => expr.map(mapFnc)), null);\n\t}\n\n\tpublic negate(): ContextKeyExpression {\n\t\tif (!this.negated) {\n\t\t\tlet result: ContextKeyExpression[] = [];\n\t\t\tfor (let expr of this.expr) {\n\t\t\t\tresult.push(expr.negate());\n\t\t\t}\n\n\t\t\t// We don't support parens, so here we distribute the AND over the OR terminals\n\t\t\t// We always take the first 2 AND pairs and distribute them\n\t\t\twhile (result.length > 1) {\n\t\t\t\tconst LEFT = result.shift()!;\n\t\t\t\tconst RIGHT = result.shift()!;\n\n\t\t\t\tconst all: ContextKeyExpression[] = [];\n\t\t\t\tfor (const left of getTerminals(LEFT)) {\n\t\t\t\t\tfor (const right of getTerminals(RIGHT)) {\n\t\t\t\t\t\tall.push(ContextKeyAndExpr.create([left, right], null)!);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst isFinished = (result.length === 0);\n\t\t\t\tresult.unshift(ContextKeyOrExpr.create(all, null, isFinished)!);\n\t\t\t}\n\n\t\t\tthis.negated = result[0];\n\t\t}\n\t\treturn this.negated;\n\t}\n}\n\nexport interface ContextKeyInfo {\n\treadonly key: string;\n\treadonly type?: string;\n\treadonly description?: string;\n}\n\nexport class RawContextKey<T> extends ContextKeyDefinedExpr {\n\n\tprivate static _info: ContextKeyInfo[] = [];\n\n\tstatic all(): IterableIterator<ContextKeyInfo> {\n\t\treturn RawContextKey._info.values();\n\t}\n\n\tprivate readonly _defaultValue: T | undefined;\n\n\tconstructor(key: string, defaultValue: T | undefined, metaOrHide?: string | true | { type: string, description: string }) {\n\t\tsuper(key, null);\n\t\tthis._defaultValue = defaultValue;\n\n\t\t// collect all context keys into a central place\n\t\tif (typeof metaOrHide === 'object') {\n\t\t\tRawContextKey._info.push({ ...metaOrHide, key });\n\t\t} else if (metaOrHide !== true) {\n\t\t\tRawContextKey._info.push({ key, description: metaOrHide, type: defaultValue !== null && defaultValue !== undefined ? typeof defaultValue : undefined });\n\t\t}\n\t}\n\n\tpublic bindTo(target: IContextKeyService): IContextKey<T> {\n\t\treturn target.createKey(this.key, this._defaultValue);\n\t}\n\n\tpublic getValue(target: IContextKeyService): T | undefined {\n\t\treturn target.getContextKeyValue<T>(this.key);\n\t}\n\n\tpublic toNegated(): ContextKeyExpression {\n\t\treturn this.negate();\n\t}\n\n\tpublic isEqualTo(value: any): ContextKeyExpression {\n\t\treturn ContextKeyEqualsExpr.create(this.key, value);\n\t}\n\n\tpublic notEqualsTo(value: any): ContextKeyExpression {\n\t\treturn ContextKeyNotEqualsExpr.create(this.key, value);\n\t}\n}\n\nexport interface IContext {\n\tgetValue<T>(key: string): T | undefined;\n}\n\nexport interface IContextKey<T> {\n\tset(value: T): void;\n\treset(): void;\n\tget(): T | undefined;\n}\n\nexport interface IContextKeyServiceTarget {\n\tparentElement: IContextKeyServiceTarget | null;\n\tsetAttribute(attr: string, value: string): void;\n\tremoveAttribute(attr: string): void;\n\thasAttribute(attr: string): boolean;\n\tgetAttribute(attr: string): string | null;\n}\n\nexport const IContextKeyService = createDecorator<IContextKeyService>('contextKeyService');\n\nexport interface IReadableSet<T> {\n\thas(value: T): boolean;\n}\n\nexport interface IContextKeyChangeEvent {\n\taffectsSome(keys: IReadableSet<string>): boolean;\n}\n\nexport interface IContextKeyService {\n\treadonly _serviceBrand: undefined;\n\tdispose(): void;\n\n\tonDidChangeContext: Event<IContextKeyChangeEvent>;\n\tbufferChangeEvents(callback: Function): void;\n\n\tcreateKey<T>(key: string, defaultValue: T | undefined): IContextKey<T>;\n\tcontextMatchesRules(rules: ContextKeyExpression | undefined): boolean;\n\tgetContextKeyValue<T>(key: string): T | undefined;\n\n\tcreateScoped(target: IContextKeyServiceTarget): IContextKeyService;\n\tcreateOverlay(overlay: Iterable<[string, any]>): IContextKeyService;\n\tgetContext(target: IContextKeyServiceTarget | null): IContext;\n\n\tupdateParent(parentContextKeyService: IContextKeyService): void;\n}\n\nexport const SET_CONTEXT_COMMAND_ID = 'setContext';\n\nfunction cmp1(key1: string, key2: string): number {\n\tif (key1 < key2) {\n\t\treturn -1;\n\t}\n\tif (key1 > key2) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nfunction cmp2(key1: string, value1: any, key2: string, value2: any): number {\n\tif (key1 < key2) {\n\t\treturn -1;\n\t}\n\tif (key1 > key2) {\n\t\treturn 1;\n\t}\n\tif (value1 < value2) {\n\t\treturn -1;\n\t}\n\tif (value1 > value2) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/**\n * Returns true if it is provable `p` implies `q`.\n */\nexport function implies(p: ContextKeyExpression, q: ContextKeyExpression): boolean {\n\n\tif (q.type === ContextKeyExprType.And && (p.type !== ContextKeyExprType.Or && p.type !== ContextKeyExprType.And)) {\n\t\t// covers the case: A implies A && B\n\t\tfor (const qTerm of q.expr) {\n\t\t\tif (p.equals(qTerm)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst notP = p.negate();\n\tconst expr = getTerminals(notP).concat(getTerminals(q));\n\texpr.sort(cmp);\n\n\tfor (let i = 0; i < expr.length; i++) {\n\t\tconst a = expr[i];\n\t\tconst notA = a.negate();\n\t\tfor (let j = i + 1; j < expr.length; j++) {\n\t\t\tconst b = expr[j];\n\t\t\tif (notA.equals(b)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction getTerminals(node: ContextKeyExpression) {\n\tif (node.type === ContextKeyExprType.Or) {\n\t\treturn node.expr;\n\t}\n\treturn [node];\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDiffResult, ISequence } from 'vs/base/common/diff/diff';\nimport { Event } from 'vs/base/common/event';\nimport * as glob from 'vs/base/common/glob';\nimport { Mimes } from 'vs/base/common/mime';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename } from 'vs/base/common/path';\nimport { isWindows } from 'vs/base/common/platform';\nimport { ISplice } from 'vs/base/common/sequence';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { Command } from 'vs/editor/common/modes';\nimport { IAccessibilityInformation } from 'vs/platform/accessibility/common/accessibility';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IEditorModel } from 'vs/platform/editor/common/editor';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { ThemeColor } from 'vs/platform/theme/common/themeService';\nimport { IEditorInput, IRevertOptions, ISaveOptions } from 'vs/workbench/common/editor';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\nimport { IWorkingCopyBackupMeta } from 'vs/workbench/services/workingCopy/common/workingCopy';\n\nexport enum CellKind {\n\tMarkup = 1,\n\tCode = 2\n}\n\nexport const NOTEBOOK_DISPLAY_ORDER = [\n\t'application/json',\n\t'application/javascript',\n\t'text/html',\n\t'image/svg+xml',\n\tMimes.markdown,\n\t'image/png',\n\t'image/jpeg',\n\tMimes.text\n];\n\nexport const ACCESSIBLE_NOTEBOOK_DISPLAY_ORDER = [\n\tMimes.markdown,\n\t'application/json',\n\tMimes.text,\n\t'text/html',\n\t'image/svg+xml',\n\t'image/png',\n\t'image/jpeg',\n];\n\nexport const BUILTIN_RENDERER_ID = '_builtin';\nexport const RENDERER_NOT_AVAILABLE = '_notAvailable';\n\nexport type NotebookRendererEntrypoint = string | { extends: string; path: string; };\n\nexport enum NotebookRunState {\n\tRunning = 1,\n\tIdle = 2\n}\n\nexport type NotebookDocumentMetadata = Record<string, unknown>;\n\n// Aligns with the vscode.d.ts version\nexport enum NotebookCellExecutionState {\n\tPending = 2,\n\tExecuting = 3\n}\n\nexport interface INotebookCellPreviousExecutionResult {\n\texecutionOrder?: number;\n\tsuccess?: boolean;\n\tduration?: number;\n}\n\nexport interface NotebookCellMetadata {\n\tinputCollapsed?: boolean;\n\toutputCollapsed?: boolean;\n\n\t/**\n\t * custom metadata\n\t */\n\t[key: string]: unknown;\n}\n\nexport interface NotebookCellInternalMetadata {\n\texecutionOrder?: number;\n\tlastRunSuccess?: boolean;\n\trunState?: NotebookCellExecutionState;\n\trunStartTime?: number;\n\trunStartTimeAdjustment?: number;\n\trunEndTime?: number;\n\tisPaused?: boolean;\n\tdidPause?: boolean;\n}\n\nexport type TransientCellMetadata = { [K in keyof NotebookCellMetadata]?: boolean };\nexport type TransientDocumentMetadata = { [K in keyof NotebookDocumentMetadata]?: boolean };\n\nexport interface TransientOptions {\n\ttransientOutputs: boolean;\n\ttransientCellMetadata: TransientCellMetadata;\n\ttransientDocumentMetadata: TransientDocumentMetadata;\n}\n\n\n\n/** Note: enum values are used for sorting */\nexport const enum NotebookRendererMatch {\n\t/** Renderer has a hard dependency on an available kernel */\n\tWithHardKernelDependency = 0,\n\t/** Renderer works better with an available kernel */\n\tWithOptionalKernelDependency = 1,\n\t/** Renderer is kernel-agnostic */\n\tPure = 2,\n\t/** Renderer is for a different mimeType or has a hard dependency which is unsatisfied */\n\tNever = 3,\n}\n\n/**\n * Renderer messaging requirement. While this allows for 'optional' messaging,\n * VS Code effectively treats it the same as true right now. \"Partial\n * activation\" of extensions is a very tricky problem, which could allow\n * solving this. But for now, optional is mostly only honored for aznb.\n */\nexport const enum RendererMessagingSpec {\n\tAlways = 'always',\n\tNever = 'never',\n\tOptional = 'optional',\n}\n\nexport interface INotebookRendererInfo {\n\tid: string;\n\tdisplayName: string;\n\textends?: string;\n\tentrypoint: URI;\n\tpreloads: ReadonlyArray<URI>;\n\textensionLocation: URI;\n\textensionId: ExtensionIdentifier;\n\tmessaging: RendererMessagingSpec;\n\n\treadonly mimeTypes: readonly string[];\n\n\treadonly dependencies: readonly string[];\n\n\tmatchesWithoutKernel(mimeType: string): NotebookRendererMatch;\n\tmatches(mimeType: string, kernelProvides: ReadonlyArray<string>): NotebookRendererMatch;\n}\n\n\nexport interface IOrderedMimeType {\n\tmimeType: string;\n\trendererId: string;\n\tisTrusted: boolean;\n}\n\nexport interface IOutputItemDto {\n\treadonly mime: string;\n\treadonly data: VSBuffer;\n}\n\nexport interface IOutputDto {\n\toutputs: IOutputItemDto[];\n\toutputId: string;\n\tmetadata?: Record<string, any>;\n}\n\nexport interface ICellOutput {\n\toutputs: IOutputItemDto[];\n\tmetadata?: Record<string, any>;\n\toutputId: string;\n\tonDidChangeData: Event<void>;\n\treplaceData(items: IOutputItemDto[]): void;\n\tappendData(items: IOutputItemDto[]): void;\n}\n\nexport interface CellInternalMetadataChangedEvent {\n\treadonly runStateChanged?: boolean;\n\treadonly lastRunSuccessChanged?: boolean;\n}\n\nexport interface ICell {\n\treadonly uri: URI;\n\thandle: number;\n\tlanguage: string;\n\tcellKind: CellKind;\n\toutputs: ICellOutput[];\n\tmetadata: NotebookCellMetadata;\n\tinternalMetadata: NotebookCellInternalMetadata;\n\tonDidChangeOutputs?: Event<NotebookCellOutputsSplice>;\n\tonDidChangeLanguage: Event<string>;\n\tonDidChangeMetadata: Event<void>;\n\tonDidChangeInternalMetadata: Event<CellInternalMetadataChangedEvent>;\n}\n\nexport interface INotebookTextModel {\n\treadonly viewType: string;\n\tmetadata: NotebookDocumentMetadata;\n\treadonly uri: URI;\n\treadonly versionId: number;\n\n\treadonly cells: readonly ICell[];\n\tonWillDispose: Event<void>;\n}\n\nexport type NotebookCellTextModelSplice<T> = [\n\tstart: number,\n\tdeleteCount: number,\n\tnewItems: T[]\n];\n\nexport type NotebookCellOutputsSplice = {\n\tstart: number /* start */;\n\tdeleteCount: number /* delete count */;\n\tnewOutputs: ICellOutput[];\n};\n\nexport interface IMainCellDto {\n\thandle: number;\n\turi: UriComponents,\n\tsource: string[];\n\teol: string;\n\tlanguage: string;\n\tcellKind: CellKind;\n\toutputs: IOutputDto[];\n\tmetadata?: NotebookCellMetadata;\n\tinternalMetadata?: NotebookCellInternalMetadata;\n}\n\nexport enum NotebookCellsChangeType {\n\tModelChange = 1,\n\tMove = 2,\n\tChangeLanguage = 5,\n\tInitialize = 6,\n\tChangeCellMetadata = 7,\n\tOutput = 8,\n\tOutputItem = 9,\n\tChangeCellContent = 10,\n\tChangeDocumentMetadata = 11,\n\tChangeCellInternalMetadata = 12,\n\tChangeCellMime = 13,\n\tUnknown = 100\n}\n\nexport interface NotebookCellsInitializeEvent<T> {\n\treadonly kind: NotebookCellsChangeType.Initialize;\n\treadonly changes: NotebookCellTextModelSplice<T>[];\n}\n\nexport interface NotebookCellContentChangeEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellContent;\n}\n\nexport interface NotebookCellsModelChangedEvent<T> {\n\treadonly kind: NotebookCellsChangeType.ModelChange;\n\treadonly changes: NotebookCellTextModelSplice<T>[];\n}\n\nexport interface NotebookCellsModelMoveEvent<T> {\n\treadonly kind: NotebookCellsChangeType.Move;\n\treadonly index: number;\n\treadonly length: number;\n\treadonly newIdx: number;\n\treadonly cells: T[];\n}\n\nexport interface NotebookOutputChangedEvent {\n\treadonly kind: NotebookCellsChangeType.Output;\n\treadonly index: number;\n\treadonly outputs: IOutputDto[];\n\treadonly append: boolean;\n}\n\nexport interface NotebookOutputItemChangedEvent {\n\treadonly kind: NotebookCellsChangeType.OutputItem;\n\treadonly index: number;\n\treadonly outputId: string;\n\treadonly outputItems: IOutputItemDto[];\n\treadonly append: boolean;\n}\n\nexport interface NotebookCellsChangeLanguageEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeLanguage;\n\treadonly index: number;\n\treadonly language: string;\n}\n\nexport interface NotebookCellsChangeMimeEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellMime;\n\treadonly index: number;\n\treadonly mime: string | undefined;\n}\n\nexport interface NotebookCellsChangeMetadataEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellMetadata;\n\treadonly index: number;\n\treadonly metadata: NotebookCellMetadata;\n}\n\nexport interface NotebookCellsChangeInternalMetadataEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeCellInternalMetadata;\n\treadonly index: number;\n\treadonly internalMetadata: NotebookCellInternalMetadata;\n}\n\nexport interface NotebookDocumentChangeMetadataEvent {\n\treadonly kind: NotebookCellsChangeType.ChangeDocumentMetadata;\n\treadonly metadata: NotebookDocumentMetadata;\n}\n\nexport interface NotebookDocumentUnknownChangeEvent {\n\treadonly kind: NotebookCellsChangeType.Unknown;\n}\n\nexport type NotebookRawContentEventDto = NotebookCellsInitializeEvent<IMainCellDto> | NotebookDocumentChangeMetadataEvent | NotebookCellContentChangeEvent | NotebookCellsModelChangedEvent<IMainCellDto> | NotebookCellsModelMoveEvent<IMainCellDto> | NotebookOutputChangedEvent | NotebookOutputItemChangedEvent | NotebookCellsChangeLanguageEvent | NotebookCellsChangeMimeEvent | NotebookCellsChangeMetadataEvent | NotebookCellsChangeInternalMetadataEvent | NotebookDocumentUnknownChangeEvent;\n\nexport type NotebookCellsChangedEventDto = {\n\treadonly rawEvents: NotebookRawContentEventDto[];\n\treadonly versionId: number;\n};\n\nexport type NotebookRawContentEvent = (NotebookCellsInitializeEvent<ICell> | NotebookDocumentChangeMetadataEvent | NotebookCellContentChangeEvent | NotebookCellsModelChangedEvent<ICell> | NotebookCellsModelMoveEvent<ICell> | NotebookOutputChangedEvent | NotebookOutputItemChangedEvent | NotebookCellsChangeLanguageEvent | NotebookCellsChangeMimeEvent | NotebookCellsChangeMetadataEvent | NotebookCellsChangeInternalMetadataEvent | NotebookDocumentUnknownChangeEvent) & { transient: boolean; };\n\nexport enum SelectionStateType {\n\tHandle = 0,\n\tIndex = 1\n}\n\nexport interface ISelectionHandleState {\n\tkind: SelectionStateType.Handle;\n\tprimary: number | null;\n\tselections: number[];\n}\n\nexport interface ISelectionIndexState {\n\tkind: SelectionStateType.Index;\n\tfocus: ICellRange;\n\tselections: ICellRange[];\n}\n\nexport type ISelectionState = ISelectionHandleState | ISelectionIndexState;\n\nexport type NotebookTextModelChangedEvent = {\n\treadonly rawEvents: NotebookRawContentEvent[];\n\treadonly versionId: number;\n\treadonly synchronous: boolean | undefined;\n\treadonly endSelectionState: ISelectionState | undefined;\n};\n\nexport type NotebookTextModelWillAddRemoveEvent = {\n\treadonly rawEvent: NotebookCellsModelChangedEvent<ICell>;\n};\n\nexport const enum CellEditType {\n\tReplace = 1,\n\tOutput = 2,\n\tMetadata = 3,\n\tCellLanguage = 4,\n\tDocumentMetadata = 5,\n\tMove = 6,\n\tOutputItems = 7,\n\tPartialMetadata = 8,\n\tPartialInternalMetadata = 9,\n}\n\nexport interface ICellDto2 {\n\tsource: string;\n\tlanguage: string;\n\tmime: string | undefined;\n\tcellKind: CellKind;\n\toutputs: IOutputDto[];\n\tmetadata?: NotebookCellMetadata;\n\tinternalMetadata?: NotebookCellInternalMetadata;\n}\n\nexport interface ICellReplaceEdit {\n\teditType: CellEditType.Replace;\n\tindex: number;\n\tcount: number;\n\tcells: ICellDto2[];\n}\n\nexport interface ICellOutputEdit {\n\teditType: CellEditType.Output;\n\tindex: number;\n\toutputs: IOutputDto[];\n\tappend?: boolean;\n}\n\nexport interface ICellOutputEditByHandle {\n\teditType: CellEditType.Output;\n\thandle: number;\n\toutputs: IOutputDto[];\n\tappend?: boolean;\n}\n\nexport interface ICellOutputItemEdit {\n\teditType: CellEditType.OutputItems;\n\toutputId: string;\n\titems: IOutputItemDto[];\n\tappend?: boolean;\n}\n\nexport interface ICellMetadataEdit {\n\teditType: CellEditType.Metadata;\n\tindex: number;\n\tmetadata: NotebookCellMetadata;\n}\n\n// These types are nullable because we need to use 'null' on the EH side so it is JSON-stringified\nexport type NullablePartialNotebookCellMetadata = {\n\t[Key in keyof Partial<NotebookCellMetadata>]: NotebookCellMetadata[Key] | null\n};\n\nexport interface ICellPartialMetadataEdit {\n\teditType: CellEditType.PartialMetadata;\n\tindex: number;\n\tmetadata: NullablePartialNotebookCellMetadata;\n}\n\nexport interface ICellPartialMetadataEditByHandle {\n\teditType: CellEditType.PartialMetadata;\n\thandle: number;\n\tmetadata: NullablePartialNotebookCellMetadata;\n}\n\nexport type NullablePartialNotebookCellInternalMetadata = {\n\t[Key in keyof Partial<NotebookCellInternalMetadata>]: NotebookCellInternalMetadata[Key] | null\n};\nexport interface ICellPartialInternalMetadataEdit {\n\teditType: CellEditType.PartialInternalMetadata;\n\tindex: number;\n\tinternalMetadata: NullablePartialNotebookCellInternalMetadata;\n}\n\nexport interface ICellPartialInternalMetadataEditByHandle {\n\teditType: CellEditType.PartialInternalMetadata;\n\thandle: number;\n\tinternalMetadata: NullablePartialNotebookCellInternalMetadata;\n}\n\nexport interface ICellLanguageEdit {\n\teditType: CellEditType.CellLanguage;\n\tindex: number;\n\tlanguage: string;\n}\n\nexport interface IDocumentMetadataEdit {\n\teditType: CellEditType.DocumentMetadata;\n\tmetadata: NotebookDocumentMetadata;\n}\n\nexport interface ICellMoveEdit {\n\teditType: CellEditType.Move;\n\tindex: number;\n\tlength: number;\n\tnewIdx: number;\n}\n\nexport type IImmediateCellEditOperation = ICellOutputEditByHandle | ICellPartialMetadataEditByHandle | ICellOutputItemEdit | ICellPartialInternalMetadataEdit | ICellPartialInternalMetadataEditByHandle | ICellPartialMetadataEdit;\nexport type ICellEditOperation = IImmediateCellEditOperation | ICellReplaceEdit | ICellOutputEdit | ICellMetadataEdit | ICellPartialMetadataEdit | ICellPartialInternalMetadataEdit | IDocumentMetadataEdit | ICellMoveEdit | ICellOutputItemEdit | ICellLanguageEdit;\n\nexport interface NotebookData {\n\treadonly cells: ICellDto2[];\n\treadonly metadata: NotebookDocumentMetadata;\n}\n\n\nexport interface INotebookContributionData {\n\textension?: ExtensionIdentifier,\n\tproviderDisplayName: string;\n\tdisplayName: string;\n\tfilenamePattern: (string | glob.IRelativePattern | INotebookExclusiveDocumentFilter)[];\n\texclusive: boolean;\n}\n\n\nexport namespace CellUri {\n\n\texport const scheme = Schemas.vscodeNotebookCell;\n\n\tconst _regex = /^ch(\\d{7,})/;\n\n\texport function generate(notebook: URI, handle: number): URI {\n\t\treturn notebook.with({\n\t\t\tscheme,\n\t\t\tfragment: `ch${handle.toString().padStart(7, '0')}${notebook.scheme !== Schemas.file ? notebook.scheme : ''}`\n\t\t});\n\t}\n\n\texport function parse(cell: URI): { notebook: URI, handle: number; } | undefined {\n\t\tif (cell.scheme !== scheme) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst match = _regex.exec(cell.fragment);\n\t\tif (!match) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst handle = Number(match[1]);\n\t\treturn {\n\t\t\thandle,\n\t\t\tnotebook: cell.with({\n\t\t\t\tscheme: cell.fragment.substr(match[0].length) || Schemas.file,\n\t\t\t\tfragment: null\n\t\t\t})\n\t\t};\n\t}\n\n\texport function parseCellMetadataUri(metadata: URI) {\n\t\tif (metadata.scheme !== Schemas.vscodeNotebookCellMetadata) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst match = _regex.exec(metadata.fragment);\n\t\tif (!match) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst handle = Number(match[1]);\n\t\treturn {\n\t\t\thandle,\n\t\t\tnotebook: metadata.with({\n\t\t\t\tscheme: metadata.fragment.substr(match[0].length) || Schemas.file,\n\t\t\t\tfragment: null\n\t\t\t})\n\t\t};\n\t}\n\n\texport function generateCellUri(notebook: URI, handle: number, scheme: string): URI {\n\t\treturn notebook.with({\n\t\t\tscheme: scheme,\n\t\t\tfragment: `ch${handle.toString().padStart(7, '0')}${notebook.scheme !== Schemas.file ? notebook.scheme : ''}`\n\t\t});\n\t}\n\n\texport function parseCellUri(metadata: URI, scheme: string) {\n\t\tif (metadata.scheme !== scheme) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst match = _regex.exec(metadata.fragment);\n\t\tif (!match) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst handle = Number(match[1]);\n\t\treturn {\n\t\t\thandle,\n\t\t\tnotebook: metadata.with({\n\t\t\t\tscheme: metadata.fragment.substr(match[0].length) || Schemas.file,\n\t\t\t\tfragment: null\n\t\t\t})\n\t\t};\n\t}\n}\n\ntype MimeTypeInfo = {\n\talwaysSecure?: boolean;\n\tsupportedByCore?: boolean;\n\tmergeable?: boolean;\n};\n\nconst _mimeTypeInfo = new Map<string, MimeTypeInfo>([\n\t['application/javascript', { supportedByCore: true }],\n\t['image/png', { alwaysSecure: true, supportedByCore: true }],\n\t['image/jpeg', { alwaysSecure: true, supportedByCore: true }],\n\t['image/git', { alwaysSecure: true, supportedByCore: true }],\n\t['image/svg+xml', { supportedByCore: true }],\n\t['application/json', { alwaysSecure: true, supportedByCore: true }],\n\t[Mimes.markdown, { alwaysSecure: true, supportedByCore: true }],\n\t[Mimes.text, { alwaysSecure: true, supportedByCore: true }],\n\t['text/html', { supportedByCore: true }],\n\t['text/x-javascript', { alwaysSecure: true, supportedByCore: true }], // secure because rendered as text, not executed\n\t['application/vnd.code.notebook.error', { alwaysSecure: true, supportedByCore: true }],\n\t['application/vnd.code.notebook.stdout', { alwaysSecure: true, supportedByCore: true, mergeable: true }],\n\t['application/vnd.code.notebook.stderr', { alwaysSecure: true, supportedByCore: true, mergeable: true }],\n]);\n\nexport function mimeTypeIsAlwaysSecure(mimeType: string): boolean {\n\treturn _mimeTypeInfo.get(mimeType)?.alwaysSecure ?? false;\n}\n\nexport function mimeTypeSupportedByCore(mimeType: string) {\n\treturn _mimeTypeInfo.get(mimeType)?.supportedByCore ?? false;\n}\n\nexport function mimeTypeIsMergeable(mimeType: string): boolean {\n\treturn _mimeTypeInfo.get(mimeType)?.mergeable ?? false;\n}\n\nfunction matchGlobUniversal(pattern: string, path: string) {\n\tif (isWindows) {\n\t\tpattern = pattern.replace(/\\//g, '\\\\');\n\t\tpath = path.replace(/\\//g, '\\\\');\n\t}\n\n\treturn glob.match(pattern, path);\n}\n\n\nfunction getMimeTypeOrder(mimeType: string, userDisplayOrder: string[], defaultOrder: string[]) {\n\tlet order = 0;\n\tfor (let i = 0; i < userDisplayOrder.length; i++) {\n\t\tif (matchGlobUniversal(userDisplayOrder[i], mimeType)) {\n\t\t\treturn order;\n\t\t}\n\t\torder++;\n\t}\n\n\tfor (let i = 0; i < defaultOrder.length; i++) {\n\t\tif (matchGlobUniversal(defaultOrder[i], mimeType)) {\n\t\t\treturn order;\n\t\t}\n\n\t\torder++;\n\t}\n\n\treturn order;\n}\n\nexport function sortMimeTypes(mimeTypes: string[], userDisplayOrder: string[], defaultOrder: string[]) {\n\treturn mimeTypes.sort((a, b) => getMimeTypeOrder(a, userDisplayOrder, defaultOrder) - getMimeTypeOrder(b, userDisplayOrder, defaultOrder));\n}\n\ninterface IMutableSplice<T> extends ISplice<T> {\n\tdeleteCount: number;\n}\n\nexport function diff<T>(before: T[], after: T[], contains: (a: T) => boolean, equal: (a: T, b: T) => boolean = (a: T, b: T) => a === b): ISplice<T>[] {\n\tconst result: IMutableSplice<T>[] = [];\n\n\tfunction pushSplice(start: number, deleteCount: number, toInsert: T[]): void {\n\t\tif (deleteCount === 0 && toInsert.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst latest = result[result.length - 1];\n\n\t\tif (latest && latest.start + latest.deleteCount === start) {\n\t\t\tlatest.deleteCount += deleteCount;\n\t\t\tlatest.toInsert.push(...toInsert);\n\t\t} else {\n\t\t\tresult.push({ start, deleteCount, toInsert });\n\t\t}\n\t}\n\n\tlet beforeIdx = 0;\n\tlet afterIdx = 0;\n\n\twhile (true) {\n\t\tif (beforeIdx === before.length) {\n\t\t\tpushSplice(beforeIdx, 0, after.slice(afterIdx));\n\t\t\tbreak;\n\t\t}\n\n\t\tif (afterIdx === after.length) {\n\t\t\tpushSplice(beforeIdx, before.length - beforeIdx, []);\n\t\t\tbreak;\n\t\t}\n\n\t\tconst beforeElement = before[beforeIdx];\n\t\tconst afterElement = after[afterIdx];\n\n\t\tif (equal(beforeElement, afterElement)) {\n\t\t\t// equal\n\t\t\tbeforeIdx += 1;\n\t\t\tafterIdx += 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (contains(afterElement)) {\n\t\t\t// `afterElement` exists before, which means some elements before `afterElement` are deleted\n\t\t\tpushSplice(beforeIdx, 1, []);\n\t\t\tbeforeIdx += 1;\n\t\t} else {\n\t\t\t// `afterElement` added\n\t\t\tpushSplice(beforeIdx, 0, [afterElement]);\n\t\t\tafterIdx += 1;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport interface ICellEditorViewState {\n\tselections: editorCommon.ICursorState[];\n}\n\nexport const NOTEBOOK_EDITOR_CURSOR_BOUNDARY = new RawContextKey<'none' | 'top' | 'bottom' | 'both'>('notebookEditorCursorAtBoundary', 'none');\n\n\nexport interface INotebookLoadOptions {\n\t/**\n\t * Go to disk bypassing any cache of the model if any.\n\t */\n\tforceReadFromFile?: boolean;\n}\n\nexport interface IResolvedNotebookEditorModel extends INotebookEditorModel {\n\tnotebook: NotebookTextModel;\n}\n\nexport interface INotebookEditorModel extends IEditorModel {\n\treadonly onDidChangeDirty: Event<void>;\n\treadonly onDidSave: Event<void>;\n\treadonly onDidChangeOrphaned: Event<void>;\n\treadonly onDidChangeReadonly: Event<void>;\n\treadonly resource: URI;\n\treadonly viewType: string;\n\treadonly notebook: NotebookTextModel | undefined;\n\tisResolved(): this is IResolvedNotebookEditorModel;\n\tisDirty(): boolean;\n\tisReadonly(): boolean;\n\tisOrphaned(): boolean;\n\thasAssociatedFilePath(): boolean;\n\tload(options?: INotebookLoadOptions): Promise<IResolvedNotebookEditorModel>;\n\tsave(options?: ISaveOptions): Promise<boolean>;\n\tsaveAs(target: URI): Promise<IEditorInput | undefined>;\n\trevert(options?: IRevertOptions): Promise<void>;\n}\n\nexport interface INotebookDiffEditorModel extends IEditorModel {\n\toriginal: IResolvedNotebookEditorModel;\n\tmodified: IResolvedNotebookEditorModel;\n}\n\nexport interface NotebookDocumentBackupData extends IWorkingCopyBackupMeta {\n\treadonly viewType: string;\n\treadonly backupId?: string;\n\treadonly mtime?: number;\n}\n\nexport enum NotebookEditorPriority {\n\tdefault = 'default',\n\toption = 'option',\n}\n\nexport interface INotebookSearchOptions {\n\tregex?: boolean;\n\twholeWord?: boolean;\n\tcaseSensitive?: boolean;\n\twordSeparators?: string;\n}\n\nexport interface INotebookExclusiveDocumentFilter {\n\tinclude?: string | glob.IRelativePattern;\n\texclude?: string | glob.IRelativePattern;\n}\n\nexport interface INotebookDocumentFilter {\n\tviewType?: string | string[];\n\tfilenamePattern?: string | glob.IRelativePattern | INotebookExclusiveDocumentFilter;\n}\n\n//TODO@rebornix test\n\nexport function isDocumentExcludePattern(filenamePattern: string | glob.IRelativePattern | INotebookExclusiveDocumentFilter): filenamePattern is { include: string | glob.IRelativePattern; exclude: string | glob.IRelativePattern; } {\n\tconst arg = filenamePattern as INotebookExclusiveDocumentFilter;\n\n\tif ((typeof arg.include === 'string' || glob.isRelativePattern(arg.include))\n\t\t&& (typeof arg.exclude === 'string' || glob.isRelativePattern(arg.exclude))) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\nexport function notebookDocumentFilterMatch(filter: INotebookDocumentFilter, viewType: string, resource: URI): boolean {\n\tif (Array.isArray(filter.viewType) && filter.viewType.indexOf(viewType) >= 0) {\n\t\treturn true;\n\t}\n\n\tif (filter.viewType === viewType) {\n\t\treturn true;\n\t}\n\n\tif (filter.filenamePattern) {\n\t\tlet filenamePattern = isDocumentExcludePattern(filter.filenamePattern) ? filter.filenamePattern.include : (filter.filenamePattern as string | glob.IRelativePattern);\n\t\tlet excludeFilenamePattern = isDocumentExcludePattern(filter.filenamePattern) ? filter.filenamePattern.exclude : undefined;\n\n\t\tif (glob.match(filenamePattern, basename(resource.fsPath).toLowerCase())) {\n\t\t\tif (excludeFilenamePattern) {\n\t\t\t\tif (glob.match(excludeFilenamePattern, basename(resource.fsPath).toLowerCase())) {\n\t\t\t\t\t// should exclude\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nexport interface INotebookCellStatusBarItemProvider {\n\tviewType: string;\n\tonDidChangeStatusBarItems?: Event<void>;\n\tprovideCellStatusBarItems(uri: URI, index: number, token: CancellationToken): Promise<INotebookCellStatusBarItemList | undefined>;\n}\n\nexport class CellSequence implements ISequence {\n\n\tconstructor(readonly textModel: NotebookTextModel) {\n\t}\n\n\tgetElements(): string[] | number[] | Int32Array {\n\t\tconst hashValue = new Int32Array(this.textModel.cells.length);\n\t\tfor (let i = 0; i < this.textModel.cells.length; i++) {\n\t\t\thashValue[i] = this.textModel.cells[i].getHashValue();\n\t\t}\n\n\t\treturn hashValue;\n\t}\n}\n\nexport interface INotebookDiffResult {\n\tcellsDiff: IDiffResult,\n\tlinesDiff?: { originalCellhandle: number, modifiedCellhandle: number, lineChanges: editorCommon.ILineChange[]; }[];\n}\n\nexport interface INotebookCellStatusBarItem {\n\treadonly alignment: CellStatusbarAlignment;\n\treadonly priority?: number;\n\treadonly text: string;\n\treadonly color?: string | ThemeColor;\n\treadonly backgroundColor?: string | ThemeColor;\n\treadonly tooltip?: string;\n\treadonly command?: string | Command;\n\treadonly accessibilityInformation?: IAccessibilityInformation;\n\treadonly opacity?: string;\n\treadonly onlyShowWhenActive?: boolean;\n}\n\nexport interface INotebookCellStatusBarItemList {\n\titems: INotebookCellStatusBarItem[];\n\tdispose?(): void;\n}\n\nexport const DisplayOrderKey = 'notebook.displayOrder';\nexport const CellToolbarLocation = 'notebook.cellToolbarLocation';\nexport const CellToolbarVisibility = 'notebook.cellToolbarVisibility';\nexport type ShowCellStatusBarType = 'hidden' | 'visible' | 'visibleAfterExecute';\nexport const ShowCellStatusBar = 'notebook.showCellStatusBar';\nexport const NotebookTextDiffEditorPreview = 'notebook.diff.enablePreview';\nexport const ExperimentalInsertToolbarAlignment = 'notebook.experimental.insertToolbarAlignment';\nexport const CompactView = 'notebook.compactView';\nexport const FocusIndicator = 'notebook.cellFocusIndicator';\nexport const InsertToolbarLocation = 'notebook.insertToolbarLocation';\nexport const GlobalToolbar = 'notebook.globalToolbar';\nexport const UndoRedoPerCell = 'notebook.undoRedoPerCell';\nexport const ConsolidatedOutputButton = 'notebook.consolidatedOutputButton';\nexport const ShowFoldingControls = 'notebook.showFoldingControls';\nexport const DragAndDropEnabled = 'notebook.dragAndDropEnabled';\nexport const NotebookCellEditorOptionsCustomizations = 'notebook.editorOptionsCustomizations';\nexport const ConsolidatedRunButton = 'notebook.consolidatedRunButton';\nexport const OpenGettingStarted = 'notebook.experimental.openGettingStarted';\nexport const TextOutputLineLimit = 'notebook.output.textLineLimit';\nexport const GlobalToolbarShowLabel = 'notebook.globalToolbarShowLabel';\n\nexport const enum CellStatusbarAlignment {\n\tLeft = 1,\n\tRight = 2\n}\n\nexport interface INotebookDecorationRenderOptions {\n\tbackgroundColor?: string | ThemeColor;\n\tborderColor?: string | ThemeColor;\n\ttop?: editorCommon.IContentDecorationRenderOptions;\n}\n\nexport class NotebookWorkingCopyTypeIdentifier {\n\n\tprivate static _prefix = 'notebook/';\n\n\tstatic create(viewType: string): string {\n\t\treturn `${NotebookWorkingCopyTypeIdentifier._prefix}${viewType}`;\n\t}\n\n\tstatic parse(candidate: string): string | undefined {\n\t\tif (candidate.startsWith(NotebookWorkingCopyTypeIdentifier._prefix)) {\n\t\t\treturn candidate.substr(NotebookWorkingCopyTypeIdentifier._prefix.length);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ISequence, LcsDiff } from 'vs/base/common/diff/diff';\nimport { hash } from 'vs/base/common/hash';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IRequestHandler } from 'vs/base/common/worker/simpleWorker';\nimport * as model from 'vs/editor/common/model';\nimport { PieceTreeTextBufferBuilder } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder';\nimport { CellKind, ICellDto2, IMainCellDto, INotebookDiffResult, IOutputDto, NotebookCellInternalMetadata, NotebookCellMetadata, NotebookCellsChangedEventDto, NotebookCellsChangeType, NotebookCellTextModelSplice, NotebookData, NotebookDocumentMetadata } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { Range } from 'vs/editor/common/core/range';\nimport { EditorWorkerHost } from 'vs/workbench/contrib/notebook/common/services/notebookWorkerServiceImpl';\n\nclass MirrorCell {\n\tprivate _textBuffer!: model.IReadonlyTextBuffer;\n\n\tget textBuffer() {\n\t\tif (this._textBuffer) {\n\t\t\treturn this._textBuffer;\n\t\t}\n\n\t\tconst builder = new PieceTreeTextBufferBuilder();\n\t\tbuilder.acceptChunk(Array.isArray(this._source) ? this._source.join('\\n') : this._source);\n\t\tconst bufferFactory = builder.finish(true);\n\t\tthis._textBuffer = bufferFactory.create(model.DefaultEndOfLine.LF).textBuffer;\n\n\t\treturn this._textBuffer;\n\t}\n\n\tprivate _primaryKey?: number | null = null;\n\tprimaryKey(): number | null {\n\t\tif (this._primaryKey === undefined) {\n\t\t\tthis._primaryKey = hash(this.getValue());\n\t\t}\n\n\t\treturn this._primaryKey;\n\t}\n\n\tprivate _hash: number | null = null;\n\n\tconstructor(\n\t\treadonly handle: number,\n\t\tprivate _source: string | string[],\n\t\tpublic language: string,\n\t\tpublic cellKind: CellKind,\n\t\tpublic outputs: IOutputDto[],\n\t\tpublic metadata?: NotebookCellMetadata,\n\t\tpublic internalMetadata?: NotebookCellInternalMetadata,\n\n\t) { }\n\n\tgetFullModelRange() {\n\t\tconst lineCount = this.textBuffer.getLineCount();\n\t\treturn new Range(1, 1, lineCount, this.textBuffer.getLineLength(lineCount) + 1);\n\t}\n\n\tgetValue(): string {\n\t\tconst fullRange = this.getFullModelRange();\n\t\tconst eol = this.textBuffer.getEOL();\n\t\tif (eol === '\\n') {\n\t\t\treturn this.textBuffer.getValueInRange(fullRange, model.EndOfLinePreference.LF);\n\t\t} else {\n\t\t\treturn this.textBuffer.getValueInRange(fullRange, model.EndOfLinePreference.CRLF);\n\t\t}\n\t}\n\n\tgetComparisonValue(): number {\n\t\tif (this._primaryKey !== null) {\n\t\t\treturn this._primaryKey!;\n\t\t}\n\n\t\tthis._hash = hash([hash(this.language), hash(this.getValue()), this.metadata, this.internalMetadata, this.outputs.map(op => ({\n\t\t\toutputs: op.outputs.map(output => ({\n\t\t\t\tmime: output.mime,\n\t\t\t\tdata: output.data\n\t\t\t})),\n\t\t\tmetadata: op.metadata\n\t\t}))]);\n\t\treturn this._hash;\n\t}\n\n\tgetHashValue() {\n\t\tif (this._hash !== null) {\n\t\t\treturn this._hash;\n\t\t}\n\n\t\tthis._hash = hash([hash(this.getValue()), this.language, this.metadata, this.internalMetadata]);\n\t\treturn this._hash;\n\t}\n}\n\nclass MirrorNotebookDocument {\n\tconstructor(\n\t\treadonly uri: URI,\n\t\tpublic cells: MirrorCell[],\n\t\tpublic metadata: NotebookDocumentMetadata,\n\t) {\n\t}\n\n\tacceptModelChanged(event: NotebookCellsChangedEventDto) {\n\t\t// note that the cell content change is not applied to the MirrorCell\n\t\t// but it's fine as if a cell content is modified after the first diff, its position will not change any more\n\t\t// TODO@rebornix, but it might lead to interesting bugs in the future.\n\t\tevent.rawEvents.forEach(e => {\n\t\t\tif (e.kind === NotebookCellsChangeType.ModelChange) {\n\t\t\t\tthis._spliceNotebookCells(e.changes);\n\t\t\t} else if (e.kind === NotebookCellsChangeType.Move) {\n\t\t\t\tconst cells = this.cells.splice(e.index, 1);\n\t\t\t\tthis.cells.splice(e.newIdx, 0, ...cells);\n\t\t\t} else if (e.kind === NotebookCellsChangeType.Output) {\n\t\t\t\tconst cell = this.cells[e.index];\n\t\t\t\tcell.outputs = e.outputs;\n\t\t\t} else if (e.kind === NotebookCellsChangeType.ChangeLanguage) {\n\t\t\t\tconst cell = this.cells[e.index];\n\t\t\t\tcell.language = e.language;\n\t\t\t} else if (e.kind === NotebookCellsChangeType.ChangeCellMetadata) {\n\t\t\t\tconst cell = this.cells[e.index];\n\t\t\t\tcell.metadata = e.metadata;\n\t\t\t} else if (e.kind === NotebookCellsChangeType.ChangeCellInternalMetadata) {\n\t\t\t\tconst cell = this.cells[e.index];\n\t\t\t\tcell.internalMetadata = e.internalMetadata;\n\t\t\t}\n\t\t});\n\t}\n\n\t_spliceNotebookCells(splices: NotebookCellTextModelSplice<IMainCellDto>[]) {\n\t\tsplices.reverse().forEach(splice => {\n\t\t\tconst cellDtos = splice[2];\n\t\t\tconst newCells = cellDtos.map(cell => {\n\t\t\t\treturn new MirrorCell(\n\t\t\t\t\t(cell as unknown as IMainCellDto).handle,\n\t\t\t\t\tcell.source,\n\t\t\t\t\tcell.language,\n\t\t\t\t\tcell.cellKind,\n\t\t\t\t\tcell.outputs,\n\t\t\t\t\tcell.metadata\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tthis.cells.splice(splice[0], splice[1], ...newCells);\n\t\t});\n\t}\n}\n\nexport class CellSequence implements ISequence {\n\n\tconstructor(readonly textModel: MirrorNotebookDocument) {\n\t}\n\n\tgetElements(): string[] | number[] | Int32Array {\n\t\tconst hashValue = new Int32Array(this.textModel.cells.length);\n\t\tfor (let i = 0; i < this.textModel.cells.length; i++) {\n\t\t\thashValue[i] = this.textModel.cells[i].getComparisonValue();\n\t\t}\n\n\t\treturn hashValue;\n\t}\n\n\tgetCellHash(cell: ICellDto2) {\n\t\tconst source = Array.isArray(cell.source) ? cell.source.join('\\n') : cell.source;\n\t\tconst hashVal = hash([hash(source), cell.metadata]);\n\t\treturn hashVal;\n\t}\n}\n\nexport class NotebookEditorSimpleWorker implements IRequestHandler, IDisposable {\n\t_requestHandlerBrand: any;\n\n\tprivate _models: { [uri: string]: MirrorNotebookDocument; };\n\n\tconstructor() {\n\t\tthis._models = Object.create(null);\n\t}\n\tdispose(): void {\n\t}\n\n\tpublic acceptNewModel(uri: string, data: NotebookData): void {\n\t\tthis._models[uri] = new MirrorNotebookDocument(URI.parse(uri), data.cells.map(dto => new MirrorCell(\n\t\t\t(dto as unknown as IMainCellDto).handle,\n\t\t\tdto.source,\n\t\t\tdto.language,\n\t\t\tdto.cellKind,\n\t\t\tdto.outputs,\n\t\t\tdto.metadata\n\t\t)), data.metadata);\n\t}\n\n\tpublic acceptModelChanged(strURL: string, event: NotebookCellsChangedEventDto) {\n\t\tconst model = this._models[strURL];\n\t\tif (model) {\n\t\t\tmodel.acceptModelChanged(event);\n\t\t}\n\t}\n\n\tpublic acceptRemovedModel(strURL: string): void {\n\t\tif (!this._models[strURL]) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this._models[strURL];\n\t}\n\n\tcomputeDiff(originalUrl: string, modifiedUrl: string): INotebookDiffResult {\n\t\tconst original = this._getModel(originalUrl);\n\t\tconst modified = this._getModel(modifiedUrl);\n\n\t\tconst diff = new LcsDiff(new CellSequence(original), new CellSequence(modified));\n\t\tconst diffResult = diff.ComputeDiff(false);\n\n\t\t/* let cellLineChanges: { originalCellhandle: number, modifiedCellhandle: number, lineChanges: editorCommon.ILineChange[] }[] = [];\n\n\t\tdiffResult.changes.forEach(change => {\n\t\t\tif (change.modifiedLength === 0) {\n\t\t\t\t// deletion ...\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (change.originalLength === 0) {\n\t\t\t\t// insertion\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 0, len = Math.min(change.modifiedLength, change.originalLength); i < len; i++) {\n\t\t\t\tlet originalIndex = change.originalStart + i;\n\t\t\t\tlet modifiedIndex = change.modifiedStart + i;\n\n\t\t\t\tconst originalCell = original.cells[originalIndex];\n\t\t\t\tconst modifiedCell = modified.cells[modifiedIndex];\n\n\t\t\t\tif (originalCell.getValue() !== modifiedCell.getValue()) {\n\t\t\t\t\t// console.log(`original cell ${originalIndex} content change`);\n\t\t\t\t\tconst originalLines = originalCell.textBuffer.getLinesContent();\n\t\t\t\t\tconst modifiedLines = modifiedCell.textBuffer.getLinesContent();\n\t\t\t\t\tconst diffComputer = new DiffComputer(originalLines, modifiedLines, {\n\t\t\t\t\t\tshouldComputeCharChanges: true,\n\t\t\t\t\t\tshouldPostProcessCharChanges: true,\n\t\t\t\t\t\tshouldIgnoreTrimWhitespace: false,\n\t\t\t\t\t\tshouldMakePrettyDiff: true,\n\t\t\t\t\t\tmaxComputationTime: 5000\n\t\t\t\t\t});\n\n\t\t\t\t\tconst lineChanges = diffComputer.computeDiff().changes;\n\n\t\t\t\t\tcellLineChanges.push({\n\t\t\t\t\t\toriginalCellhandle: originalCell.handle,\n\t\t\t\t\t\tmodifiedCellhandle: modifiedCell.handle,\n\t\t\t\t\t\tlineChanges\n\t\t\t\t\t});\n\n\t\t\t\t\t// console.log(lineDecorations);\n\n\t\t\t\t} else {\n\t\t\t\t\t// console.log(`original cell ${originalIndex} metadata change`);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n */\n\t\treturn {\n\t\t\tcellsDiff: diffResult,\n\t\t\t// linesDiff: cellLineChanges\n\t\t};\n\t}\n\n\tprotected _getModel(uri: string): MirrorNotebookDocument {\n\t\treturn this._models[uri];\n\t}\n}\n\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host: EditorWorkerHost): IRequestHandler {\n\treturn new NotebookEditorSimpleWorker();\n}\n"],"mappings":"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","names":[],"file":"notebookSimpleWorker.js"}